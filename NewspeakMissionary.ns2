Newspeak3
'HopscotchIDE'
class NewspeakMissionary usingPlatform: p <Platform> ide: ide = NewspeakObject (
"
   Copyright 2008 Cadence Design Systems, Inc.
   
   Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
"|
	Presenter = p hopscotch core Presenter.
	Subject = p hopscotch core Subject.
	ProgrammingPresenter = ide tools ProgrammingPresenter.
	ClassNamePresenter = ide tools ClassNamePresenter.

	"ungood imports"
	ST2NS1Converter = p blackMarket NewsqueakConversions ST2NS1Converter.
	NS02NS1Converter = p blackMarket NewsqueakConversions NS02NS1Converter.
	ClassCategoryConverter = p blackMarket NewsqueakConversions ClassCategoryConverter.
	NewsqueakLanguage2 = p blackMarket Newsqueak2 NewsqueakLanguage2.
	Smalltalk = p blackMarket Smalltalk.
	platform <Platfom> = p blackMarket.
|)
(
class ConvertToNS1Presenter onSubject: subj <ConvertToNS1Subject> = ProgrammingPresenter onSubject: subj ()
('as yet unclassified'
definition = (
	| problem |
	problem:: subject hasAccessors ifTrue: [
		label: (subject hasClassVariables
			ifTrue: [' has accessors and class variables that must be eliminated.']
			ifFalse: [' has accessors that must be eliminated.'])
	] ifFalse: [
		subject hasClassVariables
			ifTrue: [label: ' has class variables that must be eliminated.']
			ifFalse: [blank: 0]].
	^heading: [row: {link: subject title action: [browseClass: subject model]. problem}]
		details: [showWaitCursorWhile: [textDisplay: subject convertedSource]]
))
class ConvertToNS1Subject onModel: cls <Class> = Subject onModel: cls (|
	source
	|)
('as yet unclassified'
convert = (
	| language ast compiler |
	(hasAccessors or: [hasClassVariables]) ifTrue: [
		error: 'Can''t convert classes with accessors or class variables'. ^nil].
	language:: converter outputLanguage.
	ast:: language parser new classDefinition parse: convertedSource readStream.
	compiler:: language compiler new.
	compiler input: convertedSource readStream.
	^compiler classNode: ast
)
convertedSource = (
	nil = source ifTrue: [source:: converter convertClassToString: model].
	^source
)
converter = (
	^{ST2NS1Converter new. NS02NS1Converter new}
		detect: [ :ea | model language = ea inputLanguage]
)
createPresenter = (
	^ConvertToNS1Presenter onSubject: self
)
hasAccessors = (
	| methodNames |
	methodNames::
		(model organization elementArray collect: [ :ea | ea asString]) asSet.
	model instVarNames do: [ :ea |
		((methodNames includes: ea) or: [methodNames includes: ea, ':'])
			ifTrue: [^true]].
	^false
)
hasClassVariables = (
	^model classPool isEmpty not
)
title = (
	^model printString
))
class ConvertToNS2Presenter onSubject: subj <ConvertToNS2Subject> = ProgrammingPresenter onSubject: subj ()
('as yet unclassified'
convertAllButton = (
	subject inconvertibleClasses isEmpty ifTrue: [^{}].
	^{
		row: {
			button: 'Convert all the classes above' action: [respondToConvertAll].
			filler.
		}
	}
)
convertCategoryButton = (
	subject inconvertibleClasses isEmpty ifFalse: [^{}].
	^{
		row: {
			button: 'Convert category ', subject model asString printString, ' to class ', subject camelCaseName printString action: [respondToConvertCategory].
			filler.
		}
	}
)
convertedSource = (
	subject inconvertibleClasses isEmpty ifFalse: [^{}].
	^{heading: (label: subject camelCaseName)
		details: [majorUpdate: [textDisplay: subject convertedSource]]}
)
definition = (
	^list: (
		needsConversionMessage,
		(subject inconvertibleClasses collect:
			[:ea | (ConvertToNS1Subject onModel: ea) presenter]),
		convertAllButton,
		explainConversionMessage,
		(subject convertibleClasses collect:
			[:ea | ClassNamePresenter onSubject: (subjectForClass: ea)]),
		convertCategoryButton,
		convertedSource
	)
)
explainConversionMessage = (
	subject inconvertibleClasses isEmpty ifFalse: [^{}].
	^{textDisplay: 'The classes of ', subject model asString printString, ' can be converted to NS2:'}
)
needsConversionMessage = (
	subject inconvertibleClasses isEmpty ifTrue: [^{}].
	^{textDisplay: 'Before converting ', subject model asString printString, ' to NS2, the following classes must be converted to NS1:'}
)
respondToConvertAll = (
	| classes classesWithProblems |
	classes:: subject inconvertibleClasses collect: [:ea |
		ConvertToNS1Subject onModel: ea].
	classesWithProblems:: classes select: [:ea | ea hasAccessors or: [ea hasClassVariables]].
	classesWithProblems isEmpty ifFalse: [
		^alert: 'Cannot convert classes with accessors or class variables: ',
			(String streamContents: [:s | classesWithProblems do: [:ea | s nextPutAll: ea title] separatedBy: [s nextPut: $ ]])].
	classes	do: [:ea | ea convert]
		displayingProgress: 'Converting ', classes size asString, ' classes'.
	shell refresh
)
respondToConvertCategory = (
	showWaitCursorWhile: [browseClass: subject convert].
))
class ConvertToNS2Subject onModel: cat <Symbol> = Subject onModel: cat (|
	source|)
('as yet unclassified'
camelCaseName = (
	^String streamContents:
		[ :s | (model asString findTokens: {$-. $_. $ })
				do: [ :w | s nextPutAll: w asLowercase capitalized]]
)
classes = (
	^(SystemOrganization listAtCategoryNamed: model)
		collect: [ :clsName | Smalltalk at: clsName]
)
convert = (
	| language ast compiler |
	language:: NewsqueakLanguage2 new.
	ast:: language parser new compilationUnit parse: convertedSource readStream.
	compiler:: language compiler new.
	compiler input: convertedSource readStream.
	^compiler classNode: ast
)
convertedSource = (
	nil = source ifTrue: [
		source:: String streamContents:
			[ :s | converter convertToModuleNamed: camelCaseName on: s]].
	^source
)
converter = (
	^ClassCategoryConverter for: model
)
convertibleClasses = (
	^classes select: [ :ea | ea language isConvertibleTo: class language]
)
createPresenter = (
	^ConvertToNS2Presenter onSubject: self
)
inconvertibleClasses = (
	^classes reject: [ :ea | ea language isConvertibleTo: class language]
)
title = (
	^'Convert category ', model asString printString, ' to Newspeak2'
))'as yet unclassified'
SystemOrganization = (
	^platform SystemOrganization
)
error: str = (
	"Parts of the IDE still expect Object has this method"
	^Error signal: str
))