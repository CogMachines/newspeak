Newspeak3
'HopscotchIDE'
class WebIDEApp packageUsing: manifest = ( 
(*Application object for the Web version of the IDE. In time, one would hope this converged with HopscotchIDEApp. The first step in this evolution was SimpleBrowsing (formerly known as MiniBrowser). The next step will be to integrate a version of SimpleBrowsing along with MiniTest, namespaces and colorization, and extend from there.
 
Copyright 2016 - 2017 Google Inc.*)|
	Browsing = manifest SimpleBrowsing.
	Minitest = manifest Minitest.
	MinitestUI = manifest MinitestUI.
	Namespacing = manifest NamespacingForV8.
	NewspeakColorization = manifest NewspeakColorization2.
	WorkspaceManager = manifest WorkspaceManagerForV8.
	publicImage = manifest publicImage.
	protectedImage = manifest protectedImage.
	privateImage = manifest privateImage.
	hsAddImage = manifest hsAddImage.
	hsAddOutImage = manifest hsAddOutImage.
	hsAddOverImage = manifest hsAddOverImage.
	hsDropdownImage = manifest hsDropdownImage.
	hsDropdownOutImage = manifest hsDropdownOutImage.
	hsDropdownOverImage = manifest hsDropdownOverImage.	
	hsExpandImage = manifest hsExpandImage.
	hsExpandOverImage = manifest hsExpandOverImage.
	hsExpandDownImage = manifest hsExpandDownImage.
	hsCollapseImage = manifest hsCollapseImage.
	hsCollapseOverImage = manifest hsCollapseOverImage.
	hsCollapseDownImage = manifest hsCollapseDownImage.
	classPresenterImage = manifest classPresenterImage.
	classUnknownImage = manifest classUnknownImage.
	languageNewspeak3 = manifest languageNewspeak3.
|) (
class HopscotchIDE using: p <Platform> = (
(* I am to the IDE as Platform is to the runtime.  I wire together and store the IDE modules. *)|| 
	(* Simultaneous slots *)
	public browsing = Browsing usingPlatform: p ide: self.
	public namespacing = Namespacing usingPlatform: p.
	public theWorkspaceManager = WorkspaceManager usingPlatform: p ide: self.
	public minitest = Minitest usingPlatform: p.
	public minitestUI (*= MinitestUI usingPlatform: p minitest: minitest ide: self.*)
	public colorizer = (NewspeakColorization usingPlatform: p) NS3BrowserColorizer new.
	
	public images = HopscotchImages new.
	||) (
class HopscotchImages = (
(* Describe the class in this comment. *)|
	public publicAccessImage =  publicImage.
	public protectedAccessImage =  protectedImage.
	public privateAccessImage =  privateImage.
	public addImage = hsAddImage.
	public addOutImage = hsAddOutImage.
	public addOverImage = hsAddOverImage.
	public dropDownImage = hsDropdownImage.
	public dropDownOutImage = hsDropdownOutImage.
	public dropDownOverImage = hsDropdownOverImage.
	public expandImage = hsExpandImage.
	public expandOverImage = hsExpandOverImage.
	public expandDownImage = hsExpandDownImage.
	public collapseImage = hsCollapseImage.
	public collapseOverImage = hsCollapseOverImage.
	public collapseDownImage = hsCollapseDownImage.
	public classPresenterIcon = classPresenterImage.
	public classUnknownIcon = classUnknownImage.
	public classIcon = languageNewspeak3.
|) (
) : (
)
populateIconNamespace: ns  <HopscotchImages> = (
	^ns
		at: 'publicAccessImage' put: images publicAccessImage;
		at: 'protectedAccessImage' put: images protectedAccessImage;
		at: 'privateAccessImage' put: images privateAccessImage;
		at: 'addImage' put: images addImage;
		at: 'addOutImage' put: images addOutImage;
		at: 'addOverImage' put: images addOverImage;
		at: 'dropDownImage' put: images dropDownImage;
		at: 'dropDownOutImage' put: images dropDownOutImage;
		at: 'dropDownOverImage' put: images dropDownOverImage;
		at: 'expandImage' put: images expandImage;
		at: 'expandOverImage' put: images expandOverImage;
		at: 'expandDownImage' put: images expandDownImage;
		at: 'collapseImage' put: images collapseImage;
		at: 'collapseOverImage' put: images collapseOverImage;
		at: 'collapseDownImage' put: images collapseDownImage;
		at: 'classPresenterIcon' put: images classPresenterIcon;
		at: 'classUnknownIcon' put: images classUnknownIcon;
		at: 'classIcon' put: images classIcon;
		yourself
)
public populateNamespaceUsingPlatform: p  = (
  | 
  platformMirror = p mirrors ObjectMirror reflecting: p.
  platformClass <ClassMirror> = topLevelClassOf: platformMirror. 
  namespace = namespacing Root.
  |

	namespace
	      at: 'Icons' put: (populateIconNamespace: namespacing freshNamespace);
		at: platformClass name put: platformClass reflectee;
		at: 'WebIDEApp' put: outer WebIDEApp class;
		at: 'SimpleBrowsing' put: Browsing;
		at: 'Minitest' put: Minitest;
		at: 'MinitestUI' put: MinitestUI;
		at: 'NamespacingForV8' put: Namespacing;
		at: 'NewspeakColorization2' put: NewspeakColorization;
		at: 'WorkspaceManagerForV8' put: WorkspaceManager;
		at: 'platform' put: p;
	      at: 'ide' put: self.
 
     platformMirror getClass slots do: [:s <SlotMirror> |  | klass <ClassMIrror> o <ObjectMirror>  |
		o:: platformMirror getSlot: s name.
		klass:: topLevelClassOf: (p mirrors ObjectMirror reflecting: o reflectee yourself). (* Work around futures!
		The seemingly pointless exercise above extracts the reflectee from an ObjectMirror, invokes yourself on it and 
		wraps the result in an ObjectMirror again. Usually, yourself is an identity and all this would be a waste, but yourself
		is used to force the resolution of futures, so we get the actual instances.
		 *)
		namespace at: klass name put: klass reflectee.
		].
	^namespace
)
topLevelClassOf: om <ObjectMirror> ^ <ClassMirror> = (
	| klass ::= om getClass.  |
	[klass enclosingObject reflectee isNil] whileFalse: [klass:: klass enclosingObject getClass].
      ^klass
)
) : (
)
public main: p <Platform> args: v <Tuple[String]> = (
	| 
	ide = HopscotchIDE using: p.
	|
	ide populateNamespaceUsingPlatform: p.
	p hopscotch core HopscotchWindow openSubject: ide browsing HomeSubject new
	(*	ide theWorkspaceManager AllWorkspacesSubject new *)
	(*	(ide browsing NamespaceSubject onModel: ide namespacing Root key: #Root)*)
	(*	(ide browsing ObjectSubject onModel: 
			(p mirrors ObjectMirror reflecting: p)).*)
)
) : (
)
