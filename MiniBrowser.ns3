Newspeak3
'Samples'
class MiniBrowser packageUsing: manifest = ()
(
class Browsing usingPlatform: p = (|
	Subject = p hopscotch core Subject.
	Presenter = p hopscotch core Presenter.
	TextEditorFragment = p hopscotch fragments TextEditorFragment.
	Color = p graphics Color.
	Gradient = p hopscotch Gradient.
|)
(
class ClassPresenter onSubject: s = Presenter onSubject: s ()
('as yet unclassified'
definition = (
	^column: {
		(column: {
			link: subject name action: [enterSubject:: ClassSubject onModel: subject model (* Why do we need a copy? *)].
			label: 'Slots'.
			row: {
				mediumBlank.
				column: (subject model instanceSide slots collect: [:ea | label: ea name]).
			}.
		}) color: (Color h: 240 s: 0.05 v: 0.9).
		minorClassHeadingBlock: (label: 'Classes').
		row: {
			mediumBlank.
			(column: (subject model instanceSide nestedClasses collect: [:ea | 
				collapsed: [link: ea simpleName action: [enterSubject:: ClassSubject onModel: ea]]
				expanded: [(ClassSubject onModel: ea) presenter]])) elasticity: 1.
		}.
		minorClassHeadingBlock: (label: 'Methods').
		row: {
			mediumBlank.
			(column: (subject model instanceSide methods collect: [:ea | method: ea name])) elasticity: 1.
		}.
		minorClassHeadingBlock: (label: 'Class Methods').
		row: {
			mediumBlank.
			(column: (subject model classSide methods collect: [:ea | method: ea name])) elasticity: 1.
		}.
	}
)
method: name = (
	| toggle |
	toggle:: 
		collapsed: [(link: name action: [toggle expand]) color: Color black]
		expanded: [column: {(link: name action: [toggle collapse]) color: Color black. TextEditorFragment new}].
	^toggle
)
minorClassHeadingBlock: body = (
	^(padded: body with: {10. 5. 5. 5.})
		color: minorClassHeadingColor
)
minorClassHeadingColor = (
	^Gradient 
		from: (Color h: 240 s: 0.02 v: 0.94) 
		to: (Color h: 240 s: 0.02 v: 0.9)
)) : ()
class ClassSubject onModel: m = Subject onModel: m (|
|)
('as yet unclassified'
createPresenter = (
	^ClassPresenter onSubject: self
)
name = (
	^model simpleName
)
title = (
	^name
)) : ()) : ()'as yet unclassified'
main: platform args: args = (
	| 
	browsing = Browsing usingPlatform: platform.
	model = platform mirrors ClassDeclarationMirror reflecting: platform hopscotch yourself class mixin.
	|
	platform hopscotch core HopscotchWindow openSubject: (browsing ClassSubject onModel: model)
)) : ()