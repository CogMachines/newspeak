Newspeak3
'Samples'
class MiniBrowser packageUsing: manifest = ()
(
class Browsing usingPlatform: p = (|
	Subject = p hopscotch core Subject.
	Presenter = p hopscotch core Presenter.
	TextEditorFragment = p hopscotch fragments TextEditorFragment.
	Color = p graphics Color.
	Gradient = p hopscotch Gradient.
	List = p collections OrderedCollection.
	
	detailAreaRatio = 1.6.
	captionColor = Color h: 240 s: 0.05 v: 0.9.
|)
(
class ClassPresenter onSubject: s = Presenter onSubject: s ()
('as yet unclassified'
collapsedHeadingDefinition = (
	^link: subject name action: [enterSubject:: ClassSubject onModel: subject model (* Why do we need a copy? *)].
)
definition = (
	^column: {
		headingDefinition.
		minorClassHeadingBlock: (label: 'Classes').
		column: (subject model instanceSide nestedClasses collect: [:ea | nestedClass: ea]).
		minorClassHeadingBlock: (label: 'Methods').
		column: (subject model instanceSide methods collect: [:ea | method: ea]).
		minorClassHeadingBlock: (label: 'Class Methods').
		column: (subject model classSide methods collect: [:ea | method: ea]).
	}
)
expandedHeadingDefinition = (
	| parts |
	parts:: List new.
	subject enclosingClassSubjects
		do: [:ecs | parts add: (link: ecs name action: [enterSubject:: ecs])]
		separatedBy: [ parts add: (label: ' in ')].
	^column: {
		blank: 5.
		row: parts.
		label: 'Slots'.
		row: {
			mediumBlank.
			column: (subject model instanceSide slots collect: [:ea | label: ea name]).
		}.
	}
)
headingDefinition = (
	^(column: {
		expanded: [expandedHeadingDefinition]
		collapsed: [collapsedHeadingDefinition].
	}) color: (Color h: 240 s: 0.05 v: 0.9).
)
method: mm = (
	| toggle |
	toggle:: 
		collapsed: [(link: mm name action: [toggle expand]) color: Color black]
		expanded: [column: {(link: mm name action: [toggle collapse]) color: Color black. TextEditorFragment new}].
	^toggle
)
minorClassHeadingBlock: body = (
	^(padded: body with: {10. 5. 5. 5.})
		color: minorClassHeadingColor
)
minorClassHeadingColor = (
	^Gradient 
		from: (Color h: 240 s: 0.02 v: 0.94) 
		to: (Color h: 240 s: 0.02 v: 0.9)
)
nestedClass: cdm = (
	^collapsed: [link: cdm simpleName action: [enterSubject:: ClassSubject onModel: cdm]]
	expanded: [(ClassSubject onModel: cdm) presenter]
)) : ()
class ClassSubject onModel: m = Subject onModel: m (|
|)
('as yet unclassified'
createPresenter = (
	^ClassPresenter onSubject: self
)
enclosingClassSubjects = (
	| them = List new. c |
	c:: model.
	[c isNil] whileFalse: [them add: (ClassSubject onModel: c). c:: c enclosingClass].
	^them
)
name = (
	^model simpleName
)
title = (
	^name
)) : ()
class ObjectPresenter onSubject: s = Presenter onSubject: s (|
	resultHolder
|)
('as yet unclassified'
captionBar: body = (
	^(column: {
		smallBlank.
		row: {
			mediumBlank.
			body elasticity: 1.
			smallBlank
			}.
	}) color: captionColor
)
classInfoLine = (
	^row: {
		(label: 'class') width: 0 elasticity: 1.
		(row: {
			link: subject className action: [enterSubject: subject classSubject].
		}) width: 0 elasticity: detailAreaRatio.
	}
)
definition = (
	^column: {
		captionBar: (column: {
			selfInfoLine.
			enclosingInfoLine.
			classInfoLine.
			smallBlank.
			TextEditorFragment new
				changeResponse: [:editor | evaluate: editor textBeingAccepted asString].
			smallBlank.
			resultHolder:: holder: [nothing].
		}).
		objectDetails.
	}
)
enclosingInfoLine = (
	^row: {
		(label: 'enclosingObject') width: 0 elasticity: 1.
		(row: {
			link: subject enclosingObjectName action: [enterSubject:: ObjectSubject onModel: subject classMirror enclosingObject].
		}) width: 0 elasticity: detailAreaRatio.
	}
)
evaluate: expression = (
	| s |
	s:: subject model 
		evaluate: (withoutNbsp: expression)
		ifError: [:e | resultHolder content: (label: 'runtime error: ',e printString)].
	resultHolder content: (label: s reflectee printString).
)
objectDetails = (
	^row: {
	mediumBlank.
	(column: ((subject model getClassIfFail: []) slots collect: [:slot |
		| val = subject model getSlot: slot name ifFail: []. |
		row: {
			(label: slot name) width: 0 elasticity: 1.
			(row: {
				link: val reflectee printString action: [enterSubject:: ObjectSubject onModel: val].
			}) width: 0 elasticity: detailAreaRatio.
		}
	])) elasticity: 1.
	smallBlank
	}
)
selfCaption = (
	^'self'
)
selfInfoLine = (
	^row: {
		(label: selfCaption (*asText allBold*)) width: 0 elasticity: 1.
		(row: {
			(link: subject title action: [goToSelf]) compressibility: 1.
			filler compressibility: 0.
			mediumBlank.
			(*dropDownMenu: [actionsMenu]*)
		}) width: 0 elasticity: detailAreaRatio.
	}
)
smallBlank = (
	^blank: 5
)
withoutNbsp: string = (
	|
	nonbreakingSpace = [String fromCharCode: 160] on: Error do: [String value: 160].
	space = [String fromCharCode: 32] on: Error do: [String value: 32].
	|
	^string replaceAll: nonbreakingSpace with: space.
)) : ()
class ObjectSubject onModel: m = Subject onModel: m (|
|)
('as yet unclassified'
classMirror ^<ClassMirror> = (
	^model getClassIfFail: [halt]
)
className ^<String> = (
	^classMirror simpleName
)
classSubject = (
	^ClassSubject onModel: classMirror mixin declaration
)
createPresenter = (
	^ObjectPresenter onSubject: self
)
enclosingObjectName = (
	^classMirror enclosingObject reflectee printString
)
title = (
	^model reflectee printString
)) : ()) : ()'as yet unclassified'
main: platform args: args = (
	| 
	browsing = Browsing usingPlatform: platform.
	model = platform mirrors ClassDeclarationMirror reflecting: platform hopscotch yourself class mixin.
	|
	platform hopscotch core HopscotchWindow openSubject: 
		(browsing ObjectSubject onModel: 
			(platform mirrors ObjectMirror reflecting: platform)).
)) : ()