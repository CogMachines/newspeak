Newspeak3
'StructuredVCS'
class VCSSourceControlLauncher usingPlatform: p = NewspeakObject (
"As long as the new source control is not integrated into Hopscotch, this provides just a quick way to launch the source control application. This is just a hack!"|
	platform = p.
	Class = platform Class.
	Smalltalk = platform Smalltalk.

	CombinatorialParsing = (platform moduleOf: 'NS2 Combinatorial Parsing') CombinatorialParsing.
	BlocklessCombinatorialParsing = platform BlocklessCombinatorialParsing mixin apply: CombinatorialParsing.
	LanguageFileReader = platform NsMultilanguage LanguageFileReader.
	
	SmalltalkImage = platform SmalltalkImage.
	FileDirectory = platform FileDirectory.

	VCS = platform StructuredVCS VCS.
	VCSSourceMirrors = platform StructuredVCS VCSSourceMirrors.
	VCSDiffing = platform StructuredVCS VCSDiffing.
	VCSImageMirrorCaching = platform StructuredVCS VCSImageMirrorCaching.
	VCSMercurialBackendProvider = platform StructuredVCS VCSMercurialBackendProvider.
	
	ide = platform Platform ide.
	WordDiffBuilder = ide theSourceManager differences WordDiffBuilder.

	blocklessCombinatorialParsing = BlocklessCombinatorialParsing usingLib: platform.
	languageFileReader = platform NsMultilanguage LanguageFileReader.
	past = platform Past Past usingPlatform: platform.
	
	cachedImageMirrorCache
|)
('actions'
openOnMercurialRepositoryAt: location = (

	^ self
		usingBackendProviderClass: VCSMercurialBackendProvider 		openRepositoryAt: location
)
usingBackendProviderClass: backendProviderClass openRepositoryAt: location = (

	| vcs repository subject backendProvider |
	vcs:: buildVCS.
		
	backendProvider:: backendProviderClass
		usingPlatform: platform
		vcs: vcs.

	repository:: backendProvider Backend new LocalRepository onRepositoryId:
		((FileDirectory on: SmalltalkImage current imagePath) / location) pathName.

	"repository clone: remoteRepository."

	subject:: vcs SourceControlSubject onModel: {repository}.
	platform hopscotch core HopscotchWindow openSubject: subject.
)'private'
buildVCS = (

	^ VCS
		usingPlatform: platform
		sourceMirrors: sourceMirrors
		diffing: diffing
		past: past.
)
diffing = (

	^ VCSDiffing
		usingPlatform: platform
		WordDiffBuilder: WordDiffBuilder
)
imageMirrorCache = (

	nil = cachedImageMirrorCache ifTrue: [
		cachedImageMirrorCache:: 
		(VCSImageMirrorCaching
			usingPlatform: platform) ImageMirrorCache new.
		cachedImageMirrorCache start].
	^ cachedImageMirrorCache
)
sourceMirrors = (

	^ platform VCSSourceMirrors
		usingPlatform: platform
		parserLib: blocklessCombinatorialParsing
		newspeakGrammar: platform Newspeak3Grammar
		Differencer: diffing Differencer
		LanguageFileReader: LanguageFileReader
		imageMirrorCache: imageMirrorCache
		classDictionary: Smalltalk.
)
stopSystemNotificationListener = (

	imageMirrorCache stop
))