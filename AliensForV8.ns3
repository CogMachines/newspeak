Newspeak3
'Aliens'
 class AliensForV8 usingPlatform: p =  ((* Aliens are a capability-based API for a foreign function interface (FFI). On NS2V8, they allow Newspeak code to invoke JavaScript code and vice versa.

An Alien is a Newspeak proxy for a JavaScript object. Upon receiving a message, an Alien expatriates the arguments, sends the message to the target JavaScript object, and alienates the result.

An Expat is a JavaScript proxy for a Newspeak object. Unpon receiving a message, an Expat alienates the arguments, sends the message to the target Newspeak object, and expatriates the result.

A bilingual object is one whose representation is the same in both languages: unwrapped basic types such as numbers, booleans. Note that even though Newspeak and JavaScript closures have the same representation, they are not bilingual and wrapping should occur because Newspeak closures expect Newspeak/Alien arguments and JavaScript closures expect JavaScript/Expat arguments. What about strings and arrays? It would seem we have to wrap arrays because their elements should be alieniated/expatriated. It may be safe to treat strings as bilingual if they always respond to messages with other bilingual objects.

Alien mappings:
alien sort: a ignored: b ignored: c -> alien.sort(a, b, c)
alien new: a ignored: b ignored: c  -> new alien(a, b, c)
alien at: 'a' -> alien.a
alien at: 'a' put: b -> alien.a = b

Expat mappings:
?

*)|
public global = Alien wrapping: (js ident: 'theGlobalObject').
|)
(
class Alien wrapping: o = (js assign: (js propertyOf: self at: (js literal: 'jsTarget')) toBe: o)
('as yet unclassified'
applyConstructorUsingEval: jsArguments = (
	(* On at least Safari, some objects used as constructors are not functions (*face palm*) and the trick with bind and apply doesn't work. Fall back to eval, sigh... *)
	js verbatim: 
'function applyNewUsingEval(weirdConstructor, args) {
	var a = [];
	for (var i = 0; i < args.length; i++)
		a[i] = "args[" + i + "]";
	return eval("new weirdConstructor(" + a.join() + ")");
}'.
	^js call: (js ident: 'applyNewUsingEval') with: {(js propertyOf: self at: (js literal: 'jsTarget')). jsArguments}
)
at: memberName = (
	^alienate: (js propertyOf: (js propertyOf: self at: (js literal: 'jsTarget')) at: memberName)
)
at: memberName put: value = (
	js assign: (js propertyOf: (js propertyOf: self at: (js literal: 'jsTarget')) at: memberName) toBe: (expatriate: value).
	^value
)
doesNotUnderstand: msg = (
	| jsTarget jsArguments jsSelector |
	jsTarget:: js propertyOf: self at: (js literal: 'jsTarget').
	jsArguments:: msg arguments collect: [:arg | expatriate: arg].
	jsSelector:: copyUntilFirstColon: msg mangledSelector.
	jsSelector = 'new'
		ifTrue:
			[ (* var args = [null].concat(jsArguments);
				var boundFunction = _jsTarget.bind.apply(_jsTarget, args);
				return new boundFunction(); *)
			| args boundFunction |
			(js operator: '===' with: (js prefixOperator: 'typeof ' on: jsTarget) and: (js literal: 'function')) 
				ifFalse: [^alienate: (applyConstructorUsingEval: jsArguments)].
			args:: js call: (js propertyOf: (js array: {js ident: 'null'}) at: (js literal: 'concat')) with: {jsArguments}.
			boundFunction:: (js call: (js propertyOf: (js propertyOf: jsTarget at: (js literal: 'bind')) at: (js literal: 'apply')) with: {jsTarget. args}).
			^alienate: (js new: boundFunction with: {}) ]
		
		ifFalse:
			[ | jsFunction jsResult |
			jsFunction:: js propertyOf: jsTarget at: jsSelector.
			(js operator: '===' with: jsFunction and: (js ident: 'undefined'))
				ifTrue: [^super doesNotUnderstand: msg].
			jsResult:: js call: (js propertyOf: jsFunction at: (js literal: 'apply')) with: {jsTarget. jsArguments}.
			^alienate: jsResult].
)
isAlien ^<Boolean> = (
	^true
)
isExpat ^<Boolean> = (
	^false
)
isUndefined = (
	^js operator: '===' with: (js propertyOf: self at: (js literal: 'jsTarget')) and: (js ident: 'undefined')
)
printString = (
	^'Alien wrapping: ', (js call: (js propertyOf: (js propertyOf: self at: (js literal: 'jsTarget')) at: (js literal: 'toString')) with: {})
)
value = (
	| jsTarget = js propertyOf: self at: (js literal: 'jsTarget'). |
	^alienate: (js 
		call: (js propertyOf: jsTarget at: (js literal: 'apply')) 
		with: {jsTarget})
)
value: a1 = (
	| jsTarget = js propertyOf: self at: (js literal: 'jsTarget'). |
	^alienate: (js 
		call: (js propertyOf: jsTarget at: (js literal: 'apply')) 
		with: {jsTarget. expatriate: a1})
)
value: a1 value: a2 = (
	| jsTarget = js propertyOf: self at: (js literal: 'jsTarget'). |
	^alienate: (js 
		call: (js propertyOf: jsTarget at: (js literal: 'apply')) 
		with: {jsTarget. expatriate: a1. expatriate: a2})
)
value: a1 value: a2 value: a3 = (
	| jsTarget = js propertyOf: self at: (js literal: 'jsTarget'). |
	^alienate: (js 
		call: (js propertyOf: jsTarget at: (js literal: 'apply')) 
		with: {jsTarget. expatriate: a1. expatriate: a2. expatriate: a3})
)) : ()
class Expat wrapping: o = (|
private _nsTarget = o.
|)
('as yet unclassified'
doesNotUnderstand: msg = (
	|
	nsSelector = something: msg selector.
	nsArguments = msg arguments collect: [:arg | alienate: arg].
	nsResult = js
		call: (js propertyOf: (js propertyOf:_nsTarget at: nsSelector) at: (js literal: 'apply')) 
		with: {_nsTarget. nsArguments}.
	|
	^expatriate: nsResult
)
isAlien ^<Boolean> = (
	^false
)
isExpat ^<Boolean> = (
	^true
)) : ()'as yet unclassified'
alienate: jsObj = (
	#TODO.
	(js prefixOperator: 'typeof ' on: jsObj) == 'string' ifTrue: [^jsObj].
	(js prefixOperator: 'typeof ' on: jsObj) == 'number' ifTrue: [^jsObj].
	(js prefixOperator: 'typeof ' on: jsObj) == 'boolean' ifTrue: [^jsObj].
	(* This does not discrimate NS vs JS closures *)
	(js prefixOperator: 'typeof ' on: jsObj) == 'function' ifTrue: [^Alien wrapping: jsObj].
	(js operator: 'instanceof' with: jsObj and: (js propertyOf: (js propertyOf: Object at: (js literal: 'runtimeClass')) at: (js literal: 'basicNew')))
		ifTrue:
			[jsObj isAlien ifTrue: [Error signal: 'Shouldnt be asked to double alienate...'].
			jsObj isExpat ifTrue: [^jsObj _nsTarget].
			Error signal: 'Asked to alienate a raw Newspeak object...'].
	(js operator: 'instanceof' with: jsObj and: (js ident: 'Array'))
		ifTrue: [Error signal: 'TODO: Support arrays'].
	^Alien wrapping: jsObj
)
copyUntilFirstColon: sel = (
	#BOGUS. (* DNU does not yet pass unmangled selectors. *)
	2 to: sel size do: [:i |
		((sel at: i) = "$") ifTrue: [^sel copyFrom: 2 to: i-1]].
	^sel copyFrom: 2 to: sel size
)
expatriate: nsObj = (
	#TODO.
	(js prefixOperator: 'typeof ' on: nsObj) == 'string' ifTrue: [^nsObj].
	(js prefixOperator: 'typeof ' on: nsObj) == 'number' ifTrue: [^nsObj].
	(js prefixOperator: 'typeof ' on: nsObj) == 'boolean' ifTrue: [^nsObj].
	(* This does not discrimate NS vs JS closures *)
	(js prefixOperator: 'typeof ' on: nsObj) == 'function' ifTrue: [^expatriateBlock: nsObj].
	(js operator: 'instanceof' with: nsObj and: (js propertyOf: (js propertyOf: Object at: (js literal: 'runtimeClass')) at: (js literal: 'basicNew')))
		ifTrue:
			[nsObj isAlien ifTrue: [^js propertyOf: nsObj at: (js literal: 'jsTarget')].
			nsObj isExpat ifTrue: [Error signal: 'Shouldnt be asked to double expatriate...'].
			^Expat wrapping: nsObj.].
	(js operator: 'instanceof' with: nsObj and: (js ident: 'Array'))
		ifTrue: [Error signal: 'TODO: Support arrays'].
	Error signal: 'Asked to expatriate a raw JS object...'
)
expatriateBlock: b = (
	^js functionOf: {} body: (
		js return: (
			expatriate: (
				b valueWithArguments: (
					(js verbatim: 'Array.prototype.slice.call(arguments, 0)') collect: [:ea | alienate: ea]))))
)) : ()