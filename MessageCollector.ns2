Newspeak3'NewspeakUtilities'class MessageCollector  usingPlatform: platform = NewspeakObject ("This module provides a facility for extracting all message names used in a method from its source code. It supports Smalltalk as well NS0, NS1, NS2 and beyond."|Set = platform Collections Set.St80Grammar = platform NewsqueakBase SmalltalkParser.NS0Grammar = platform NewsqueakBase StrongtalkParser.NS1Grammar = platform Newsqueak1 TypedNS1Grammar.NS2Grammar = platform Newsqueak2 TypedNS2Grammar.St80Collector = Collector mixin |> St80Grammar.NS0Collector = Collector mixin |> NS0Grammar.NS1Collector = Collector mixin  |> NS1Grammar.NS2Collector = Collector mixin |> NS2Grammar.|)(class Collector = ("Parse the input stream and colllect all the message selectors in it."|collectedSelectors <Set[Symbol]> = Set new.|)('as yet unclassified'binaryMsg ^ <MessageAST> = (^super binaryMsg     wrap:[:c   | 		collectedSelectors add: c first token asSymbol.		c	]	)keywordMsg = (^super keywordMsg          wrap:[:kws  |  | sel  <String> |                    	sel:: kws inject:'' into:[:s <String>    :kwd   | s, (kwd at:1) token].				 collectedSelectors add: sel asSymbol. 				 kws  		]	)slotName = (	^super slotName wrap:[: s <Token> |		collectedSelectors add: s token asSymbol.		s		])unarySelector  = (	^super unarySelector wrap:[: u <Token> | 		collectedSelectors add: u token asSymbol.		u		]))'as yet unclassified'selectorsIn: src <String> inLanguage: language <Language> ^ <Collection[Symbol]> = (| collector <Collector> parser <CombinatorialParser> |	collector:: (language new isNewspeakLanguage2  		ifTrue:[NS2Collector]		ifFalse:[language isNewspeakLanguage1 ifTrue:[NS1Collector]		ifFalse:[language isNewspeakLanguage0 ifTrue:[NS0Collector]		ifFalse:[			assert: [language isSmalltalkLanguage] message: 'unknown language'.			St80Collector		]]]) new.      parser:: language new isNewspeakLanguage2 		ifTrue:[collector methodDecl]		ifFalse:[collector method].	parser parse: src readStream.	^collector collectedSelectors))