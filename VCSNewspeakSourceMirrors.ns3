Newspeak3
'MemoryHole'
class VCSNewspeakSourceMirrors usingPlatform: p vcs: vcs ide: ide = (||
	(* These imports are somewhat cheating. The mature mirrors API probably won't make these avaiable. *)
	CombinatorialParser = p mirrors parserLib CombinatorialParser.
	TypedNS3Grammar = p mirrors grammar TypedNS3Grammar.
	
	private mirrors = p mirrors.
	private ClassDeclarationBuilder = p mirrors ClassDeclarationBuilder.
	private Smalltalk = p squeak Smalltalk.
	private SystemOrganization = p squeak SystemOrganization.
	private Dictionary = p squeak Dictionary.
	private OrderedCollection = p squeak OrderedCollection.
	private PackageInfo = p squeak PackageInfo.
	private Root = ide namespacing Root.

	private imageMirrorCache = vcs imageMirrorCache.
	private SourceMirror = vcs sourceMirrors SourceMirror.
	private StringMirror = vcs sourceMirrors StringMirror.
	
	private compilationUnitCache = MirrorCache onSelector: #compilationUnit.
	public methodDeclCache = MirrorCache onSelector: #methodDecl.
||) (
class AnnotatedSourceReference start: s end: e input: i children: c = SourceReference start: s end: e input: i (
(*A SourceReference with some associated data, that might be raw parse trees or might be something else, typicaly derived from the trees. There is nothing to ensure that the data and locations are connected in any way.  See the superclass for more details.

Adapted from the old ParentYield class, which is why the Cadence copyright below applies.

Copyright 2008 Cadence Design Systems, Inc.
   
   Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0*)|
public children = c.
|) (
) : (
)
public class ClassSourceMirror = SourceMirror (|
	public category
	public accessModifier <String>
	public name <Symbol>
	public constructor <String>
	public superclassClause
	public classComment <String>
	public slotsSource <String>
	public slots
	public initExpressions <String>
	public classes
	public instanceMethods
	public classMethods
|) (
'as yet unclassified'
public children = (

	^ Array streamContents: [:stream |
		{#name. #category. #accessModifier. #constructor. #superclassClause. #classComment. #slotsSource. #initExpressions} do: [:each |
			(self perform: each) ifNotNil: [:it | | stringMirror |
				stringMirror:: StringMirror new
					string: it;
					yourself.
				stream nextPut: each -> stringMirror]].
		{#slots. #classes. #instanceMethods. #classMethods} do: [:each |
			(self perform: each) ifNotNil: [:it |
				stream nextPutAll: (it collect: [:el | each -> el])]]]	
)
public filename = (
	^name, '.ns3'
)
public installAsToplevelClass = (

	installMirrors: {self}
)
public isClassDeclarationMirror = (
	^true
)
public isToplevel = (

	flag: #BOGUS. (* Class mirror should know whether it's a top-level class and decide to emit a file header based on that. *)
	^ (category = nil or: [category isEmpty]) not
)
public languageIdentifier ^ <String> = (

	^ 'Newspeak3'
)
streamCategory: cat to: stream = (

	| categories sortedAssociations |
	categories:: cat groupBy: [:each | each category] having: [:each | true].
	sortedAssociations:: categories associations sortBy: [:a :b |
		sortBlock value: a key value: b key].
	sortedAssociations do: [:each |
		stream
			nextPut: "'";
			nextPutAll: each key;
			nextPut: "'"; cr.
		(each value sortBy: sortBlock) do: [:method |
			method streamTo: stream.
			stream cr]].
)
streamClassBodyTo: stream = (

	stream nextPutAll: ' ('; cr.
	(classes asOrderedCollection sortBy: sortBlock) do: [:each |
		each streamTo: stream].
	streamCategory: instanceMethods to: stream.
	stream	nextPutAll: ')'.
	classMethods ifNotNil: [:it |
		stream nextPutAll: ' : ('; cr.
		streamCategory: classMethods to: stream.
		stream nextPut: ")"].
	stream cr.
)
streamClassCommentTo: stream = (

	(nil = classComment or: [classComment isEmpty]) ifFalse: [
		 | first last firstParen lastParen |
		first:: classComment findFirst: [:x | x = """].
		last:: classComment findLast: [:x | x = """].
		
		firstParen:: classComment findFirst: [:x | x = "("].
		lastParen:: classComment findLast: [:x | x = ")"].
		
		(firstParen ~= 0) & ((firstParen < first) | (first = 0)) 
			ifTrue: [^stream nextPutAll: classComment].
		
		stream nextPutAll: (classComment copyFrom: 1 to: first).
		
		classComment from: first + 1 to: last - 1 do: [:each |
			stream nextPut: each.
			each = """ ifTrue: [stream nextPut: """]].
		
		stream nextPutAll: (classComment copyFrom: last to: classComment size)].
		
)
streamClassHeaderTo: stream = (

	stream
		nextPutAll: (accessModifier ifNil: [''] ifNotNil: [:it | it, ' ']);
		nextPutAll: 'class ';
		nextPutAll: name.
	constructor ifNotNil: [:it | 
		stream
			nextPutAll: ' ';
			nextPutAll: constructor].
	stream nextPutAll: ' ='.
	superclassClause ifNotNil: [:it | 
		stream
			nextPutAll: ' ';
			nextPutAll: superclassClause].
	stream	nextPutAll: ' ('.
	streamClassCommentTo: stream.
	slotsSource ifNotNil: [:it |
		stream nextPutAll: it].
	initExpressions ifNotNil: [:it |
		stream nextPutAll: it].
	stream nextPutAll: ')'.
)
streamFileHeaderTo: stream = (

	isToplevel ifFalse: [
		^ self].
	stream
		nextPutAll: languageIdentifier; cr;
		nextPut: "'";
		nextPutAll: category;
		nextPut: "'";
		cr.
)
public streamTo: stream = (

	streamFileHeaderTo: stream.
	streamClassHeaderTo: stream.
	streamClassBodyTo: stream
)
'private'
sortBlock ^ <[:Object :Object | Boolean]> = (

	^ [:a :b | a name <= b name]
)
) : (
)
class MemoizingParser onParser: p = CombinatorialParser (|
parser = p.
cache = Dictionary new.
keySize = 30.
|) (
'as yet unclassified'
cachedResultsStartingWithFirstCharsOf: input = (

	| key length |
	length:: keySize min: input size - input position.
	key:: input next: length.
	^ cache
		at: key
		ifAbsentPut: [OrderedCollection new]		
)
public parse: input inContext: context ifError: errorBlock  = (

	| results position result |

	position:: input position.
	results:: cachedResultsStartingWithFirstCharsOf: input.
	input position: position.
	result:: resultFor: input inResults: results.
	result = nil
		ifTrue: [ | parsedInput |
			result:: parser parse: input inContext: context ifError: errorBlock.
			parsedInput:: stringIn: input fromPosition: position.
			results add: parsedInput -> result].
	^ result
)
resultFor: input inResults: results = (

	| result position |
	position:: input position.
	result:: results
		detect: [:each | | inputChunk |
			input position: position.
			inputChunk:: input next: each key size.
			inputChunk = each key]
		ifNone: [
			input position: position.
			^ nil].
	^ result value
)
stringIn: input fromPosition: position = (

	| parsedSize |
	parsedSize:: input position - position.
	input position: position.
	^ input next: parsedSize.
)
) : (
)
class MethodSourceMirror = SourceMirror (|
	public messagePattern
	public methodSource
	public category
	public accessModifier
	public selector
|) (
'as yet unclassified'
public children = (
	^ {}
)
public contentsEquals: other = (

	^ self methodSource = other methodSource and: [
		self category = other category and: [
			self accessModifier = other accessModifier]]
)
public copy = (

	(* Should Newspeak have a default shallow copy built in? *)
	^ MethodSourceMirror new
		messagePattern: messagePattern;
		methodSource: methodSource;
		category: category;
		accessModifier: accessModifier;
		selector: selector;
		yourself
)
public correspondsHash = (

	^ selector hash
)
public correspondsTo: other = (

	^ self selector = other selector
)
public isMethodMirror = (

	^ true
)
public name = (

	^ selector
)
public streamTo: stream = (

	stream nextPutAll: methodSource
)
) : (
)
class MirrorCache onSelector: selector = ((* Keeps a map of string -> mirror *)|
(* Keep the actual dictionaries in VCS(ImageMirror)Caching, so it can be reused over multiple instances *)
cachedMirrors = imageMirrorCache stringToMirrorCacheForProduction: selector.
parser = SourceMirrorParser new.
production = parser perform: selector.
|) (
'as yet unclassified'
public mirrorForStream: stream = (

	^ mirrorForStream: stream ifError: [:pos :msg | error]
)
public mirrorForStream: stream ifError: errorBlock = (

	| string |
	string:: stream contents.
	^ cachedMirrors at: string ifAbsentPut: [ | newMirror | 
		parser input: string.
		newMirror:: production parse: string readStream ifError: errorBlock.
		(* source -> mirror -> source might rearrange elements in source.
		By caching the same mirror under all keys we might save time when comparing mirrors but we might just as well waste time as long as calculating a mirrors contents is slow *)
		cachedMirrors
			at: newMirror contents
			ifAbsentPut: [newMirror]]
)
void = (
	cachedMirrors keysAndValuesRemove: [:k :v | true].
)
) : (
)
class SlotSourceMirror = SourceMirror (|
	public name
	public accessModifier
	public type
	public initializer
	public immutable
|) (
'as yet unclassified'
public children = (
	^ {}
)
public streamTo: stream = (

	accessModifier ifNotNil: [:it | 
		stream
			nextPutAll: it;
			nextPutAll: ' ' ].
	stream nextPutAll: name.
	type ifNotNil: [:it | 
		stream
			nextPut: "<";
			nextPutAll: it;
			nextPut: ">"].
	initializer ifNotNil: [:it | 
		immutable
			ifTrue: [stream nextPutAll: ' = ']
			ifFalse: [stream nextPutAll: ' ::= '].
		stream
			nextPutAll: it;
			nextPutAll: '.'].
)
) : (
)
class SourceMirrorParser = TypedNS3Grammar (|
public input
|) (
'as yet unclassified'
accessModifier = (
	^super accessModifier wrapper: [:am :ws | am]
)
binaryMsgPattern = (

	^ super binaryMsgPattern wrapper: [:sel <Token> :p <Token> | 
		SourceReference wrap: {sel. p} input: input children: sel token]
)
category = (
	(* category:: string, [methodDecl star] *)

	^super category
		wrapper:
			[ :catname :methods | | cat |
			cat:: catname token.
			(* The MemoizingParser returns the identical mirror for all methods with the same source. If a method with the same source exists in multiple categories (in different classes), we need multiple mirrors.
			
			We could create different mirrors right from the start by including the current category as a key to the memoizing dictionary. But accessing the category before the methods are being parsed would require the Newspeak grammar to be extended so that we have a 'categoryName' rule that we can override. We would want to do that in _the_ Newspeak grammar. We don't want to respecify it here.
			
			For now we create copies of method mirrors if they are set to wrong categories.	*)
			methods collect: [:each |
				(nil = each category or: [each category = cat])
					ifTrue: [
						each category: cat.
						each]
					ifFalse: [
						each copy
							category: cat;
							yourself]]]
)
classBody = (
	^super classBody
		wrapper:[:instInit <InitializerAST> :instanceSide <SideAST>  :classSide <SideAST> |
			| rawBody  = {instInit. instanceSide. classSide}. |
			SourceReference wrap: rawBody input: input children: {#classBody. rawBody}
			]
)
classComment = (

	^super classComment wrapper: [:ws :com | 
		String streamContents: [:stream |
			nil = ws ifFalse: [
				stream nextPutAll: (input contents copyFrom: ws start to: ws end)].
			stream
				nextPutAll: '(*';
				nextPutAll: com token;
				nextPutAll: '*)']]
)
classDecl = ( (* WIP *)
	(*  classDecl =  ((tokenFromSymbol: #class), identifier, messagePattern, equalSign, 
                        inheritanceListAndOrBody) |
                        ((tokenFromSymbol: #class), identifier, empty, equalSign,
                        inheritanceListAndOrBody). *)
	#BOGUS yourself.
	^super classDecl
		wrapper:
			[:am <Token> :classKwd <Token> :ident <Token>  :msgOrEmpty <AnnotatedSourceReference> :eq  <Token>  :iListAndOrBody | 
			|  classes slots slotsSource <String> instanceMethods classMethods klassName <Symbol> costructor <String>  scc <String>  cc <String>  initExpressions <String> body <{Token. String. AnnotatedSourceReference.  List. Token. AnnotatedSourceReference. AnnotatedSourceReference}> bodyOrDot  instanceSide <AnnotatedSourceReference> classSide  <AnnotatedSourceReference> instanceInit <AnnotatedSourceReference> |
			klassName:: ident token asSymbol.
			costructor:: msgOrEmpty ifNotNil: [:it | (SourceReference wrap: it input: input) contents].
			iListAndOrBody isCollection 
				ifFalse:[
					bodyOrDot:: iListAndOrBody children at: 2.
				]
				ifTrue:[
					| sccParts <List> = OrderedCollection new. |
					1 to: iListAndOrBody size -1 do:[:i | sccParts add: (iListAndOrBody at: i)].
					scc:: sccParts ifNotNil: [:it | (SourceReference wrap: it input: input) contents].
					bodyOrDot:: iListAndOrBody last children at: 2.
					].
			body:: bodyOrDot. (* should test if bodyOrDot is collection *)
			instanceSide:: body at: 2. (* 6 *)
			classSide:: body at: 3. (* 7 *)
			instanceInit:: (body at: 1) children at: 2.
			cc:: instanceInit at: 2.
			slots:: (instanceInit at: 3) ifNotNil: [:it | it children children size = 5 ifTrue: [it children children at: 3] ifFalse: [it children children at: 2]].
			slotsSource:: (instanceInit at: 3) ifNil: [nil] ifNotNil: [:it | it contents].
			initExpressions:: (SourceReference wrap: (instanceInit at: 4) input: input) ifNotNil: [:it | it contents].
			classes:: instanceSide children first.
			instanceMethods:: instanceSide children at: 2.
			classMethods:: classSide
				ifNotNil: [:it | it children].
			ClassSourceMirror new
				accessModifier: (am ifNotNil: [am token]);
				name: klassName;
				constructor: costructor;
				superclassClause: scc;
				slots: slots;
				initExpressions: initExpressions;
				slotsSource: slotsSource;
				classes: classes;
				instanceMethods: instanceMethods;
				classMethods: classMethods;
				classComment: cc;
				yourself]
)
classDeclaration = (
	(* classDeclaration:: (tokenFromSymbol: #class), [classHeader], [sideDecl], [classSideDecl opt] *)

	^super classDeclaration
		wrapper:
			[:am :classKwd :hdr :instanceSide :classSide | | yield classes slots slotsSource instanceMethods classMethods klassName costructor scc cc initExpressions |
			klassName:: hdr first token asSymbol.
			yield:: SourceReference wrap: {classKwd. hdr. instanceSide. classSide} input: input.
			costructor:: (hdr at: 4) ifNotNil: [:it | (SourceReference wrap: it input: input) contents].
			scc:: (hdr at: 6) ifNotNil: [:it | (SourceReference wrap: it input: input) contents].
			cc:: hdr at: 8.
			slots:: (hdr at: 9) ifNotNil: [:it | it children children size = 5 ifTrue: [it children children at: 3] ifFalse: [it children children at: 2]].
			slotsSource:: (hdr at: 9) ifNil: [nil] ifNotNil: [:it | it contents].
			initExpressions:: (SourceReference wrap: (hdr at: 8) input: input) ifNotNil: [:it | it contents].
			classes:: instanceSide children first.
			instanceMethods:: instanceSide children at: 2.
			classMethods:: classSide
				ifNotNil: [:it | it children].
			ClassSourceMirror new
				name: klassName;
				constructor: costructor;
				superclassClause: scc;
				slots: slots;
				initExpressions: initExpressions;
				slotsSource: slotsSource;
				classes: classes;
				instanceMethods: instanceMethods;
				classMethods: classMethods;
				classComment: cc;
				yourself]
)
classSideDecl = (
	
	(* classSideDecl:: colon, [lparen], [category star], [rparen] *)
	^super classSideDecl
		wrapper:
			[ :cln <Token> :lp <Token> :categories :rp <Token> | | methods |
			methods:: flatten: categories.
			SourceReference wrap: {lp. (* categories. *) rp} input: input children: methods asArray ]
)
public compilationUnit = (
	(* compilationUnit::  languageId, [namespaceDecl | [toplevelClass] | [namespaceExpr] ], [eoi] *)
	^super compilationUnit
		wrapper:
			[ :langId :toplevel :eoi |
				toplevel]
)
instanceInitializer  = (
	^super instanceInitializer
		wrapper:[:lp <Token>  :cc :slots :inits :rp <Token> |
			| rawTree  = {lp. cc. slots. inits. rp}. |
			SourceReference wrap: rawTree input: input children: {#instanceInitializer. rawTree}
			]	
)
keywordMsgPattern = (

	^ super keywordMsgPattern wrap: [:kws | | selector |
		selector:: kws inject: '' into: [:acc :each | acc, each first token].
		SourceReference wrap: kws input: input children: selector]
)
public methodDecl = (
	(* methodDecl:: accessModifier opt, [messagePattern], [equalSign], [lparen], [codeBody], [rparen] *)

	^MemoizingParser onParser: (super methodDecl
		wrapper:
		[ :accessMod :msgPat :eq :lp :cb :rp | | yield accessSym msgPatYield |
			msgPatYield:: SourceReference wrap: msgPat input: input.
			accessSym:: accessMod = nil
				ifTrue: [ nil ]
				ifFalse: [ accessMod token ].
			MethodSourceMirror new
				methodSource: (SourceReference wrap: {accessMod. msgPat. eq. lp. cb. rp} input: input) contents;
				messagePattern: msgPatYield contents;
				selector: msgPat first children;
				accessModifier: accessSym;
				yourself])
)
seqSlotDecls = (

	^super seqSlotDecls wrap:
		[ :list |
			SourceReference wrap: list input: input children: list]
)
sideDecl = (
	
	(* sideDecl:: lparen, [nestedClassDecl star], [category star], [rparen] *)
	^super sideDecl
		wrapper:
			[ :lp <Token> :classes :categories :rp <Token> | | methods |
			methods:: flatten: categories.
			SourceReference wrap: {lp. classes. (* categories. *) rp} input: input children: {classes asArray. methods asArray} ]
)
simSlotDecls = (

	^super simSlotDecls wrap:
		[ :list |
			SourceReference wrap: list input: input children: list]
)
slotDecls = (

	(* slotDecls:: vbar, [slotDef star], [vbar] *)

	^super slotDecls wrap:
		[ :list |
			SourceReference wrap: list input: input children: list]
)
slotDef = (
	
	(*
	slotDecls:: vbar, [slotDef star], [vbar].
	slotDef::   accessModifier opt, [slotDecl], [ (((tokenFromSymbol: #=) | [tokenFromSymbol: #'::=']), [expression], [dot]) opt].
	slotDecl::  identifier , [type opt].
	*)

	^super slotDef wrapper:
		[ :accessMod :nameAndType :init | | accessSym immutable expr typeString initializer |
		accessSym:: accessMod = nil
			ifTrue: [ nil ]
			ifFalse: [ accessMod token ].
		init = nil 
			ifTrue: [ immutable:: false. expr:: nil ]
			ifFalse: [immutable:: (init at: 1) token = #=. expr:: (init at: 2) contents ].
		initializer:: expr ifNotNil: [:it | (SourceReference wrap: expr input: input) contents].
		typeString:: (nameAndType at: 2) = nil
			ifTrue: [ nil ]
			ifFalse: [ | yield |
				yield:: SourceReference wrap: ((nameAndType at: 2) contents at: 2) contents input: input.
				yield contents].
		SlotSourceMirror new
			name: nameAndType first token;
			accessModifier: accessSym;
			initializer: initializer;
			type: typeString;
			immutable: immutable;
			yourself]
)
toplevelClass = (
	(* toplevelClass:: classCategory, [classDeclaration] *)

	^super toplevelClass
		wrapper:
			[ :cat :klass |
				klass category: cat token.
				klass]
)
unaryMsgPattern = (

	^ super unaryMsgPattern wrap: [:sel  <Token> |
		SourceReference wrap: sel input: input children: sel token]
)
) : (
)
class SourceReference start: s end: e  input: i = (
(*A reference to a range in a source input stream. Given a raw parse tree and the inout stream from which it was derived, this class has factory methods that will capture the source coordinates of the tree from its extreme left and right leaves. One variant, #wrap:input:children will also hold annotations (in which case, the subclass, AnnotatedSourceReference, is used).

This class is used in situations where a proper AST is not created but one wants to capture some structure.

Adapted from the old Yield class, which is why the Cadence copyright applies.
Copyright 2008 Cadence Design Systems, Inc.
   Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0*)|
	public start <Integer> = s.
	public end <Integer> = e.
	input <PositionableStream> = i.
|) (
'as yet unclassified'
public contents ^ <String> = (
	input isStream ifTrue:
		[(* This convolution deals with UTF-8.  The problem is that stream
		   positions are byte positions, /not/ character positions. *)
		| cs c p |
		cs:: WriteStream on: (input originalContents species new: end - start + 1).
		p:: input position.
		[input position: start - 1.
		 [input position < end] whileTrue:
			[cs nextPut: input next]]
			ensure: [input position: p].
		^cs contents].
	^input copyFrom: start to: end
)
public printOn: aStream <Stream>  = (
	super printOn: aStream.
	aStream nextPutAll: ('({1})' format: { self contents })
)
) : (
'as yet unclassified'
public firstNode: node = (
	node isCollection
		ifTrue: [
			node do: [:each | (firstNode: each)
								ifNotNil: [:it | ^it]].
			^ nil]
		ifFalse: [^ node]
)
public lastNode: node = (
	node isCollection
		ifTrue: [
			node reverse do: [:each | (lastNode: each)
								ifNotNil: [:it | ^it]].
			^ nil]
		ifFalse: [^ node]
)
public wrap: node input: input = (
	| startNode endNode |
	startNode:: self firstNode: node.
	startNode isNil ifTrue: [^ nil].
	endNode:: self lastNode: node.
	^self 
		start: startNode start
		end: endNode end
		input: input
)
public wrap: node input: input children: children = (
	| startNode endNode |
	startNode:: self firstNode: node.
	startNode isNil ifTrue: [^ nil].
	endNode:: self lastNode: node.
	^AnnotatedSourceReference
		start: startNode start
		end: endNode end
		input: input
		children: children
)
)
'as yet unclassified'
clearCaches = (
	compilationUnitCache void.
	methodDeclCache void.
)
flatten: collection <Collection[Collection[T]]> ^ <List[T]> = (

	| result <List[T]> |
	result:: OrderedCollection new.
	collection do: [:each <Collection[T]> | result addAll: each].
	^ result
)
public installMirrors: newMirrors <Collection[ClassSourceMirrors]> = (
	
	(* Batch Atomic Installation *)
	
	| builders |
	builders:: newMirrors collect: [:ea |
		| builder = ClassDeclarationBuilder fromUnitSource: ea source. |
		#BOGUS yourself. (* The mirror API should provide a non-cheat way to give both the source for a whole module and an existing module to mutate. *)
		Root
			at: builder simpleName 
			ifPresent: [:it | builder prvtExistingMixin: it mixin].
		builder].

	(mirrors installAtomically: builders) do: [:mirror |
		(Root includesKey: mirror simpleName) ifFalse: [
			| klass = mirror reflectee apply: Object withName: mirror simpleName. |
			Root at: klass name put: klass.
		].
	].
)
public mirrorForClass: aClass <Class> ^<ClassSourceMirror> = (

	| stream |
	stream:: (String streamContents: [:s | aClass mixin definingClass printTopClassOn: s]) readStream.
	^ mirrorForStream: stream.
)
public mirrorForStream: stream <ReadStream> ^<ClassSourceMirror> = (

	^ compilationUnitCache mirrorForStream: stream
)
) : (
)
