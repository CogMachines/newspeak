Newspeak3'HopscotchIDE'class NsSvnLogSubjects usingPlatform: platform <Platform> = NewspeakObject ("   Copyright 2008 Cadence Design Systems, Inc.      Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0"|	Subject = platform hopscotch core Subject.	Presenter = platform hopscotch core Presenter.	Transcript = platform blackMarket Transcript.|)(class SvnLogPathSubject onModel: path <SvnLogPath> = Subject onModel: path (||)('as yet unclassified'createPresenter = (	^SvnLogPathPresenter onSubject: self)title = (	^model action asString, ' ', model path asString))class SvnLogEntriesSubject onModel: ents <SequenceableCollection[SvnLogEntry]> = Subject onModel: ents (|	entries = model collect: [ :entry | SvnLogEntrySubject onModel: entry].|)('as yet unclassified'createPresenter = (	^SvnLogEntriesPresenter onSubject: self)title = (	^'Subversion Log Entries'))class SvnLogEntrySubject onModel: entry <SvnLogEntry> = Subject onModel: entry (|	paths = model paths collect: [ :p | SvnLogPathSubject onModel: p].|)('as yet unclassified'author = (	^model author asString)createPresenter = (	^SvnLogEntryPresenter onSubject: self)date = (	^model date)message = (	^model message asString)revision = (	^model revision asString)title = (	^model author asString, ' r', model revision asString))class SvnLogEntriesPresenter onSubject: theSubject <SvnLogEntriesSubject> = Presenter onSubject: theSubject (||)('as yet unclassified'definition = (	^list: [subject entries collect: [ :entry | entry presenter]]))class SvnLogPathPresenter onSubject: theSubject <SvnLogPathSubject> = Presenter onSubject: theSubject (||)('as yet unclassified'definition = (	^label: subject title))class SvnLogEntryPresenter onSubject: theSubject <SvnLogEntrySubject> = Presenter onSubject: theSubject (||)('as yet unclassified'collapsedDefinition = (	^textDisplay: subject author, '(', subject revision ,'): ', subject message)definition = (	^collapsed: [collapsedDefinition] expanded: [expandedDefinition])expandedDefinition = (	^column: {		collapsedDefinition.		list: [subject paths collect: [ :p | p presenter]]	})))