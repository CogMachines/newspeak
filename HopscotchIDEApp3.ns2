Newspeak3'HopscotchIDE'class HopscotchIDEApp3 packageUsing: n <Namespace> = NewspeakObject ("Application object for the IDE.  A Newspeak application is an object that responds to the message main:args:.  The Newspeak runtime invokes main:args: with a platform object (see NsPlatform) and a collection of any runtime arguments.  An application typically responds to main:args: by instantiating and wiring together modules definitions it has stored in its slots or (in the future) modules definitions it retrives from the network via the platform object.  By convention, if a top-level class implements packageUsing:, the IDE will provide links to automatically send packageUsing: with the IDE namespace and serialize the returned object to a NOF file or package it into a Windows EXE (and someday options for Mac, Linux and the web)."	|	Tools = n HopscotchIDE IDETools.	Browsing = n HopscotchIDE Browsing.	SmalltalkBrowsing = n HopscotchIDE SmalltalkBrowsing.	Newspeak3Browsing = n HopscotchIDE Newspeak3Browsing.	MiscBrowsing = n HopscotchIDE MiscBrowsing.	Inspecting = n HopscotchIDE Inspecting.	Debugging = n HopscotchIDE Debugging.	ProcessFinalizer = n HopscotchIDE ProcessFinalizer.	WorkspaceManager = n HopscotchIDE WorkspaceManager.	NewspeakMissionary = n HopscotchIDE NewspeakMissionary.	SourceControlBrowser = n HopscotchIDE SourceControlBrowser.	NsSvnLogSubjects = n HopscotchIDE NsSvnLogSubjects.	SqueakMethodVersioning = n HopscotchIDE SqueakMethodVersioning.	LanguageUiDescriptionRegistry = n HopscotchIDE LanguageUiDescriptionRegistry.	MetadataBrowsing = n HopscotchIDE MetadataBrowsing.	Minitest = n Minitest Minitest.	MinitestUI = n Minitest MinitestUI.		vcsLib = [n VCSLib packageUsing: n] ifError: ["VCS not in image, use nil"].	|)(class HopscotchIDE using: p <Platform> = ("I am to the IDE as Platform is to the runtime.  I wire together and store the IDE modules.Would love to use siml. slots here, but IDE is not being cooperative."|	tools = Delay computation: [Tools usingPlatform: p ide: self].	browsing = Delay computation: [Browsing usingPlatform: p ide: self].	browsingST = Delay computation: [SmalltalkBrowsing usingPlatform: p ide: self].	browsingNS3 = Delay computation: [Newspeak3Browsing usingPlatform: p ide: self].	browsingMisc = Delay computation: [MiscBrowsing usingPlatform: p ide: self].	inspection = Delay computation: [Inspecting usingPlatform: p ide: self].	finalizer = Delay computation: [ProcessFinalizer usingPlatform: p ide: self debuggingClass: Debugging].	debugging = Delay computation: [Debugging usingPlatform: p ide: self].	theWorkspaceManager = Delay computation: [WorkspaceManager usingPlatform: p ide: self].	"missionary = Delay computation: [NewspeakMissionary usingPlatform: p ide: self]."	logSubjects = Delay computation: [NsSvnLogSubjects usingPlatform: p].	theSourceManager = Delay computation: [SourceControlBrowser usingPlatform: p ide: self].	methodVersioning = Delay computation: [SqueakMethodVersioning usingPlatform: p ide: self].	minitest = Delay computation: [Minitest usingPlatform: p].	minitestUI = Delay computation: [MinitestUI usingPlatform: p minitest: minitest ide: self].	languageUiDescriptionRegistry = Delay computation: [LanguageUiDescriptionRegistry usingPlatform: p ide: self].		vcs = Delay computation: [[vcsLib usingPlatform: p ide: self]ifError:["nil if unavailable"]].			defaultPopularityRecord = Delay computation: [tools PopularityRecord new].|)('as yet unclassified'IDEWindow = (	^tools IDEWindow))'as yet unclassified'main: p <Platform> args: v <Tuple[String]> = (	| ide = HopscotchIDE using: p. |	ide tools IDEWindow open.	^ide))