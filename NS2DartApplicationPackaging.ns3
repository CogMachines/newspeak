Newspeak3
'NS2Dart'
class NS2DartApplicationPackaging packageUsing: ns = (
(* An app for the Newspeak-to-Dart compiler.

Derived from Newspeak2JavascriptApplicationPackaging.

Copyright 2012 SAP AG.
Copyright 2012 Google Inc.

Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0 *)|
	CP = ns NS2CombinatorialParsing CombinatorialParsing.
	BCP = ns NS2CombinatorialParsing BlocklessCombinatorialParsing.
	BlocklessCombinatorialParsing = BCP mixin |> CP.
	Grammar = ns NewspeakGrammar.
	ASTs = ns NewspeakASTs.
	Parsing = ns NewspeakParsing.
	Generation = ns DartGeneration.
	Mirrors = ns CompilerMirrorsForDart.
	Compilation = ns Newspeak2DartCompilation.
	
	Runtime = ns RuntimeForDart.
|)
(
class ApplicationPackager usingPlatform: p = (|
	private parserLib = BlocklessCombinatorialParsing usingLib: p.
	private grammar = Grammar parserLib: parserLib.
	private asts = ASTs usingLib: p.
	private parsing = Parsing usingLib: p ast: asts grammar: grammar.
	private generation = Generation usingPlatform: p.
	private mirrors = Mirrors usingPlatform: p.
	private compilation = Compilation
		usingPlatform: p
		parsing: parsing
		generation: generation
		mirrors: mirrors. 
	
	private OrderedCollection = p collections OrderedCollection.
	|)
(
class FlatBlackMarket usingSmalltalk: st = (|
	Smalltalk = st.
|)
('as yet unclassified'
doesNotUnderstand: msg = (
	^Smalltalk at: msg selector ifAbsent: [super doesNotUnderstand: msg]
)) : ()
class ImportsRecorder usingNamespace: ns = (|
	namespace = ns.
	imports = OrderedCollection new.
|)
('as yet unclassified'
doesNotUnderstand: message = (
	imports add: message selector.
	^message sendTo: namespace
)) : ()'accessing'
public compileAppDefn: appDefn usingNamespace: ns to: output = (
	compileAppDefn: appDefn withRuntimeDefn: Runtime usingNamespace: ns to: output
)
public compileAppDefn: appDefn withRuntimeDefn: runtimeDefn usingNamespace: ns to: output = (
	compileAppSources: (extractSourcesFromAppDefn: appDefn usingNamespace: ns)
	withRuntimeSource: (extractSourcesFromAppDefn: runtimeDefn usingNamespace: ns)
	to: output
)
public compileAppSources: appSources withRuntimeSource: runtimeSource to: output = (
	compilation Infrastructure 
		withAppSources: (appSources)
		withRuntimeSources: (runtimeSource)
		outputTo: output
)
public compileSource: appDefnSource usingNamespace: ns to: output = (
	compileAppSources: {appDefnSource}
	withRuntimeSource: (extractSourcesFromAppDefn: Runtime usingNamespace: ns)
	to: output
)'private'
private extractSourcesFromAppDefn: appDefn usingNamespace: ns = (
	(* Ordered is important: the app definition must come first *)
	|
	modules = OrderedCollection new. 
	importsRecorder = ImportsRecorder usingNamespace: ns.
	|
	modules add: (sourceOf: appDefn).

	appDefn packageUsing: importsRecorder.
	importsRecorder imports do: [:import <Symbol> |
		modules include: (sourceOf: (ns perform: import))].

	^modules asArray
)
private sourceOf: klass = (
	| stream |
	stream:: (String new: 1000) writeStream.
	klass mixin printTopClassOn: stream.
	^stream contents.
)) : ()'as yet unclassified'
main: platform args: args = (
	^ApplicationPackager usingPlatform: platform
)) : ()