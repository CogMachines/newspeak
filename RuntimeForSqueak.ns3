Newspeak3
'NS2Squeak'
class RuntimeForSqueak packageUsing: manifest = (
(* Bundles the module definitions needed  to create the platform object. Eventually the platform should be constructed given only the vm mirror, but we still cheat by accessing Squeak's global namespace. 

Copyright (c) 2010-2012 Ryan Macnak.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ''Software''), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ''AS IS'', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*)|
	Actors = manifest Actors.
		ActorMirrors = manifest ActorMirrors.
		Dispatcher = manifest ProcessPoolDispatcherForSqueak.
		Pastime = manifest Pastime.
	Aliens = manifest AliensForSqueak.
		APIManager = manifest APIManager.
		CAPI = manifest CAPI.
		Win32API = manifest Win32API mixin apply: CAPI.
		(* LibcAPI *)
	Brazil = manifest Brazil.
		BrazilMappingForWin32 = manifest BrazilMappingForWin32.
		(* BrazilForCocoa *)
		(* BrazilForX11/Gtk+ *)
		UISessionManager = manifest UISessionManager.
	Collections = manifest Collections.
	Ducts = manifest Ducts.
	Files = manifest Files.
		WinFiles = manifest Win32Files.
		UnixFiles = manifest UnixFiles.
		MacFiles = manifest MacOSXFiles.
	Graphics = manifest GraphicsForSqueak.
	Hopscotch = manifest HopscotchFramework.
	Kernel = manifest KernelForSqueak.
	Mirrors = manifest MirrorsForSqueak.
		Intermediates = manifest IntermediatesForSqueak.
		AtomicInstaller = manifest AtomicInstaller.
		MirrorGroups = manifest MirrorGroups.
	(* Network *)
		(* WinNetwork *)
		(* UnixNetwork *)
		(* MaxNetwork *)
	(* NewspeakObjectFormat *)
	(* Numbers *)
	(* Synchronization *)
	Streams = manifest Streams.
	(* Text *)
	Time = manifest TimeForSqueak.
	
	CombinatorialParsing = manifest CombinatorialParsing.
	NewspeakGrammar = manifest NewspeakGrammar.
	NewspeakASTs = manifest NewspeakASTs.
	NewspeakParsing = manifest NewspeakParsing.
	Newspeak2SqueakCompilation = manifest Newspeak2SqueakCompilation mixinApply: manifest NewspeakCompilation.
	
	Newspeak3CompilerAdaptor = manifest Newspeak3CompilerAdaptor.
|)
(
class Platform usingVmMirror: vmm = (
(* Speculation for the long-term API of Platform.  Newspeak has no global namespace: an application instead accesses functionality such as GUI, the file system and the network via the platform argument passed to its main:args: method.  This improves modularity and provides the foundation for an object capability security model. *)||
	blackMarket = vmm blackMarket.  (* Access to Squeak's stateful global namespace.  Some glorious day we won't use this. *)

	namespace = outer RuntimeForSqueak.

	public actors = Actors usingPlatform: self withDispatcher: Dispatcher withPastime: Pastime withMirrors: ActorMirrors.
	public aliens = Aliens usingPlatform: self vmMirror: vmm.
	apiManager = APIManager usingPlatform: self.
	public brazil = Brazil usingPlatform: self.
	uiSessionManager = UISessionManager usingPlatform: self.
	public collections = Collections usingPlatform: self.
	public ducts = Ducts usingPlatform: self.
	public files = Files usingPlatform: self.
	private winfiles = WinFiles usingPlatform: self.
	private unixfiles = UnixFiles usingPlatform: self.
	private macfiles = MacFiles usingPlatform: self.
	public graphics = Graphics usingPlatform: self.
	public hopscotch = Hopscotch usingPlatform: self.
	public kernel = Kernel usingPlatform: self vmMirror: vmm.
	public mirrors = Mirrors usingPlatform: self vmMirror: vmm.
	public streams = Streams usingPlatform: self.
	public time = Time usingPlatform: self vmMirror: vmm.
	
	public squeak = Squeak new.
||self resetForNewImageSession)
(
class Squeak = (
(* The platform-specific namespace for Squeak. *)| Smalltalk = blackMarket Smalltalk yourself. |)
('as yet unclassified'
protected doesNotUnderstand: message = (
	^Smalltalk at: message selector ifAbsent: [super doesNotUnderstand: message]
)) : ()'as yet unclassified'
isValueObject ^<Boolean> = (
        (* Hack to let the platform be shared among actors. *)
        ^true
)
resetForNewImageSession = (
	aliens resetForNewImageSession.
	apiManager resetForNewImageSession.

	(* uiSessionManager resetForNewImageSession. *)
	
	blackMarket OSProcess OSProcess isWindows ifTrue:
		[winfiles resetForNewImageSession.
		files platformSpecificPathClass: winfiles Win32FilePath.
		files platformSpecificPatternClass: winfiles Win32FilePattern].
	blackMarket OSProcess OSProcess isUnix ifTrue:
		[unixfiles resetForNewImageSession.
		files platformSpecificPathClass: unixfiles UnixFilePath.
		files platformSpecificPatternClass: unixfiles UnixFilePattern].
	
	(* Mac needs to be after unix or unix will override it, since isUnix is true on Macs *)
	blackMarket OSProcess OSProcess isUnixMac ifTrue:
		[macfiles resetForNewImageSession.
		files platformSpecificPathClass: macfiles MacOSXFilePath.
		files platformSpecificPatternClass: macfiles MacOSXFilePattern].
	
	graphics resetForNewImageSession.
)) : ()'as yet unclassified'
using: vmm <VMMirror> ^<Platform>= (
	^Platform usingVmMirror: vmm
)) : ()