Newspeak3
'NS2Dart'
class NS2DartApplicationPackaging packageUsing: ns = (
(* An app for the Newspeak-to-Dart compiler.

Derived from Newspeak2JavascriptApplicationPackaging.

Copyright 2012 SAP AG.
Copyright 2012 Google Inc.

Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0 *)|
	CombinatorialParsing = ns CombinatorialParsing.
	Grammar = ns NewspeakGrammar.
	ASTs = ns NewspeakASTs.
	Parsing = ns NewspeakParsing.
	Generation = ns DartGeneration.
	Mirrors = ns CompilerMirrorsForDart.
	Compilation = ns Newspeak2DartCompilation mixinApply: ns NewspeakCompilation.
	
	Runtime = ns RuntimeForDart.
|) (
public class ApplicationPackager usingPlatform: p namespace: n = (|
	private parserLib = CombinatorialParsing usingPlatform: p.
	private grammar = Grammar parserLib: parserLib.
	private asts = ASTs usingLib: p.
	private parsing = Parsing usingPlatform: p grammar: grammar asts: asts.
	private generation = Generation usingPlatform: p.
	private mirrors = Mirrors usingPlatform: p.
	private compilation = Compilation
		usingPlatform: p
		parsing: parsing
		generation: generation
		mirrors: mirrors. 
	
	private List = p collections List.
	private FileDirectory = p squeak FileDirectory.
	private namespace = n.
	
	outDirectory
|) (
class ManifestForDart usingNamespace: ns = (|
	namespace = ns.
	imports = List new.
|) (
protected doesNotUnderstand: message = (
	imports add: message selector.
	^namespace
		at: message selector
		ifAbsent: [super doesNotUnderstand: message]
)
) : (
)
public compileAppDefn: appDefn usingNamespace: ns to: output = (
	compileAppDefn: appDefn withRuntimeDefn: Runtime usingNamespace: ns to: output
)
public compileAppDefn: appDefn withRuntimeDefn: runtimeDefn usingNamespace: ns to: output = (
	compileAppSources: (extractSourcesFromAppDefn: appDefn usingNamespace: ns)
	withRuntimeSource: (extractSourcesFromAppDefn: runtimeDefn usingNamespace: ns)
	to: output
)
public compileAppSources: appSources withRuntimeSource: runtimeSource to: output = (
	compilation Infrastructure 
		withAppSources: (appSources)
		withRuntimeSources: (runtimeSource)
		outputTo: output
)
public compileSource: appDefnSource usingNamespace: ns to: output = (
	compileAppSources: {appDefnSource}
	withRuntimeSource: (extractSourcesFromAppDefn: Runtime usingNamespace: ns)
	to: output
)
private extractSourcesFromAppDefn: appDefn usingNamespace: ns = (
	(* Ordered is important: the app definition must come first *)
	|
	modules = List new. 
	importsRecorder = ManifestForDart usingNamespace: ns.
	|
	modules add: (sourceOf: appDefn).

	appDefn packageUsing: importsRecorder.
	importsRecorder imports do: [:import <Symbol> |
		modules include: (sourceOf: (ns perform: import))].

	^modules asArray
)
public packageApplicationConfiguration: config <Class> usingNamespace: ns = (
	| name scriptStream |

	name:: config name.

	outDirectory:: FileDirectory default / 'out' / name.
	outDirectory assureExistence.
		
	scriptStream:: outDirectory forceNewFileNamed: name, '.dart'.
	[scriptStream nextPutAll: (String streamContents: [:bufferStream |
	self compileAppDefn: config usingNamespace: ns to: bufferStream])]
		ensure: [scriptStream close].
	
	(* We should automatically find the version of ns2dart_extension for the current platform and place it in the output directory as well. *)
	
	^(outDirectory fileNamed: (name, '.dart')) fullName
)
private sourceOf: klass = (
	| stream |
	stream:: (String new: 1000) writeStream.
	klass mixin printTopClassOn: stream.
	^stream contents.
)
) : (
)
public main: platform args: args = (
	^ApplicationPackager usingPlatform: platform
)
) : (
)
