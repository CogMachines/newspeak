Newspeak3
'NS2JS'
class RuntimeForJS packageUsing: ns = (
(* Provides the platform object for Newspeak on JavaScript.

Copyright 2012 SAP AG.
Copyright 2012 Google Inc.
   
Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0. *)|
	
	private CP = ns CombinatorialParsing.
	private BCP = ns BlocklessCombinatorialParsing.
	private BlocklessCombinatorialParsing = BCP mixin |> CP.
	private NewspeakGrammar = ns NewspeakGrammar.
	private NewspeakASTs = ns NewspeakASTs.
	private NewspeakParsing = ns NewspeakParsing.

	public AliensForJavascript = ns AliensForJavascript.
	public Collections = ns Collections.
	public FilesForNodeJS = ns FilesForNodeJS.
	public FilesForRhino = ns FilesForRhino.
	public JsExceptions = ns JsExceptions.
	public JsKernel = ns JsKernel.
	public NewspeakMirrorsForJavascript = ns NewspeakMirrorsForJavascript.
	public NSStreams = ns NSStreams.
	public Time = ns TimeForJS.
|)
(
class Platform = (|
	public aliens
	public exceptions
	public collections
	public kernel
	public mirrors
	public streams
	public files
	public time
|self initialize)
('as yet unclassified'
buildNewspeakParser= (

	| parserLib ns3Grammar astModule parsingModule |

	parserLib:: BlocklessCombinatorialParsing
		usingLib: self.

	ns3Grammar:: NewspeakGrammar parserLib: parserLib.

	astModule:: NewspeakASTs	usingLib: self.

	parsingModule:: NewspeakParsing
		usingLib: self
		ast: astModule
		grammar: ns3Grammar.

	^ parsingModule Parser new
)
initialize = (
	aliens:: Delay computation: [AliensForJavascript usingPlatform: self].
	exceptions:: Delay computation: [JsExceptions usingPlatform: self].
	collections:: Delay computation: [Collections usingPlatform: self].
	kernel:: Delay computation: [JsKernel new].
	mirrors:: Delay computation: [
		(* We must set mirrors explicitly here, as it is being referred to by buildNewspeakParser *)
		mirrors:: NewspeakMirrorsForJavascript usingPlatform: self.
		mirrors at: #Newspeak putParser: buildNewspeakParser.
		mirrors].
	streams:: Delay computation: [NSStreams usingPlatform: self].
	files:: Delay computation: [ (aliens javascriptEngineName) = 'NodeJS'
									ifTrue: [ FilesForNodeJS usingPlatform: self ]
									ifFalse: [ FilesForRhino usingPlatform: self (* default to Rhino *) ]].
	time:: Time usingPlatform: self.
)) : ()'as yet unclassified'
initialize = (
	#FLAG. (* replace with #using: *)
	^Platform new
)) : ()