Newspeak3
'HopscotchIDE'
class WorkspaceManager usingPlatform: platform ide: ide = (
"This module presents and holds workspaces. A visible workspace is backed by a unique instance of a unique subclass of Platform."|
	private ClassDeclarationBuilder = platform mirrors ClassDeclarationBuilder.
	private ClassDeclarationMirror = platform mirrors ClassDeclarationMirror.
	private Color = platform Graphics Color.
	private Dictionary = platform collections Dictionary.
	private OrderedCollection = platform collections OrderedCollection.
	private Smalltalk = platform blackMarket Smalltalk.

	private Gradient = platform brazil plumbing Gradient.

	private DefinitionListPresenter = ide tools DefinitionListPresenter.
	private ExceptionalResultPresenter = ide inspection ExceptionalResultPresenter.
	private ObjectSubject = ide inspection ObjectSubject.
	private ProgrammingPresenter = ide tools ProgrammingPresenter.

	private Presenter = platform hopscotch core Presenter.
	private Subject = platform hopscotch core Subject.
	private TextEditorFragment = platform hopscotch fragments TextEditorFragment. 
	
	private MethodGroupSubject = ide browsingNS3 MethodGroupSubject.
	private SlotGroupSubject = ide browsingNS3 SlotGroupSubject.

	"Ungood import"
	private Platform = platform BlackMarket "platform blackMarket NsMultilanguage Platform".
	protected vmMirror <SqueakVmMirror> = 
		platform blackMarket NewspeakCore ImplementationBase vmMirror.

	protected workspaces <OrderedCollection[Workspace]> = OrderedCollection new.
	protected workspaceCounter <Integer> ::= 0.
|)
(
class AllWorkspacesPresenter onSubject: s = DefinitionListPresenter onSubject: s (
"This is the top-level presenter displayed when following the Workspaces link from the home page. It displays a list of WorkspacePresenters on all existing workspaces, with a button to create a new workspace.")
('actions'
respondToAddWorkspace = (
	subject addWorkspace.
	refresh.
)'definition'
definition = (
	^column: {
		super definition.
		smallBlank.
		row: {
			button: 'Add New Workspace' action: [respondToAddWorkspace].
		}.
	}	
)'notifications'
presenterRequestsWorkspaceDeletion: workspace <Workspace> = (
	subject deleteWorkspace: workspace.
	refresh.
)'private'
contentPresenters ^ <Collection[Presenter]> = (
	^subject allWorkspaces collect:
		[:ws |
		(WorkspaceSubject onModel: ws) presenter]
)) : ()
class AllWorkspacesSubject onModel: dontCare = Subject onModel: dontCare (
"Subject for the list of all workspaces. It is responsible for creating and deleting workspace classes and instances.")
('accessing'
= anotherSubject ^<Boolean> = (
	"All workspace subjects are considered the same so that clicking the Workspaces link on the home page always takes us to the same page instead of multiplying them."
	^self class = anotherSubject class
)
addWorkspace = (
	| ws <Workspace> |
	ws:: (defineClass: newWorkspaceClassDefinition) new.
	workspaces add: ws. 	
)
allWorkspaces ^ <Collection[Workspace]> = (
	"Ensure there is always a workspace to work with."
	workspaces isEmpty ifTrue: [addWorkspace].
	^workspaces
)
deleteWorkspace: ws <Workspace>  = (
	workspaces remove: ws.
	ws class removeFromSystem
)
hash ^<Integer> = (
	^self class hash
)
title ^<String> = (
	^'Workspaces'
)'private'
defineClass: definitionString <String> ^<Class> = (
	| builder mixin klass |
	builder:: ClassDeclarationBuilder fromSource: definitionString.
	mixin:: builder install reflectee.
	klass:: mixin apply: Platform withName: builder simpleName.
	Smalltalk at: klass name put: klass.
	^klass	
)
newWorkspaceClassDefinition ^<String> = (
	"Produce definition source for a new workspace class. The class should include a slot named workspaceText."
	| wsNumber <String> |
	wsNumber:: currentWorkspaceNumberString.
	^'class Workspace_', wsNumber, ' = Platform (
"This is a workspace class automatically generated by the IDE. It has a single instance, workspace number ', wsNumber, '. You may add methods or slots at your convenience. DO NOT SUBCLASS OR MIXIN this class."
|
	workspaceText
|
) ()'
)'restricted'
createPresenter ^ <Presenter> = (
	^AllWorkspacesPresenter onSubject: self
)) : ('instance creation'
new = (
"An AllWorkspacesSubject always has its module as its model. This method is a dummy to satisfy the requirements of the Subject class protocol. Hence it doesn't care about the formal parameter  'dontCare'. "
	^onModel: nil
))
class WorkspacePresenter onSubject: s = ProgrammingPresenter onSubject: s (
"A presenter for an individual workspace. A cross between an inspector and a browser with access to both instance and class information."|
	editor <TextEditorFragment>
	results <ColumnComposer>
|)
('actions'
respondToBrowseClass = (
	browseClass: subject workspaceClass
)
respondToDelete = (
	sendUp presenterRequestsWorkspaceDeletion: subject model
)
respondToDiscardResults = (
	results children size timesRepeat: [results removeAt: 1]
)
respondToEvaluate = (
	| result <ObjectMirror> |
	editor removeMessages.
	result::	(ObjectSubject onModel: subject modelMirror)
		evaluate:
			editor maybeSelectCurrentLine
		ifCompilerError:
			[:message |
			^editor addMessage: message]
		ifError:
			[:thread :exception |
			^addExceptionalResultPresenterFor: exception in: thread].
	addResultPresenterOn: result.
)'definition'
definition = (
	^column: {
		majorHeadingBlock: definitionForHeader.
		row: {
			frameLine.
			elastic: (column: {
				minorHeadingBlock: 
					(row: {
						label: 'Evaluation Results'.
						filler.
						link: '[clear]' action: [respondToDiscardResults].
					}).
				results:: column: {}.
				sectionLabelled: 'Methods' presenting: subject methodsSubject.
			}).
			frameLine.
		}.
		frameLine.
		smallBlank.
	}
)
definitionForHeader = (
	^column: {
		row: {
			elastic: evaluationEditor.
			smallBlank.
			column: {
				button: 'Evaluate' action: [respondToEvaluate].
				filler.
				row: {
					filler.
					dropDownMenu: [workspaceMenu]
				}
			}
		}.
	}
)
evaluationEditor = (
	editor:: TextEditorFragment new.
	editor
		changeResponse: [subject saveText: editor editedText];
		acceptResponse: [respondToEvaluate];
		text: (subject savedText ifNil: [initialText]).
	^editor
)'parameters'
frameColor = (
	^Color h: 240 s: 0.15 v: 0.74
)
frameLine = (
	^((row: {}) color: frameColor) width: 1
)
initialText = (
	^'

'
)
majorHeadingColor = (
	^Gradient 
		from: (Color h: 240 s: 0.1 v: 0.8) 
		to: frameColor
)
workspaceMenu = (
	^menuWithLabelsAndActions: {
		'Go to Class' -> [respondToBrowseClass].
		#separator.
		'Delete this Workspace' -> [respondToDelete].
	}
)'private'
addExceptionalResultPresenterFor: exception <Exception> in: thread <NewspeakDebugging ThreadSubject> = (
	results addFirst: 
		(collapsed: [ExceptionalResultPresenter on: exception in: thread]
		expanded: [buildExceptionDetails: exception in: thread])
)
addResultPresenterOn: result <Object> = (
	results addFirst:
		(resultFragmentOn: (ObjectSubject onModel: result)).
)
buildExceptionDetails: exception <Exception> in: thread <NewspeakDebugging ThreadSubject> = (
	^column: {
		ExceptionalResultPresenter on: exception in: thread.
		(ObjectSubject onModel: (vmMirror reflectOn: exception)) presenter.
	}
)
resultFragmentOn: result <ObjectSubject> ^ <Fragment> = (
	^collapsed: [link: result title action: [enterSubject: result]]
		expanded: [result presenter]
)
sectionLabelled: title <String> presenting: groupSubject <MirrorGroupSubject> = (
	| groupPresenter |
	^column: {
		minorHeadingBlock: (
			row: {
				label: title.
				largeBlank.
				addButtonWithAction: [groupPresenter addNewItemTemplate].
				filler.
				expandButtonWithAction: [groupPresenter expandAll].
				blank: 3.
				collapseButtonWithAction: [groupPresenter collapseAll].
				}
			).
		row: {
			elastic: (groupPresenter:: groupSubject presenter).
			smallBlank.
		}.
	}
)) : ()
class WorkspaceSubject onModel: workspaceInstance = Subject onModel: workspaceInstance (
"The subject of a WorkspacePresenter. Mostly responsible for suppying various mirrors on the workspace instance itself and on its class."|
	
|)
('accessing'
= another = (
	^class = another class and: [model = another model]
)
hash = (
	^model hash
)
methodsSubject ^<MethodGroupSubject> = (
	"Return a subject presenting the methods of the workspace class."
	^MethodGroupSubject onModel: modelClassMirror instanceSide methods
)
modelClassMirror ^<ClassDeclarationMirror> = (
	"Return a mirror on the workspace class."
	^ClassDeclarationMirror reflecting: model class mixin
)
modelMirror ^<ObjectMirror> = (
	"Return a mirror on the workspace object."
	^vmMirror reflectOn: model
)
saveText: text <String> = (
	"Save the provided text in the workspace instance. We do that on every change in the presenter's text editor."
	model workspaceText: text
)
savedText ^<String> = (
	"Return the text saved in the workspace object."
	^model workspaceText
)
slotsSubject ^<SlotGroupSubject> = (
	"Return a mirror on the slots of the workspace class."
	^SlotGroupSubject onModel: modelClassMirror instanceSide slots
)
workspaceClass = (
	"Return the raw workspace class metaobject."
	^model class
)'restricted'
createPresenter = (
	^WorkspacePresenter onSubject: self
)) : ()'as yet unclassified'
currentWorkspaceNumberString ^ <String> = (
	workspaceCounter:: workspaceCounter + 1.
	^workspaceCounter printString
)) : ()