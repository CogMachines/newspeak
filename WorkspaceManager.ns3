Newspeak3
'HopscotchIDE'
class WorkspaceManager usingPlatform: p <Platform> ide: ide <HopscotchIDE> = (|
	private Presenter = p hopscotch core Presenter.
	private Subject = p hopscotch core Subject.
	private DefinitionListPresenter = ide tools DefinitionListPresenter.
	private Dictionary = p collections Dictionary.
	private ClassDeclarationBuilder  = p mirrors ClassDeclarationBuilder.
	private cachedPlatform = p.
	private cachedIde = ide.
	
	"ungood imports"
	private cachedBlackMarket = p blackMarket.
	private Smalltalk = p blackMarket Smalltalk.
	private SystemOrganization = p blackMarket SystemOrganization.
	
	"module state"
	private workspaces <Dictionary[Symbol, Workspace]> = Dictionary new.
	private workspaceCounter <Integer> ::= 0.
|)
(
class AllWorkspacesPresenter onSubject: s = DefinitionListPresenter onSubject: s (
"A presenter for workspace management. It allows users to view all workspaces in the running image,  to add new ones and to remove undesired ones.")
('as yet unclassified'
contentPresenters ^ <Collection[Presenter]> = (
	^subject allWorkspaces collect:[:ws | workspaceRowFor: ws]
)
definition = (
^
	column: {
		minorHeadingBlock: (
			row: {
				label: 'Workspaces' asText allBold.
				largeBlank.		
				addButtonWithAction: [respondToAddWorkspace].
				filler.
				expandButtonWithAction: [expandAll].
				blank: 3.
				collapseButtonWithAction: [collapseAll].
				}
			).
		mediumBlank.
		super definition.
		mediumBlank.
		}	
)
respondToAddWorkspace = (
	subject addWorkspace.
	refresh.
)
respondToDeleteWorkspace: ws <Workspace> = (
	subject deleteWorkspace: ws.
	refresh.
)
workspaceMenuFor: ws <Workspace>  = (
	^menuWithLabelsAndActions: {
		('Delete workspace ', ws class name) -> [respondToDeleteWorkspace: ws]
		}
)
workspaceRowFor: ws <Workspace> = (
	^row: {
		link: ws class name
			action: [inspect: ws]
			dragSubject: [objectSubjectFor: ws]
			withImage: nil.
		filler.
		dropDownMenu: [workspaceMenuFor: ws].
	}
)) : ()
class AllWorkspacesSubject onModel: dontCare = Subject onModel: dontCare (
"Subject for the list of all workspaces.")
('as yet unclassified'
addWorkspace = (
| ws <Workspace> |
	ws::  (newClassDefinition: newWorkspaceClassDefinition) new.
	workspaces at: ws class name put: ws. 	
)
allWorkspaces ^ <Collection[Workspace]> = (
	^workspaces values
)
createPresenter ^ <AllWorkspacesPresenter> = (
	^AllWorkspacesPresenter onSubject: self
)
deleteWorkspace: ws <Workspace>  = (
	workspaces removeKey: ws class name.
	Smalltalk removeKey: ws class name ifAbsent: [].
	SystemOrganization removeMissingClasses.	
)
newClassDefinition: definitionString <String> ^ <Class> = (
	| builder mixin klass |
	builder:: ClassDeclarationBuilder fromSource: definitionString.
	mixin:: builder install reflectee.
	klass:: mixin apply: Workspace withName: builder simpleName.
	Smalltalk at: klass name put: klass.
	^klass	
)
newWorkspaceClassDefinition ^ <String> = (
| wsNumber <String> |
	wsNumber:: currentWorkspaceNumberString.
	^'class Workspace_', wsNumber, ' = Platform (
"This is a workspace class automatically generated by the IDE. It has a single instance, workspace number ', wsNumber, '. You may add methods or slots at your convenience. DO NOT SUBCLASS OR MIXIN this class."
|
|
) ()'
)
title ^ <String> = (
	^'Workspace Manager'
)) : ('as yet unclassified'
new = (
"An AllWorkspacesSubject always has its module as its model. This method is a dummy to satisfy the requirements of the Subject class protocol. Hence it doesn't care about the formal parameter  'dontCare'. "
	^onModel: nil
))
class Workspace = ("The superclass of workspaces."|
|)
('as yet unclassified'
public aliens = (^platform aliens)
public blackMarket = (
	^cachedBlackMarket
)
public brazil = (^platform brazil)
public collections = (^platform collections)
protected doesNotUnderstand: message = (
	^message sendTo: blackMarket
)
public exceptions = (^platform exceptions)
public files = (^platform files)
public graphics = (^platform graphics)
public hopscotch = (^platform hopscotch)
public ide = (
	^cachedIde
)
public kernel = (^platform kernel)
public mirrors = (^platform mirrors)
public past = (^platform past)
public platform = (
	^cachedPlatform
)
public streams = (^platform streams)
public time = (^platform time)) : ()'as yet unclassified'
currentWorkspaceNumberString ^ <String> = (
	workspaceCounter:: workspaceCounter + 1.
	^workspaceCounter printString
)) : ()