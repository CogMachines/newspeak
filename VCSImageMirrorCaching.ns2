Newspeak3
'StructuredVCS'
class VCSImageMirrorCaching usingPlatform: platform = NewspeakObject (
"Keeps track of mirrors corresponding to classes in image and removes them from the cache when corresponding classes change in the image.

Any changes that are loaded by the new version control cause the top-level classes that are affected by the change to be reloaded. As long as we're still using the old compiler, loading a top-level class happens incrementally. As a result, classes that are being loaded may be inconsistent. Reloading the class that removes mirrors for classes that are changed then causes problems.

By keeping this code in a separate top-level class we reduce the number of times it has to be changed."|

private Dictionary = platform Collections Dictionary.
private SystemChangeNotifier = platform System SystemChangeNotifier.
private SystemMetadata = platform SystemMetadata.
|)
(
class ImageMirrorCache = (|
	classNameToMirrorCache = Dictionary new.
	stringToMirrorCache = Dictionary new.
|)
('as yet unclassified'
at: key ifAbsentPut: block = (

	^ classNameToMirrorCache at: key ifAbsentPut: block
)
resetMirrorOfClass: aClass  = (

	| mirror name |
	nil = aClass ifTrue: [^ self].

	name:: (SystemMetadata definingClassMetadataOf: aClass) definingModule name asSymbol.
	classNameToMirrorCache removeKey: name ifAbsent: []
)
start = (

	SystemChangeNotifier uniqueInstance
		notify: self
		ofAllSystemChangesUsing: #systemChangeEvent:
)
stop = (

	SystemChangeNotifier uniqueInstance noMoreNotificationsFor: self.
)
stringToMirrorCacheForProduction: production = (

	^ stringToMirrorCache
		at: production
		ifAbsentPut: [Dictionary new]
)
systemChangeEvent: event = (
	event itemKind = SystemChangeNotifier classKind ifTrue: [
		resetMirrorOfClass: event item].
	event itemKind = SystemChangeNotifier methodKind ifTrue: [
		resetMirrorOfClass: event item methodClass]
)))