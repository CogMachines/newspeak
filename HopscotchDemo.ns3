Newspeak3
'Samples'
class HopscotchDemo packageUsing: manifest = (| findImage = manifest hsFindImage. |)
(
class Demo usingPlatform: p = (|
	Subject = p hopscotch core Subject.
	Presenter = p hopscotch core Presenter.
	Color = p graphics Color.
	Point = p graphics Point.
	Time = p time Time.
	ClassMirror = p mirrors ClassMirror.
	TextEditorFragment = p hopscotch fragments TextEditorFragment.
|)
(
class DemoPresenter onSubject: s = Presenter onSubject: s ()
('as yet unclassified'
class: C = (
	| mirror = ClassMirror reflecting: C. |
	^column: {
		label: mirror name.
		collapsed: [label: 'slots']
			expanded: [column: {label: 'slots'. column: (mirror slots collect: [:ea | label: ea name])}].
		collapsed: [label: 'methods']
			expanded: [column: {label: 'methods'. column: (mirror methods collect: [:ea | label: ea name])}].
		collapsed: [label: 'classes']
			expanded: [column: {label: 'classes'. column: (mirror nestedClasses collect: [:ea | label: ea name])}].
	}
)
definition = (
	| count ::= 0. countHolder slowHolder |
	^column: {
		label: 'Hello, DOM New World!'.
		row: {
			(label: 'Allow this really long label to get cut off by the other one') compressibility: 1.
			filler compressibility: 0.
			label: 'Dont cut me off'.
		}.
		row: {
			filler.
			label: 'Right-aligned'.
		}.
		row: {
			filler.
			label: 'Centered'.
			filler.
		}.
		row: {
			label: 'foo'.
			nothing.
			label: 'bar'.
		}.
		class: Presenter.
		TextEditorFragment new.
		link: 'Foo' action: [alert: 'Bar'].
		image: findImage.
		countHolder:: holder: [label: count printString].
		button: '+1' action: [count:: count + 1. countHolder refresh].
		nested.
		slowHolder:: holder: [column: {slow. slow. slow. slow. slow. slow}].
		link: 'Do it again!' action: [slowHolder refresh].
		row: {
			label: 'Cell'.
			button: 'Cell' action: [].
			button: 'Cell' action: [].
			button: 'Cell' action: [].
			button: 'Cell' action: [].
			button: 'Cell' action: [].
			button: 'Cell' action: [].
			button: 'Cell' action: [].
			image: findImage.
		}.
	}
)
fib: n = (
	^n < 2 ifTrue: [1] ifFalse: [(fib: n - 1) + (fib: n - 2)]
)
nested = (
	^collapsed: [label: 'Closed'] expanded: [column: {label: 'Open'. nested. nested}].
)
slow = (
	^initially:
		(label: 'Doing something slow...')
	deferred: [
		slowFib.
		row: {
			label: 'Done!'.
			image: findImage.}].
)
slowFib = (
	| tick ::= Time millisecondClockValue. |
	[ fib: 20.
	  Time millisecondClockValue - tick < 1000] whileTrue.
)) : ()
class DemoSubject new = Subject onModel: nil ()
('as yet unclassified'
createPresenter = (
	^DemoPresenter onSubject: self
)) : ()) : ()'as yet unclassified'
main: p args: a = (
	| demo = Demo usingPlatform: p. |
	p hopscotch core HopscotchWindow openSubject: demo DemoSubject new.
)) : ()