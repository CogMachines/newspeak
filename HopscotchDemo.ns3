Newspeak3
'Samples'
class HopscotchDemo packageUsing: manifest = (| findImage = manifest hsFindImage. |)
(
class Demo usingPlatform: p = (|
	Subject = p hopscotch core Subject.
	Presenter = p hopscotch core Presenter.
	Color = p graphics Color.
	Point = p graphics Point.
	Time = p time Time.
	TextEditorFragment = p hopscotch fragments TextEditorFragment.
|)
(
class DemoPresenter onSubject: s = Presenter onSubject: s ()
('as yet unclassified'
definition = (
	| slowHolder echo |
	^(column: {
		row: {
			filler.
			(label: 'Hello, DOM New World!') color: (Color r: 1 g: 0 b: 0).
			filler.
		}.
		row: {
			(label: 'Allow this really long label to get cut off by the other one') compressibility: 1.
			filler compressibility: 0.
			label: 'Dont cut me off'.
		}.
		echo:: textDisplay: ''.
		TextEditorFragment new changeResponse: [:editor | echo text: editor textBeingAccepted].
		row: {
			link: 'Alan Kay' action: [echo text: '"In computer terms, Smalltalk is a recursion on the notion of computer itself. Instead of dividing "computer stuff" into things each less strong than the whole--like data structures, procedures, and functions which are the usual paraphernalia of programming languages--each Smalltalk object is a recursion on the entire possibilities of the computer. Thus its semantics are a bit like having thousands and thousands of computers all hooked together by a very fast network." --Alan Kay, The Early History of Smalltalk'].
			mediumBlank.
			link: 'Puck' action: [echo text: 'Yet but three? Come one more
Two of both kinds make up four'].
			mediumBlank.
			(link: 'Clear' action: [echo text: '']) color: (Color r: 1 g: 0 b: 0).
			blank: 25.
			link: 'Alert' action: [alert: 'Bar'].
		}.
		slowHolder:: holder: [column: {slow. slow}].
		button: 'Do it again!' action: [slowHolder refresh].
	}) color: (Color r: 0.855 g: 0.855 b: 0.9)
)
fib: n = (
	^n < 2 ifTrue: [1] ifFalse: [(fib: n - 1) + (fib: n - 2)]
)
slow = (
	^initially:
		(label: 'Doing something slow...')
	deferred: [
		slowFib.
		row: {
			label: 'Done!'.
			mediumBlank.
			image: findImage.}].
)
slowFib = (
	| tick ::= Time millisecondClockValue. |
	[ fib: 20.
	  Time millisecondClockValue - tick < 1000] whileTrue.
)) : ()
class DemoSubject new = Subject onModel: nil ()
('as yet unclassified'
createPresenter = (
	^DemoPresenter onSubject: self
)) : ()) : ()'as yet unclassified'
main: p args: a = (
	| demo = Demo usingPlatform: p. |
	p hopscotch core HopscotchWindow openSubject: demo DemoSubject new.
)) : ()