Newspeak3
'HopscotchIDE'
class SmalltalkBrowsing usingPlatform: p ide: ide = (
(* Copyright 2008 Cadence Design Systems, Inc.
Copyright 2009-2011 Ryan Macnak and other contributors.
Copyright 2012 Cadence Design Systems, Inc.
   
Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0 *)||
	private Dictionary = p collections Dictionary.
	private OrderedCollection = p collections OrderedCollection.
	private Set = p collections Set.
	private Subject = p hopscotch core Subject.
	private TextDisplayFragment = p hopscotch fragments TextDisplayFragment.
	private TextEditorFragment = p hopscotch fragments TextEditorFragment.
	private OutlineItem = p hopscotch outline OutlineItem.

	private HopscotchImages = p blackMarket Hopscotch HopscotchImages.
	private PackageOrganizer = p blackMarket Smalltalk at: #PackageOrganizer.
	private Smalltalk = p blackMarket Smalltalk.
	private MethodReference = p blackMarket System MethodReference.
	private Color = p blackMarket Graphics Color.
	private Error = p blackMarket Exceptions Error.
	private SyntaxErrorNotification = p blackMarket SyntaxErrorNotification.
	private StandardToolSet = p blackMarket Tools StandardToolSet.
	private SmalltalkLanguage = p blackMarket SmalltalkLanguage.
	private blackMarket = p blackMarket.

	ide = ide.
	systemScope = ide systemScope.
	ProgrammingPresenter = ide tools ProgrammingPresenter.
	AssortedMethodsSubject = ide browsing AssortedMethodsSubject.
	AssortedMethodsPresenter = ide browsing AssortedMethodsPresenter.
	ClassMethodsPresenter = ide browsing ClassMethodsPresenter.
	ClassMethodsSubject = ide browsing ClassMethodsSubject.
	EditableClassNamePresenter = ide browsing EditableClassNamePresenter.
	ExpandableMethodPresenter = ide browsing ExpandableMethodPresenter.
	MethodSubject = ide browsing MethodSubject.
	SyntaxErrorNotificationHandler = ide browsing SyntaxErrorNotificationHandler.
	UnsortedMethodsPresenter = ide browsing UnsortedMethodsPresenter.
	DeletedClassSubject = ide browsingMisc DeletedClassSubject.
	ClassCommentPresenter = ide tools ClassCommentPresenter.
	ClassSubject = ide browsing ClassSubject.
||)
(
class ClassListPresenter onSubject: s = ProgrammingPresenter onSubject:s (
(* ClassListPresenter displays a list of classes such as subclasses or superclasses of a class provided by its subject, a ClassListSubject. Depending on the size of the list, it may choose to display only a part of the list with a control to expand the display. The list is updated every time the presenter is refreshed. *)| title contentHolder |)
('as yet unclassified'
contentForClasses: classes = (

	^flow: (classes collect: [:each | linkToBrowseClass: each])
)'definition'
definition = (
^
	row: {
		label: (title ifNil: ['Classes']).
		blank: 10.
		elastic:
			(holder: 
				[ifNoClasses:
					[label: '(none)']
				ifSomeClasses:
					[:classes |
					contentForClasses: classes]
				ifTooManyClasses:
					[:classes |
					less: (contentForClasses: (classes copyFrom: 1 to: 20))
						label: (classes size - 20) printString, ' more...'
					more: [contentForClasses: classes]
						label: 'hide' ] ])
	}
)'initialize-release'
ifNoClasses: noBlock ifSomeClasses: someBlock ifTooManyClasses: tooManyBlock = (

	| classes |
	classes:: subject retrieveClasses.
	^classes isEmpty
		ifTrue: 
			[noBlock value]
		ifFalse: 
			[classes size <= 20
				ifTrue: [someBlock value: classes]
				ifFalse: [tooManyBlock value: classes]]
)) : ()
class ClassListSubject onModel:m = Subject onModel:m (
(* ClassListSubject retrieves a list of classes we want displayed together using a ClassListPresenter, such as subclasses or superclasses of a class. *)| retrievalBlock |)
('accessing'
retrieveClasses = (

	^retrievalBlock value
)'private'
createPresenter = (

	^ClassListPresenter onSubject: self
)) : ()
class GlobalReferencesPresenter onSubject:s = AssortedMethodsPresenter onSubject:s (
(* The subject is a GlobalReferencesSubject, essentially a collection of methods referencing a global. This presenter displays it as a column of expandable methods. *)|  |)
('accessing'
methodsGroupedByPackage = (

	| packages org |
	packages:: Dictionary new.
	org:: PackageOrganizer default.
	subject retrieveMethodReferences asSet do: 
		[:reference  |  | pkgName |
		pkgName:: (org packageOfMethod: reference) packageName.
		(packages 
			at: pkgName 
			ifAbsent:[packages at: pkgName put: OrderedCollection new]
			) add: reference
			].
	^packages
)'as yet unclassified'
newExpandableMethodPresenter: aModel = (
	^(ExpandableMethodPresenter onSubject: (MethodSubject on: aModel)) 
		showClassName: true;
		showClassLink: true
)'definition'
definition = (
^
	column: {
		majorHeadingBlock: (
			row: {
				label: subject globalName asText allBold, ' references'.
				}
			).
		smallBlank.		
		super definition.
		smallBlank.
		}
)'private'
contentPresenters = (

	^Array streamContents: 
		[:stream | | groups |
		groups:: methodsGroupedByPackage.
		groups keys asArray sort do:
			[:packageName | | presenters |
			presenters:: (groups at: packageName) collect: [:each | newExpandableMethodPresenter: each].
			stream nextPut: 
				(minorHeadingBlock: 
					(row: {
						link: packageName asText allBold action: [browsePackage: packageName] fixTemps.
						filler.
						expandButtonWithAction: [respondToExpand: presenters] fixTemps.
						blank: 3.
						collapseButtonWithAction: [respondToCollapse: presenters] fixTemps.
					})).
			stream nextPut: mediumBlank.
			stream nextPutAll: presenters.
			stream nextPut: mediumBlank.]]
)) : ()
class GlobalReferencesSubject onModel:m = Subject onModel:m (
(* Represents a search for all references to a global. The subject is the global name (a Symbol). Provides a collection of method subjects as the result of the message #methodSubjects. *)| referenceList |)
('as yet unclassified'
createPresenter = (

	^GlobalReferencesPresenter onSubject: self
)
globalName = (

	^model
)
retrieveMethodReferences = (

	| association |
	association:: Smalltalk associationAt: globalName ifAbsent: [^Array new].
	^Array streamContents:
		[ :s |
		systemScope allSendersOf: globalName do:
			[ :cls <Class> :sel <Symbol> |
			s nextPut: (MethodReference class: cls selector: sel)]]
)
title = (

	^globalName, ' references'
)) : ()
class MethodInheritancePresenter onSubject:s = ProgrammingPresenter onSubject:s (
(*  *)| superImplementors focus subImplementors |)
('actions'
collapseAll = (

	superImplementors collapseAll.
	subImplementors collapseAll
)
expandAll = (

	superImplementors expandAll.
	subImplementors expandAll
)'as yet unclassified'
createVisual = (
| visual |
visual:: super createVisual.
focus expand.
expandAll.
^visual
)
definition = (

	focus:: (subject focusMethodSubject) presenter.
	focus 
		showClassName: true;
		showClassLink: true.
^
	column: {
		minorHeadingBlock: (
			row: {
				label: subject methodTitle asText allBold.
				label: ' inheritance'.
				filler.
				expandButtonWithAction: [expandAll].
				blank: 3.
				collapseButtonWithAction: [collapseAll]
				}
			).
		blank: 10.
		
		superclassImplementors::
			UnsortedMethodsPresenter onSubject: (subject superImplementorSubjects).
		mediumBlank.
		(column: {focus}) color: Color yellow.
		mediumBlank.
		subclassImplementors::
			UnsortedMethodsPresenter onSubject: (subject subImplementorSubjects).
		smallBlank
		}
)'private'
subclassImplementors: aMethodListPresenter = (
(* Slot setter, returning the argument for smooth definition. *)

subImplementors:: aMethodListPresenter.
^aMethodListPresenter
)
superclassImplementors: aMethodListPresenter = (
(* Slot setter, returning the argument for smooth definition. *)

superImplementors:: aMethodListPresenter.
^aMethodListPresenter
)) : ()
class MethodInheritanceSubject onModel:m = Subject onModel:m (
(*  *)|  |)
('as yet unclassified'
createPresenter = (

	^MethodInheritancePresenter onSubject: self
)
focusMethodSubject ^<MethodSubject> = (

	^MethodSubject on: model 
)
implementingClass = (

	^model actualClass
)
methodTitle = (

	^model actualClass name, '>>', model methodSymbol
)
selector = (

	^model methodSymbol
)
subImplementorSubjects = (

	| result |
	result:: OrderedCollection new.
	implementingClass allSubclassesDo:
		[:each |
		(each isMixinApplication not and: [each selectors includes: selector]) ifTrue:
			[result add: 
				(MethodSubject
					on: (MethodReference class: each selector: selector)
					)]].
	^result
)
superImplementorSubjects = (

	| result |
	result:: OrderedCollection new.
	implementingClass allSuperclassesDo:
		[:each |
		(each isMixinApplication not and: [each selectors includes: selector]) ifTrue:
			[result add: 
				(MethodSubject
					on: (MethodReference class: each selector: selector)
					)]].
	^result reverse
)
title = (

	^methodTitle, ' inheritance'
)) : ()
class STClassPresenter onSubject:s = ProgrammingPresenter onSubject:s (
(*  *)|
classNamePresenter
messagesContainer
inspectionHolder
descriptionOrSourceSwitcherHolder
descriptionOrSourceHolder
|)
('accessing'
icon = (

	^classLanguageIcon
)'actions'
classActionsMenu = (

	^menuWithLabelsAndActions: {
		'Open in Squeak Browser' -> 
			[StandardToolSet browse: subject model selector: nil].
		#separator
	},
	(* (ide languageUiDescriptionRegistry allDescriptions collect: [ :ea |
		ea becomeLanguageHint ->
			[ea becomeLanguageFor: subject model.
			refreshAfterLanguageChange] fixTemps]), *)
	{
		(* #separator. *)
		'Save to File' -> [respondToSave].
		'File-Out' -> [respondToFileOut].
		#separator.
		'Inspect' -> [respondToInspect].
	},
	(* (subject model language = SmalltalkLanguage new ifTrue: [{
		#separator.
		'Metadata' -> [respondToMetadata].
	}] ifFalse: [{}]), *) {
		#separator.
		'Delete' -> [respondToDelete]
		}, (subject isTestCase ifTrue:[{#separator.'Run Tests' -> [respondToRunTests] }] ifFalse:[{}])
		,
		{
		#separator.
		'Inspect Presenter' -> [respondToInspectPresenter].
		}
)
respondToDelete = (

	| deletedName |
	deletedName:: subject model name.
	subject model subclasses isEmpty ifFalse: [
		showMessage: deletedName printString, ' has subclasses.'.
		^self].
	Smalltalk garbageCollect.
	subject model instanceCount = 0 ifFalse: [
		showMessage: deletedName printString, ' has instances.'.
		^self].
	subject model removeFromSystem.
	parent
		replaceChild: self
		with: (DeletedClassSubject onModel: deletedName) presenter
)
respondToInspect = (
inspect: subject model
)
respondToMetadata = (

	enterSubject: subject metadata
)
respondToOpenTestBrowser = (
enterSubject::  unitTesting TestResultSubject onModel: subject model 
)
respondToRename = (

	classNamePresenter enterEditState
)
respondToRunTests = (
enterSubject:: unitTesting FutureTestResultSubject for: subject model.
)
respondToSave = (

	subject model printClass
)'as yet unclassified'
addMessage: aString = (
| messageLabel messageHolder |
messagesContainer add: (label: aString) smallFont
)
addOutlineItemsTo: parentItem = (
| selfItem |
selfItem:: (OutlineItem onModel: self)
	text: subject className;
	image: icon.
substance addOutlineItemsTo: selfItem.
parentItem addChild: selfItem
)
classDescriptionDefinition = (
	^column: {
		ClassCommentPresenter onSubject: subject.
		mediumBlank.
		(ClassListPresenter onSubject: subject superclassesSubject)
			title: 'Superclasses:'.
		(ClassListPresenter onSubject: subject subclassesSubject)	
			title: 'Subclasses:'.
		STClassSlotsPresenter onSubject: subject.
		STClassVariablePresenter onSubject: subject.
		}
)
classNameAndContainment = (
	^row: {
		draggableImage: classLanguageIcon forSubject: subject.
		smallBlank.	
		[classNamePresenter:: EditableClassNamePresenter onSubject: subject.
			classNamePresenter] value.
		smallBlank.
		linkImage: HopscotchImages default editImage
			action: [respondToRename].
		smallBlank.
		(label: 'in ') tinyFont.
		classCategoryLink.	
		(label: ', ') tinyFont.
		classPackageLink.
		largeBlank.
		maybeShowRunTestLink.
		filler.
		inspectionHolder.
		smallBlank.
		itemReferencesButtonWithAction: 
			[browseClassReferences: subject model].
		smallBlank.
		dropDownMenu: [classActionsMenu].
		}.
)
classSourceDefinition = (
	^column: {
		TextEditorFragment new
			text: subject classDefinition;
			acceptResponse: 
				[:editor | 	
				(acceptClassDefinitionIn: editor) 
					ifTrue: [editor defaultAcceptResponse]].
	}
)
parentClassSubject: action = (
^action value: subject
)
refreshAfterLanguageChange = (
| newPresenter |
newPresenter:: (subjectForClass: subject model) presenter.
parent
	replaceChild: self
	with: newPresenter
)
removeMessages = (
messagesContainer presenters: {}
)
respondToFileOut = (
	subject model fileOut
)
showMessage: aString = (

	removeMessages.
	addMessage: aString
)
switchToDescription = (
	descriptionOrSourceSwitcherHolder content: (switcherShowingSource: false).
	descriptionOrSourceHolder content: classDescriptionDefinition.
)
switchToSource = (	
	descriptionOrSourceSwitcherHolder content: (switcherShowingSource: true).
	descriptionOrSourceHolder content: classSourceDefinition
)
switcherShowingSource: showingSourceNow <Boolean> = (
	^showingSourceNow
		ifTrue:	
			[row: {
				(link: 'Description' action: [switchToDescription]) smallFont.
				mediumBlank.
				(label: 'Source' asText allBold) smallFont.
			}]
		ifFalse:	
			[row: {
				(label: 'Description' asText allBold) smallFont.
				mediumBlank.
				(link: 'Source' action: [switchToSource]) smallFont.
			}]
)'definition'
classCategoryLink = (

	^(subject classCategoryName
		ifNil: [label: '(uncategorized)']
		ifNotNil:
			[:cat | 
			link: cat action: [browseClassCategory: cat]])
				tinyFont
)
classDefinitionEditor = (
^
	column: {
		TextEditorFragment new
			text: subject classDefinition;
			acceptResponse: 
				[:editor | 
				(acceptClassDefinitionIn: editor) 
					ifTrue: [editor defaultAcceptResponse]].
		}
)
classPackageLink = (

	^(subject classPackageName
		ifNil: [label: '(no package)']
		ifNotNil:
			[:packageName | 
			link: packageName action: [browsePackage: packageName]])
				tinyFont
)
classSummaryDefinition = (
^
	column: {
		row: {
			draggableImage: classLanguageIcon forSubject: subject.
			smallBlank.
			[classNamePresenter:: EditableClassNamePresenter onSubject: subject.
				classNamePresenter] value.
			smallBlank.
			linkImage: HopscotchImages default editImage
				action: [respondToRename].
			smallBlank.
			(label: 'in ') tinyFont.
			classCategoryLink.
			(label: ', ') tinyFont.
			classPackageLink.	
			largeBlank.
			itemReferencesButtonWithAction: 
				[browseClassReferences: subject model].
			maybeShowRunTestLink.
			filler.
			inspectionHolder.
			smallBlank.
			dropDownMenu: [classActionsMenu].
			}.
		mediumBlank.
		ClassCommentPresenter onSubject: subject.
		mediumBlank.
		(ClassListPresenter onSubject: subject superclassesSubject) 
			title: 'Superclasses:'.
		(ClassListPresenter onSubject: subject subclassesSubject)
			title: 'Subclasses:'.
		STClassSlotsPresenter onSubject: subject.
		STClassVariablePresenter onSubject: subject.
		}
)
definition = (
	messagesContainer:: list: {}.
	inspectionHolder:: holder: [nothing].
^
	column: {
		(column: {messagesContainer}) color: (Color h: 40 s: 0.3 v: 1).
		majorHeadingBlock: headingDefinition.
		(ClassMethodsPresenter onSubject: subject instanceMethodsSubject)
			presenterClass: ExpandableMethodPresenter.
		(ClassMethodsPresenter onSubject: subject classMethodsSubject)
			presenterClass: ExpandableMethodPresenter.
		(* endDebugMarker *)
		}
)
headingDefinition = (
	^column: {
		smallBlank.
		classNameAndContainment.	
		blank: 15.
		descriptionOrSourceSwitcherHolder:: holder: (switcherShowingSource: false).
		(row: {}) width: 1; color: (Color gray: 0.8).
		mediumBlank.
		descriptionOrSourceHolder:: holder: classDescriptionDefinition
	}
(*	less: [classSummaryDefinition] label: 'show definition'	more: [classDefinitionEditor] label: 'show summary' *)
)
maybeShowRunTestLink = (

	^subject isTestCase 
		ifTrue:
			[row: {
				smallBlank.
				(link: 'tests' action: [respondToRunTests]) tinyFont
			}]
		ifFalse: [nothing]
)'private'
acceptClassDefinitionIn: editor <TextEditorFragment> ^<Boolean> = (
	(* Ugly stuff modeled after Browser>>defineClass:notifying:. *)

	| newDefinition tokens keyIndex newName newClass |
	newDefinition:: editor textBeingAccepted asString.
	tokens:: newDefinition findTokens: Character separators.
	keyIndex:: tokens findFirst: [:some | '*subclass*' match: some].
	keyIndex = 0 ifTrue: 
		[^false (* junk definition *)].
	newName:: (tokens at: keyIndex + 1) copyWithoutAll: '#()'.
	newName = subject className asString ifFalse: 
		[editor showMessage: 'Changing a class name like this is not supported yet'.
		^false (* for now, disallow creating a new class like this *)].
	[newClass:: subject model superclass subclassDefinerClass new
		evaluate: newDefinition
		in: nil
		to: nil]
		on: Error
		do: [:ex | editor showMessage: ex messageText. ^false].
	^newClass isBehavior
)
classLanguageIcon = (
^subject classUiDescription classIcon
)) : ()
class STClassSlotsPresenter onSubject:s = ProgrammingPresenter onSubject:s (
(* The subject is an STClassPresenter, or in fact anything that responds to the #slotNames message by returning a collection of slot names (Strings). Displays the slots as a list of names (for now static), with the caption saying ''Slots''. *)| contentFlow |)
('as yet unclassified'
linkToSlotNamed: slotName <String> ^<HyperlinkFragment> = (
^link: slotName action: [respondToBrowseSlotNamed: slotName]
)
respondToBrowseSlotNamed: slotName <String> ^<self> = (
| methods |
methods:: Array streamContents: [ :s |
subject accessesToSlotNamed: slotName do: [ :cls :selector |
	s nextPut: (MethodSubject on: (MethodReference class: cls selector: selector))]].
enterSubject: ((AssortedMethodsSubject onModel: methods) title: 'Accesses to ', slotName)
)'definition'
definition = (
^
	row: {
		label: 'Slots:'.
		blank: 10.
		elastic:
			(holder: (* contents will get rebuilt on every refresh *)
				[ | slotNames |
				slotNames:: subject slotNames.
				slotNames isEmpty
					ifTrue: [label: '(none)']
					ifFalse: [flow: (slotNames collect: [:each | linkToSlotNamed: each])]]).
	}
)) : ()
class STClassSubject onModel:m = ClassSubject onModel:m (
(* The model is the class object. (Used for Smalltalk and Newspeak1 classes). Represents the perspective of looking at the class and seeing all of its details. *)| instanceMethodsSubjectX classMethodsSubjectX |)
('accessing'
allSlotNames ^<Collection[String]> = (
	(* Answer the names of slots (instance variables) both defined by this class and inherited. *)

	^model allInstVarNames
)
classCategoryName ^<Symbol | nil> = (
	(* Answer the name of the category the class belongs to. *)

	^Smalltalk organization categoryOfElement: className
)
classCommentText = (

	^model organization classComment
)
classCommentText: aString = (

	model classComment: aString
)
className = (

	^model name
)
classPackageName ^<String | nil> = (
	(* Answer the name of the package the class belongs to. *)

	^(PackageOrganizer default packageOfClass: model ifNone: [^nil])
		packageName
)
classifySelector: aSelector under: categoryName = (

	model organization classify: aSelector under: categoryName
)
isOrASubclassOf: aClass = (

	^model includesBehavior: aClass
)
methodCategories = (

	^model organization categories
)
slotNames ^<Collection[String]> = (
	(* Answer the names of slots (instance variables) defined by this class (not inherited). *)

	^model instVarNames
)
title = (

	^model name
)'accessing-subjects'
classMethodsSubject = (

	classMethodsSubjectX ifNil:
		[classMethodsSubjectX::
			ClassMethodsSubject onModel: model class].
	^classMethodsSubjectX
)
instanceMethodsSubject = (

	instanceMethodsSubjectX ifNil:
		[instanceMethodsSubjectX::
			ClassMethodsSubject onModel: model].
	^instanceMethodsSubjectX
)
subclassesSubject = (

	^(ClassListSubject onModel:nil) retrievalBlock: 
		[(model subclasses reject: [:ea | ea isMixinApplication]) asSortedCollection:
			[:a :b | a name <= b name]]
)
superclassesSubject = (

	^(ClassListSubject onModel:nil) retrievalBlock: [model allSuperclasses]
)'as yet unclassified'
accessesToClassVariableNamed: slotName do: action = (
	systemScope 
		allSendersOf: (model classPool associationAt: slotName) 
		do: action
)
accessesToSlotNamed: slotName do: action = (
	systemScope
		allAccessesToInstanceVariableNamed: slotName 
		from: model
		do: action
)
addAbstractMethodsOf: aClass notIn: selectorSet to: resultCollection = (

	| implementedHere |
	implementedHere:: Set new.
	aClass selectorsAndMethodsDo:
		[:eachSelector :eachMethod |
		(selectorSet includes: eachSelector) ifFalse:
			[eachMethod isAbstract
				ifTrue: [resultCollection add: 
							(MethodReference class: aClass selector: eachSelector)]
				ifFalse: [implementedHere add: eachSelector]]].
	aClass superclass ifNotNil: 
		[:superclass |
		addAbstractMethodsOf: superclass
		notIn: (selectorSet union: implementedHere)
		to: resultCollection]
)
classDefinition = (

	^model definition
)
classVariableNames = (
^model classPool keys asArray sort
)
does: aClass haveAbstractMethodsNotIn: selectorSet = (

	| implementedHere |
	implementedHere:: Set new.
	aClass selectorsAndMethodsDo:
		[:eachSelector :eachMethod |
		(selectorSet includes: eachSelector) ifFalse:
			[eachMethod isAbstract
				ifTrue: [^true]
				ifFalse: [implementedHere add: eachSelector]]].
	^aClass superclass
		ifNil: [false]
		ifNotNil: [:superclass |
			does: superclass
			haveAbstractMethodsNotIn: (selectorSet copy addAll: implementedHere; yourself)]
)
isAbstract = (

	^does: model haveAbstractMethodsNotIn: Set new
)
isTestCase = (
	^false
)
methodCount = (

	^model selectors size + model class selectors size
)
retrieveUnimplementedAbstractMethods ^<Collection[MethodReference]> = (
	(* Answer a collection of MethodReferences to abstract methods of superclasses that the class would need to implement in order to be concrete. *)

	^model superclass
		ifNil: [Array new]
		ifNotNil:
			[:superclass | | result |
			result:: OrderedCollection new.
			addAbstractMethodsOf: superclass notIn: model selectors to: result.
			result]
)
totalSubclassCount = (

	^model allSubclasses size
)'presenting'
createPresenter = (

	^STClassPresenter onSubject: self
)) : ()
class STClassVariablePresenter onSubject:s = ProgrammingPresenter onSubject:s (
(*  *)|  |)
('as yet unclassified'
linkToSlotNamed: slotName <String> ^<HyperlinkFragment> = (
^link: slotName action: [respondToBrowseSlotNamed: slotName]
)
respondToBrowseSlotNamed: slotName <String> ^<self> = (
| methods |
methods:: Array streamContents: [ :s |
subject accessesToClassVariableNamed: slotName do: [ :cls :selector |
	s nextPut: (MethodSubject onModel: (MethodReference class: cls selector: selector))]].
enterSubject: ((AssortedMethodsSubject onModel: methods) title: 'Accesses to ', slotName)
)'definition'
definition = (
^
	row: {
		label: 'Class variables:'.
		blank: 10.
		elastic:
			(holder: (* contents will get rebuilt on every refresh *)
				[ | slotNames |
				slotNames:: subject classVariableNames.
				slotNames isEmpty
					ifTrue: [label: '(none)']
					ifFalse: [flow: (slotNames collect: [:each | linkToSlotNamed: each])]]).
	}
)) : ()
class STMethodSubject onModel: m <MethodReference> = MethodSubject onModel: m (
(* STMethodPresenter's Standard Presenter *)| methodCreationResponse |)
('accessing'
= anotherSubject = (

	^anotherSubject class == class and:
		[anotherSubject selector = selector and:
			[anotherSubject implementingClass == implementingClass]]
)
className = (

	^implementingClass name
)
compileNewSource: source <String> ifSuccess: successBlock ifNewMethod: newBlock1arg ifFailure: failureBlock = (
| newSelector handler |
handler:: SyntaxErrorNotificationHandler new
	failureBlock: [:v | ^failureBlock valueWithPossibleArgument: v];
	text: source asString.
[
	newSelector:: model actualClass
		compile: source
		classified: retrieveMethodCategory
		notifying: handler
] on: SyntaxErrorNotification, Error do: [:ex | ^failureBlock valueWithPossibleArgument: ex description].
newSelector isNil ifTrue: [^failureBlock valueWithPossibleArgument: 'Error'].
newSelector = model methodSymbol ifTrue: [^successBlock value].
newBlock1arg value: newSelector
)
hash = (

	^selector hash
)
implementingClass = (

	^model actualClass
)
messages = (

	^model compiledMethod messages
)
methodCategory = (

	^retrieveMethodCategory ifNil: ['<synthetic method>']
)
methodCategoryOrNil = (

	^retrieveMethodCategory
)
selector = (

	^model methodSymbol
)
source = (

	^model sourceString
)
title = (

	^model actualClass name,
		'>>',
		model methodSymbol
)
variableBindingKeys  ^ <List[Symbol]> = (

	|  result  <List[Symbol]> |
	result:: OrderedCollection new.
	model compiledMethod literalsDo:
		[:each |
		(each isVariableBinding and: [each key notNil]) ifTrue:
			[result add: each key]].
	^result
)'as yet unclassified'
allMethodCategories ^<Collection[Symbol]> = (
(* Answer a collection of all category names used in the implementor class, plus some common names. *)

| names |
names:: super allMethodCategories.
names addAll: implementingClass organization categories.
^names
)
changeCategoryTo: newName ifSuccess: successBlock ifFailure: failureBlock = (

	implementingClass organization
		classify: selector under: newName asSymbol.
	successBlock value
)
compiledMethod = (
	^model compiledMethod
)
isAnOverride = (

	^(implementingClass allSuperclasses select:
		[:some | some includesSelector: selector]) isEmpty not
)
isOverridden = (

	implementingClass allSubclassesDo:
		[:each | 
		(each includesSelector: selector) ifTrue: [^true]].
	^false
)
isSubclassResponsibility = (
	^methodReference isValid
	  and: [methodReference compiledMethod isSubclassResponsibility]
)
isValid = (

	^model isValid
)
methodReference = (

	^model
)'reflection'
retrieveMethodCategory = (

	^model actualClass ifNotNil: [ :cls | cls organization
		categoryOfElement: model methodSymbol]
)) : ()) : ()