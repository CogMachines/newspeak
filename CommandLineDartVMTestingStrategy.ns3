Newspeak3
'NS2Dart'
class CommandLineDartVMTestingStrategy platform: platform compilationModule: compilationModule platformModules: PKs dartPath: dartPath = (
"A compiler testing strategy that compiles classes to be tested to a Dart source file and then runs to Dart VM on the file.

Derived from InImageNSCompilerTestingStrategy

Copyright 2011 Vassili Bykov
Copyright 2012 Google Inc.
   
Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0"|
	FileStream = platform blackMarket FileStream.
	NewShell = platform blackMarket ExternalProcess NewShell.
	newShell = NewShell usingPlatform: platform.
	CommandError = newShell CommandError.
	dart = newShell perform: dartPath.

	private compilation = compilationModule.
	private platformModules = PKs.
|)
('accessing'
test: sampleClassSource <String> with: testClassSource <String> ifFailure: failureBlock <[String]> ifError: errorBlock <[String]> = (
	
	| 
	testSource = sourceOfModuleWithSample: sampleClassSource test: testClassSource.
	fn = 'test.dart' , sampleClassSource hash printString.
	stm = FileStream forceNewFileNamed: fn.
	result
	|
	
	[compilation compile: testSource andPlatformModules: platformModules to: stm]
		ensure: [ stm ifNotNil: [ stm close ] ].
	dart launcher refresh locateProgram.
	
	result:: dart value: fn.
	
	(result includesSubString: 'Success') ifTrue: [^self].
	(result includesSubString: 'Failure') ifTrue: [^failureBlock value: result].
	^errorBlock value: result
)'as yet unclassified'
assertionFailedClassSource ^<String> = (
	^'class AssertionFailed description: d = Error description: d () () : ( 
		''cat'' signal: message = ( ^(self description: message) signal ) )'
)
assertionMethodsSource ^<String> = (
	^'''assertions''
	assert: aBlock = (
		aBlock value ifFalse: [AssertionFailed signal: ''Assertion failed'']
	)
	assert: aBlock description: descriptionText = (
		aBlock value ifFalse: [AssertionFailed signal: ''Assertion failed: '', descriptionText]
	)
	assert: aBlock descriptionBlock: descriptionBlock = (
		aBlock value ifFalse: [AssertionFailed signal: descriptionBlock value]
	)
	assert: aBlock signals: errorClass = (
		assert: aBlock signals: errorClass description: ''Exception expected but not signaled''
	)
	assert: aBlock signals: errorClass description: descriptionText = (
		aBlock on: errorClass do: [:ex | ^self].
		AssertionFailed signal: descriptionText
	)'
)
runMethodSource ^<String> = (
	^'''running''
	run = (
	"["(SampleTest test: Sample) test. print: ''Success''"]
		on: Error do: [:ex |
			(ex class = AssertionFailed)
				ifTrue: [print: ''Failure: '', ex description]
				ifFalse: [print: ''Error: '', ex description]]"
	)'
)
sourceOfModuleWithSample: sampleClassSource <String> test: testerClassSource <String> ^<String> = (
	| source |
	source:: (String new: 400) writeStream.
	source
		nextPutAll: 'Newspeak3'; cr;
		nextPutAll: '''SomeCategory'''; cr;
		nextPutAll: 'class Test packageUsing: ns = ( |
	 		| ) ('; cr;
		nextPutAll: assertionFailedClassSource; cr;
		nextPutAll: sampleClassSource; cr;
		nextPutAll: testerClassSource; cr;
		nextPutAll: assertionMethodsSource; cr;
		nextPutAll: runMethodSource; cr;
		nextPutAll: 'main: p args: argv = (self run) '; cr;
		nextPutAll: '):( ''cat'' main = (self new run) )'.
	^source contents
)) : ()