Newspeak3
'HopscotchIDE'
class ProcessFinalizer usingPlatform: p <Platform> ide: ide_ debuggingClass: NewspeakDebugging_ = NewspeakObject (
"Central registry for all suspended processes. Ensures that any process forgotten by UI is terminated/unwound.

Copyright (c) 2009 Peter von der Ahe

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
''Software''), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ''AS IS'', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."|
	brazil = p brazil.
	ide = ide_.
	NewspeakDebugging = NewspeakDebugging_.

	NewspeakObject = self Object.
	
	"ungood imports"
	Assert = p blackMarket NewspeakCore Assert.
	ActivationMirrors = p blackMarket Mirrors ActivationMirrors.
	WeakRegistry = p blackMarket Collections WeakRegistry.
	Project = p blackMarket System Project.
	Process = p blackMarket Kernel Process.
	UnhandledError = p blackMarket Exceptions UnhandledError.
	Semaphore = p blackMarket Kernel Semaphore.

	platform = p.
	debuggerRegistry = WeakRegistry new.
|)
(
class Finalizer for: p <Process> = NewspeakObject (
"Terminates process when finalized."|
	process = p.
|)
('as yet unclassified'
finalize = (
	[process terminate] fork
))'accessing'
debug: thread <ThreadMirror> activation: activation <ActivationMirror> title: title = (
	| debugger |	
	debugger:: debuggerFor: thread activation: activation title: title.
	brazil theDesktop scheduleUIAction: [debugger open]
)
release: debugger = (
	debuggerRegistry remove: debugger ifAbsent: []
)'as yet unclassified'
debuggerFor: thread <ThreadMirror> activation: activation <ActivationMirror> title: title <String> = (
	| debugger <NewspeakDebuggingForApp> |
	Assert new true: [thread isActiveThread not].
	thread suspend.
	debugger:: NewspeakDebugging usingPlatform: platform ide: ide.
	debuggerRegistry add: debugger executor: (Finalizer for: thread).
	debugger
		thread: thread;
		activation: activation;
		windowTitle: title;
		registry: self.
	^debugger
)
do: action <[]> name: description ifError: onError <[Exception,Process]> = (
	| sem process ex failed result |
	sem:: Semaphore new.
	failed:: false.
	process::
		[[result:: action fixTemps value. sem signal] on: UnhandledError do:
			[:exception |
			ex: exception exception.
			failed:: true.
			sem signal.
			process suspend]] newProcess.
	process
		name: description;
		resume.
	sem wait.
	^failed
		ifTrue: [onError fixTemps value: ex value: process]
		ifFalse: [result]
)
subjectFor: exception <Exception> in: process <Process> = (
	| mirrors thread activation debugger |
	mirrors:: ActivationMirrors usingPlatform: platform blackMarket.
	thread:: mirrors onProcess: process.
	activation:: mirrors onContext: exception signalerContext.
	debugger:: debuggerFor: thread activation: activation title: exception description.
	^debugger ThreadSubject onModel: thread
)
terminateAll = (
	debuggerRegistry keys do:
			[:each |
			each releaseThread ifNotNil: [:thread | thread terminate]]
)'restricted'
debug: process context: context title: title = (
	"Bridge from Squeak Process/ContextPart to ThreadMirror and ActivationMirrors"
	| mirrors thread activation |
	"Create a new mirror module to avoid problems with schema changes and imports."
	mirrors:: ActivationMirrors usingPlatform: platform blackMarket.

	thread:: mirrors onProcess: process.
	activation:: mirrors onContext: context.

	"Avoid debugging the current process"
	thread isActiveThread
		ifTrue:
			[[debug: thread activation: activation title: title] forkAt: process priority.
			platform blackMarket Processor yield]
		ifFalse:
			[debug: thread activation: activation title: title]
))