Newspeak3
'NS2Dart'
class NS2DartCompilerApp packageUsing: ns = (
"An app for the Newspeak-to-Dart compiler.

Copyright 2012 Google Inc.

Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0"|
	CP = ns NS2CombinatorialParsing CombinatorialParsing.
	BCP = ns NS2CombinatorialParsing BlocklessCombinatorialParsing.
	BlocklessCombinatorialParsing = BCP mixin |> CP.
	Grammar = ns Newspeak3Grammar.
	ASTs = ns Newspeak3AST.
	Parsing = ns Newspeak3Parsing.
	Generation = ns DartGeneration.
	Mirrors = ns MirrorsForDart.
	Compilation = ns Newspeak2DartCompilation.
|)
('as yet unclassified'
main: p args: argv = (
	|
	parserLib = BlocklessCombinatorialParsing usingLib: p.
	grammar = Grammar parserLib: parserLib.
	asts = ASTs usingLib: p.
	parsing = Parsing usingLib: p ast: asts grammar: grammar.
	generation = Generation usingPlatform: p.
	mirrors = Mirrors usingPlatform: p.
	compilation = Compilation usingPlatform: p parsing: parsing generation: generation mirrors: mirrors.
	
	stm = p blackMarket FileStream forceNewFileNamed: 'test.dart'.
	|
	[stm nextPutAll: (compilation compile: testSource readStream) contents]
		ensure: [ stm ifNotNil: [ stm close ] ].
)
testSource ^<String> = (
	^'Newspeak3 ''Testing''
	class Point x: xcoord y: ycoord = (
		 | public x = xcoord. public y = ycoord. | 
	)(
		''cat''
		r = ( ^ ((x*x)+(y*y)) sqrt )
	):(
		''cat''
		main = (
			^{main1. main2. main3. main4}
		)
		main1 = ( 
			1 < 2 ifTrue: [6].
			^[(self x: 3 y: 4) r] value 
		)
		main2 = (
			| fact |
			fact: [:n | n = 0 ifTrue: [1] ifFalse: [n * (fact value: n - 1)] ].
			^fact value: 6
		)
		main3 = (
			^{1. 9. 8. 4}
		)
		main4 = (
			7 fail
		)
	)'
)) : ()