Newspeak3
'NS2Dart'
class NS2DartCompilerApp packageUsing: ns = (
"An app for the Newspeak-to-Dart compiler.

Copyright 2012 Google Inc.

Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0"|
	CP = ns NS2CombinatorialParsing CombinatorialParsing.
	BCP = ns NS2CombinatorialParsing BlocklessCombinatorialParsing.
	BlocklessCombinatorialParsing = BCP mixin |> CP.
	Grammar = ns Newspeak3Grammar.
	ASTs = ns Newspeak3AST.
	Parsing = ns Newspeak3Parsing.
	Generation = ns DartGeneration.
	Mirrors = ns MirrorsForDart.
	Compilation = ns Newspeak2DartCompilation.
|)
(
class Test = ()
() : ('as yet unclassified'
main = (
	main2.
	print: {true. true class}.
	print: nlr.
	print: nlr2.
	print:: recurseNlr: 0.
	^'Done'
)
main2 = (
	| fact |
	fact: [:n | n = 0 ifTrue: [1] ifFalse: [n * (fact value: n - 1)] ].
	print:: fact value: 6
)
main3 = (
	| a = Array new: 4. |
	print: a.
	print: (a at: 3).
	print: (a at: 3 put: 'Three').
	a at: 1 put: 'One'.
	a at: 2 put: 2.
	a at: 4 put: false.
	a do: [:ea | print: ea].
	a do: [:ea | print: ea] separatedBy: [print: '-sep-'].
	print: a size.
)
main4 = (
	| x |
	
	x:: 0.
	[x < 4] whileTrue: [print: 'a'. x: x + 1].

	x:: 0.
	[print: 'b'. x: x + 1. x < 4] whileTrue.

	7 timesRepeat: [print: 'c'].
	
	x:: 0.
	[x > 4] whileFalse: [print: 'd'. x: x + 1].

	x:: 0.
	[print: 'e'. x: x + 1. x > 4] whileFalse.
)
nlr = (
	[^'non-local'] value.
	^'local'
)
nlr2 = (
	{1. 9. 8. 4} do: [:ea | ea = 8 ifTrue: [^'non-local']].
	^'local'
)
recurseNlr: x = (
	x = 4 ifTrue: [^x].
	^{x. recurseNlr: x + 1.}
))'as yet unclassified'
main: p args: argv = (
	|
	parserLib = BlocklessCombinatorialParsing usingLib: p.
	grammar = Grammar parserLib: parserLib.
	asts = ASTs usingLib: p.
	parsing = Parsing usingLib: p ast: asts grammar: grammar.
	generation = Generation usingPlatform: p.
	mirrors = Mirrors usingPlatform: p.
	compilation = Compilation usingPlatform: p parsing: parsing generation: generation mirrors: mirrors.
	
	stm = p blackMarket FileStream forceNewFileNamed: 'test.dart'.
	newShell = p blackMarket ExternalProcess NewShell usingPlatform: p.
	CommandError = newShell CommandError.
	dart = newShell perform: '/home/rmacnak/dart'.
	process
	|
	[stm nextPutAll: (compilation compile: testSource readStream) contents]
		ensure: [ stm ifNotNil: [ stm close ] ].
	dart launcher refresh locateProgram.
	
	p blackMarket Transcript nextPutAll: (dart value: 'test.dart'); cr; cr; flush
)
testSource ^<String> = (
	| stm = (String new: 1000) writeStream. |
	Test mixin printTopClassOn: stm.
	^stm contents
)) : ()