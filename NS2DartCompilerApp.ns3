Newspeak3
'NS2Dart'
class NS2DartCompilerApp packageUsing: ns = (
"An app for the Newspeak-to-Dart compiler.

Copyright 2012 Google Inc.

Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0"|
	CP = ns NS2CombinatorialParsing CombinatorialParsing.
	BCP = ns NS2CombinatorialParsing BlocklessCombinatorialParsing.
	BlocklessCombinatorialParsing = BCP mixin |> CP.
	Grammar = ns Newspeak3Grammar.
	ASTs = ns Newspeak3AST.
	Parsing = ns Newspeak3Parsing.
	Generation = ns DartGeneration.
	Mirrors = ns MirrorsForDart.
	Compilation = ns Newspeak2DartCompilation.
	
	Kernel = ns KernelForDart.
	Runtime = ns RuntimeForDart.
|)
(
class Test packageUsing: ns = ()
(
class Inner = (| slotInInner |)
('as yet unclassified'
bar = (
	^foo
)) : ('as yet unclassified'
foo = (
	^'the wrong foo'
))'as yet unclassified'
foo = (
	^'the right foo'
)
main: p args: a = (
	print: 'Hello'.
	print: p.
	print: a.
)) : ('as yet unclassified'
main = (

	print: nlr.
	
	print: self new Inner new bar.
	
	10 timesRepeat: [print: Object new identityHash].
	
	print:: [0 foo. 'success'] ifError: [:ex | {'Caught a '. ex}].

	[^'Done'] ensure: [print: 'ensure happend'.].
)
nlr = (
	[^'non-local'] value.
	^'local'
))'as yet unclassified'
main: p args: argv = (
	|
	parserLib = BlocklessCombinatorialParsing usingLib: p.
	grammar = Grammar parserLib: parserLib.
	asts = ASTs usingLib: p.
	parsing = Parsing usingLib: p ast: asts grammar: grammar.
	generation = Generation usingPlatform: p.
	mirrors = Mirrors usingPlatform: p.
	compilation = Compilation usingPlatform: p parsing: parsing generation: generation mirrors: mirrors.
	
	stm = p blackMarket FileStream forceNewFileNamed: 'test.dart'.
	newShell = p blackMarket ExternalProcess NewShell usingPlatform: p.
	CommandError = newShell CommandError.
	dartPath = '/home/rmacnak/dart'.
	dart = newShell perform: dartPath.
	process
	|
	
	[compilation 
		compileUserModules: {Test} 
		andPlatformModules: {Kernel. Runtime}
		to: stm]
	ensure: 
		[ stm ifNotNil: [ stm close ] ].
	
	dart launcher refresh locateProgram.
	p blackMarket Transcript nextPutAll: (dart value: 'test.dart'); cr; cr; flush
)) : ()