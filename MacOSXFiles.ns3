Newspeak3'NSFiles-MacOSX'class MacOSXFiles usingPlatform: p = NewspeakObject ("This code was derived by converting the Strongtalk MacOSX file classes to Newspeak, which is why the Sun Microsystems copyright and BSD license below applies.Copyright (c) 1995-2006 Sun Microsystems, Inc. ALL RIGHTS RESERVED.Copyright 2009 Stephen ReesCopyright 2010 Ryan Macnak and other contributors.Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:* Redistributions of source code must retain the above copyright notice,  this  list of conditions and the following disclaimer.* Redistribution in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/o other materials provided with the distribution.Neither the name of Sun Microsystems or the names of contributors may be used to endorse or promote products derived from this software without specific prior written permission.>>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.>>"|	private UnixFilePath = p unixfiles UnixFilePath.	private UnixFilePattern = p unixfiles UnixFilePattern.	private UnixFileDescriptor = p unixfiles UnixFileDescriptor.	private MacOSXStatBuffer = p blackMarket NSFiles MacOSXStatBuffer.	private Alien = p aliens Alien.|)(class MacOSXFilePath = UnixFilePath (||)('as yet unclassified'O_CREAT = (	^16r200)O_TRUNC = (	^16r400)StatBuffer = (    ^MacOSXStatBuffer)fileDescriptorClass = (	^MacOSXFileDescriptor)stat: testBlock ifFail: failBlock = (    | statBuffer <StatBuffer>     	status <ExternalProxy>    	name <CString> |	    statBuffer:: StatBuffer newC.    name:: Alien newCString: self name.    [	((Alien lookup: 'fstat' inLibrary: libcName)		primFFICallResult: (Alien new: 4)		with: statBuffer version		with: name address		with: statBuffer address	) asSignedLong == -1 		ifTrue: [ failBlock value ]		ifFalse: [ ^testBlock value: statBuffer ]			] ensure: [ statBuffer free. name free])statName: name buffer: statBuffer = (    "^{{<libc ExternalProxy stat>       			name: name       			buffer: statBuffer}}")'private'libcName = (	^'/usr/lib/libc.dylib')) : ('as yet unclassified'currentDirectory ^<FilePath> = (	|cd func res| 	[cd:: Alien newC: 500.	func:: Alien lookup: #getcwd inLibrary: '/usr/lib/libc.dylib'.	res:: func primFFICallResult: (Alien new: 4)		with: cd address		with: 500.	^self new pattern: cd strcpy] ensure: [cd free]))class MacOSXFilePattern = UnixFilePattern (||)('as yet unclassified'libcName = (	^'/usr/lib/libc.dylib')vectorOffset = (	^17)) : ('as yet unclassified'for: pat <Str>  ^<FilePattern> = (    self assert: [ self validPattern: pat ].    ^self new pattern: pat)multipleMatchWildcardCharacter ^ <Character> = (	^$*)pathSeparatorCharacter ^ <Character> = (	^'/')patternHasWildcards: pat <Str> ^<Boolean> = (    ^(pat includes: multipleMatchWildcardCharacter)        or: [ pat includes: singleMatchWildcardCharacter ])singleMatchWildcardCharacter ^ <Character> = (	^$?)validPattern: pat <Str> ^<Boolean> = (    "Make sure this is a valid syntactic pattern (should be valid even if no *s)"    self unimplemented))class MacOSXFileDescriptor = UnixFileDescriptor (|	|)('as yet unclassified'libcName = (	^'/usr/lib/libc.dylib')'accessing'blockSize ^<Int> = (    "Use the sector size"    ^self stat: [:buffer| buffer blockSize]    		ifFail: [4096])size ^<Int> = (    "Use the sector size"    ^self stat: [:buffer| buffer fileSize]    		ifFail: [0])stat: block ifFail: failBlock = (    | statBuffer <StatBuffer>     	status <ExternalProxy> |    statBuffer:: self StatBuffer newC.    [^((Alien lookup: 'fstat' inLibrary: libcName)		primFFICallResult: (Alien new: 4)		with: self handle		with: statBuffer address	) asSignedLong == -1		ifTrue: [failBlock value]		ifFalse: [ block value: statBuffer ]	] ensure: [ statBuffer free])'private'StatBuffer = (	^MacOSXStatBuffer)lseek: handle position: p <Int> whence: whence <Int> = (    "%todo: support large integer positions for extremely large files"    | padding |    padding:: p < 0    					ifTrue: [-1]    					ifFalse: [0].  " ^ {{<libc ExternalProxy lseek>        				fd: handle        				offsetLow: p        				offsetHigh: padding        				whence: whence }}")) : ('as yet unclassified'for: obj <EOBJ> mode: m <Symbol>  ^ <Instance> = (	"Create a new instance, but don't open yet"	^self new externalObject: obj; mode: m)))