Newspeak3
'NS2Dart'
class CompilerMirrorsForDart usingPlatform: p = (
(* Mirrors for NS2Dart compiler.

Copyright 2012 SAP AG.
Copyright 2012 Google Inc.

Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0 *)|
	Dictionary = p collections Dictionary.
	OrderedCollection = p collections OrderedCollection.
|)
(
class CompiledMixinMirror language: l header: h mirror: llm <LowLevelMixinMirror> = (
(* Represents a compiled (but uninstalled) NS3 class declaration. *)|
	language <Language> = l.
	header <String> = h.
	lowLevelMirror <LowLevelMixinMirror> = llm.
	factoryName
	commentString
|)
('as yet unclassified'
category ^ <String> = (
	^lowLevelMirror category
)
category: c <String>  = (
	lowLevelMirror category: c
)
comment ^ <String> = (
	commentString ifNil:[^''].
	^commentString

)
comment: c <String> = (
	commentString: c
)
isMeta = (

	^ lowLevelMirror isMeta
)
methods = (

	^ lowLevelMirror methods
)
name ^ <String> = (
	^lowLevelMirror name
)) : ()
class ImmutableMirrorGroup group: group = (|
	mirrors = Dictionary new.
|group do: [:each | mirrors at: each simpleName put: each])
('accessing'
collect: aBlock = (
	| result |
	result:: OrderedCollection new.
	self do: [:each | result add: (aBlock value: each)].
	^result
)
do: block = (

	mirrors do: block
)
findMirrorNamed: mirrorName = (

	(* The Newspeak version silently fails if the mirror is not present and returns nil. It that actually what we want? *)
	^ mirrors at: mirrorName
)
includesMirrorNamed: simpleName = (

	^ mirrors includesKey: simpleName
)
includesMirrorSatisfying: block = (

	mirrors do: [:each |
		(block value: each) ifTrue: [^ true]].
	^ false
)) : ()
class InstanceVariableMirror named: n mutable: m = Mirror (
(* A mirror on an instance variable *)|
	name <String> = n.
	mutable <Boolean> = m.
	
	field <Node>  (* Dart code *)
	src <String> (* Newspeak source -- optional *)
|)
('as yet unclassified'
isMutable = (
	^mutable
)
isMutableSlot = (
	^mutable
)) : ()
class LowLevelMethodMirror = Mirror (|
	debugInfo
	selector <Symbol>
	klass <Class>
	src <String>
|)
('as yet unclassified'
isConstructor = (
	^metadata at: #isConstructor ifAbsent: [false]
)
isNestedClassAccessor = (
	^metadata at: #isNestedClassAccessor ifAbsent: [false]
)
isSlotAccessor = (
	^metadata at: #isSlotAccessor ifAbsent: [false]
)
isSubinitializer = (
	^metadata at: #isSubinitializer ifAbsent: [false]
)
isSuperConstructor = (
	^metadata at: #isSuperConstructor ifAbsent: [false]
)
isSynthetic = (
	^metadata at: #isSynthetic ifAbsent: [false]
)
name ^<Symbol> = (
	^selector
)) : ()
class LowLevelMixinMirror named:  n <Symbol> isMeta: b <Boolean> = Mirror (
(* Represents a Squeak Class. *)|
	name <Symbol> = n.
	instVars <MirrorGroup> = MutableMirrorGroup group:{}.
	methods  <MirrorGroup> = MutableMirrorGroup group:{}.
	category <Symbol>
	cachedClassMixin
	isMeta = b.
	superclassName (* Temporary until we have mixins in Dart *)
|#FLAG)
('as yet unclassified'
classMixin = (
	(* assert: [isMeta not]. *)
	cachedClassMixin isNil ifTrue:
		[cachedClassMixin:: self class named: (name, ' class') asSymbol isMeta: true].
	^cachedClassMixin	 
)) : ()
class Mirror = (
(* Common base class for low level mirrors. *)|
	metadata <MutableMap[Symbol, Object]> = Dictionary new.
|)
('as yet unclassified'
simpleName = (
	^name
)) : ()
class MutableMirrorGroup group: group = ImmutableMirrorGroup group: group (|
|)
('public'
addAllMirrors: mirrorGroup = (

	(* self should not be required. some compiler problem *)
	mirrorGroup do: [:each | addMirror: each]
)
addMirror: mirror = (

	(* self should not be required. some compiler problem *)
	self mirrors at: mirror simpleName put: mirror
)) : ()
class SlotMirror named: name source: source isMutable: isMutable = (|
	public name = name.
	public source = source.
	public isMutable = isMutable.
|)
() : ()'as yet unclassified'
REFACTORING = (
	(* The compiler mirrors for all the Newspeak compiler could use cleanup. We have a profusion of slightly different entities--such as CompiledMixinMirror, LowLevelMixinMirror and MixinRep--that should be unified. The slight differences between the versions of MirrorGroups should also be eliminated and a single MirrorGroups module be shared. *)
)) : ()