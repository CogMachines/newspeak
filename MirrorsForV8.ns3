Newspeak3
'Mirrors'
class MirrorsForV8 usingPlatform: p vmMirror: vmm = (|
private List = p collections OrderedCollection.
private Mixin = p kernel Mixin.
private CharacterReadStream = p streams CharacterReadStream.
private CharacterWriteStream = p streams CharacterReadWriteStream.
private ImmutableMirrorGroup = (p namespace MirrorGroups usingLib: p) ImmutableMirrorGroup.
private vmmirror = vmm.

private parserLib = Future computing: [p namespace CombinatorialParsing usingPlatform: p].
private grammar = Future computing: [p namespace NewspeakGrammar usingPlatform: p parsers: parserLib].
private asts = Future computing: [p namespace NewspeakASTs usingLib: p].
private parsing = Future computing: [p namespace NewspeakParsing usingPlatform: p grammar: grammar asts: asts].
private generation = Future computing: [p namespace JavascriptGeneration usingPlatform: p].
private compilation = Future computing: [p namespace Compilation usingPlatform: p parsing: parsing generation: generation mirrors: nil].
private compiler = Future computing: [compilation Compiler new].
|) (
public class ClassDeclarationBuilder fromIR: ir forExistingMixin: m within: enclosing = (|
private prvtExistingMixin <Mixin> ::= m.
private prvtClassDeclIR <ClassDeclarationIR> ::= ir.

public enclosingClass = enclosing.
public instanceSide = MixinBuilder forClassDeclaration: self ir: ir instanceSide em: m.
public classSide = MixinBuilder forClassDeclaration: self ir: ir classSide em: m.
|) (
'as yet unclassified'
public accessModifier = (
	^prvtClassDeclIR accessModifier
)
public install ^<ClassDeclarationMirror> = (
	| writer stream src runtimeMixin application |
	(* assert: [prvtExistingMixin isNil] message: 'Modifying existing code as-yet-unimplemented'. *)
	writer:: generation Writer new.
	stream:: CharacterWriteStream on: (Array new: 100).
	writer generateSourceFor: prvtClassDeclIR runtimeMixin on: stream.
	src:: String withAll: stream contents.
	src out.
	runtimeMixin:: js call: (js ident: 'eval') with: {src}.
	prvtExistingMixin isNil
		ifTrue: [prvtExistingMixin:: Mixin fromRuntimeMixin: runtimeMixin]
		ifFalse: [updateMixin: prvtExistingMixin from: runtimeMixin by: prvtClassDeclIR].
	^ClassDeclarationMirror reflecting: prvtExistingMixin.
)
public name ^<Symbol> = (
	^ prvtClassDeclIR qualifiedName
)
public simpleName ^<Symbol> = (
	^compilation names fullyQualifiedNameToSimple: prvtClassDeclIR qualifiedName
)
) : (
'as yet unclassified'
public fromSource: src <String> ^<ClassDeclarationBuilder> = (
	^self fromUnitSource: 'Newspeak3 ''Uncategorized'' ', src
)
public fromUnitSource: src <String> ^<ClassDeclarationBuilder> = (
	^self fromIR: (compiler compileClassSource:  src) within: nil)
public reflecting: mixin <InstanceMixin> ^<ClassDeclarationBuilder> = (
	(* assert: [mixin isMixin & mixin isMeta not] message: 'Provide an instance-side mixin'. *)
	| m = ClassDeclarationMirror reflecting: mixin. |
	m enclosingClass isNil ifFalse: [
		^(ClassDeclarationBuilder reflecting: m enclosingClass reflectee)
			instanceSide nestedClasses findMirrorNamed: m simpleName
	].
	
	^self
		fromIR: (classDeclIRFor: mixin within: nil)
		forExistingMixin: mixin
		within: nil
)
)
public class ClassDeclarationMirror reflecting: mixin = (|
	public reflectee = mixin.
	public instanceSide = MixinMirror reflecting: mixin.
	public classSide = MixinMirror reflecting: (Mixin fromRuntimeMixin: (js propertyOf: (js propertyOf: mixin at: (js literal: 'runtimeMixin')) at: (js literal: 'meta'))).
	public accessModifier = #public. (*BOGUS*)
|) (
'as yet unclassified'
public enclosingClass ^ <ClassDeclarationMirror> = (
	| enclosing <Class> |
	enclosing:: (js propertyOf: (js propertyOf: reflectee at: (js literal: 'runtimeMixin')) at: (js literal: 'enclosingMixin')). 
	(js operator: '===' with: enclosing and: (js ident: 'undefined')) ifTrue: [^nil].
	^ClassDeclarationMirror reflecting: (Mixin fromRuntimeMixin: enclosing)
)
public header ^<ClassHeaderMirror> = (
	^ClassHeaderMirror reflecting: reflectee
)
public name = (
	^reflectee name
)
public simpleName = (
	^(name splitBy: '`') last
)
public source ^<String> = (
	| stream |
	stream:: CharacterWriteStream on: (Array new: 100).
	stream nextPutAll: header source.
	stream nextPutAll: ' ( '; cr.
	instanceSide nestedClasses do: [:ea | stream nextPutAll: ea source; cr].
	stream nextPutAll: ' ''Unclassified'' '.
	instanceSide methods do: [:ea | stream nextPutAll: ea source; cr].
	stream nextPutAll: ' ) : ( '; cr.
	classSide methods do: [:ea | stream nextPutAll: ea source; cr].
	stream nextPutAll: ' )'.
	^String withAll: stream contents
)
) : (
)
public class ClassHeaderMirror reflecting: mixin = (|
	public reflectee <Mixin> = mixin.
|) (
'as yet unclassified'
public source ^<String> = (
	| sourceIndex = js propertyOf: (js propertyOf: reflectee at: (js literal: 'runtimeMixin')) at: (js literal: 'header'). |
	^js propertyOf: (js ident: 'sources') at: sourceIndex.
)
) : (
)
public class ClassMirror reflecting: r = (|
public reflectee = r.
|) (
'as yet unclassified'
public allSuperclasses ^ <List[ClassMirror]> = (
	| klass <Class> superclasses <List[Class]> |
	superclasses:: List new.
	klass:: superclass.
	[klass isNil] whileFalse:[
		superclasses add: klass.
		klass:: klass superclass.
	].
	^superclasses
)
private computeMirrorGroup: mgAccessor <[:MixinMirror | MirrorGroup]> ^ <List[Mirror]> = (
(* Return a mirror group based on the mixins group and those of all superclasses. The argument mgAccessor extracts a mirror group from any mirror provided to it. *)
	| mg <MirrorGroup>  |
	mg:: List new.
	(allSuperclasses reverse add: self; yourself)
		do:[:klass <ClassMirror> | mg addAll: (mgAccessor value: klass mixin)].
	^ mg	
)
public enclosingObject ^<ObjectMirror> = (
	^ObjectMirror reflecting: reflectee enclosingObject
)
public methods ^ <MirrorGroup[MethodMirror]> = (
	^computeMirrorGroup: [:r | r methods]
)
public mixin ^ <MixinMirror> = (
	^MixinMirror reflecting: reflectee mixin
)
public name = (
	^reflectee name
)
public nestedClasses ^ <MirrorGroup[ClassDeclarationMirror]> = (
	^computeMirrorGroup: [:r | r nestedClasses]
)
public simpleName = (
	^(reflectee name splitBy: '`') last
)
public slots ^ <MirrorGroup[SlotMirror]> = (
	^computeMirrorGroup: [:r | r slots].
)
public superclass ^ <ClassMirror> = (
	reflectee superclass isNil ifTrue:[^nil].
	^ClassMirror reflecting: reflectee superclass
)
) : (
)
public class MethodBuilder reflecting: mir in: mb = (| reflecteeX <MethodIR> = mir. definingMixinX <MixinBuilder> = mb. |) (
'as yet unclassified'
public accessModifier = (
	^reflecteeX accessModifier
)
public name ^<Symbol> = (
	^reflecteeX name
)
public simpleName ^<Symbol> = (
	^reflecteeX name
)
) : (
)
public class MethodMirror named: n in: dm source: s = (|
	public name <Symbol> = n.
	public definingMixin <MixinMirror> = dm.
	private sourceIndex <Integer> = s.
	public accessModifier = #public. (*BOGUS*)
|) (
'as yet unclassified'
public simpleName ^<Symbol> = (
	^name
)
public source ^<String> = (
	^js propertyOf: (js ident: 'sources') at: sourceIndex.
)
) : (
)
public class MixinBuilder forClassDeclaration: cdb ir: ir em: em = (|
mixinIR <MixinIR> = ir.
public declaration <ClassDeclarationBuilder> = cdb.
public isMeta <Boolean> = ir isMeta.
public slots = ir slots collect: [:ea | SlotDeclarationMirror named: ea name].
public methods <MutableMethodGroup> = MutableMethodGroup group: ((ir methods reject: [:ea | ea isSynthetic]) collect: [:ea | MethodBuilder reflecting: ea in: self]) within: self ir: ir.
public nestedClasses <MutableNestedClassGroup> = MutableNestedClassGroup group: (ir nestedClasses collect: [:ea | ClassDeclarationBuilder fromIR: ea forExistingMixin: (find: ea qualifiedName in: em) within: cdb]) within: self ir: ir.
|) (
'as yet unclassified'
find: name in: existingMixin = (
	^Mixin fromRuntimeMixin: 
		(js propertyOf: 
			(js propertyOf: existingMixin at: (js literal: 'runtimeMixin')) at: (compilation names manglePublic: name))
)
public isMixinMirror ^<Boolean> = (
	^true
)
) : (
'as yet unclassified'
public reflecting: mxn <Mixin | ClassMixin> ^<MixinBuilder> = (
	^mxn isMeta
		ifTrue: [(ClassDeclarationBuilder reflecting: (MixinMirror reflecting: mxn) declaration instanceSide reflectee) classSide]
		ifFalse: [(ClassDeclarationBuilder reflecting: mxn) instanceSide]
)
)
public class MixinMirror reflecting: mixin = (|
	public reflectee = mixin.
|) (
'as yet unclassified'
public declaration ^<ClassDeclarationMirror> = (
	^ClassDeclarationMirror 
		reflecting: (reflectee isMeta 
			ifFalse: [reflectee]
			ifTrue: [(Mixin fromRuntimeMixin: (js propertyOf: (js propertyOf: reflectee at: (js literal: 'runtimeMixin')) at: (js literal: 'nonMeta')))])
)
public isMixinMirror ^<Boolean> = (
	^true
)
public methods ^<MirrorGroup[MethodMirror]> = (
	| raw <Array[MethodMirror]> |
	raw:: ((js propertyOf: (js propertyOf: reflectee at: (js literal: 'runtimeMixin')) at: (js literal: 'methods'))
		select: [:each | (js propertyOf: each at: (js literal: 'isSynthetic')) not])
		collect: [:each | MethodMirror named: (js propertyOf: each at: (js literal: 'name')) in: self source: (js propertyOf: each at: (js literal: 'source'))].
	^ImmutableMirrorGroup group: raw
)
public nestedClasses ^<MirrorGroup[ClassDeclarationMirror]> = (
	| raw <Array[ClassDeclarationMirror]> |
	raw:: (js propertyOf: (js propertyOf: reflectee at: (js literal: 'runtimeMixin')) at: (js literal: 'nestedClasses'))
		collect: [:each | ClassDeclarationMirror reflecting: 
			(Mixin fromRuntimeMixin:
				(js propertyOf: (js propertyOf: reflectee at: (js literal: 'runtimeMixin')) at: (vmmirror mangleSelector: each)))].
	^ImmutableMirrorGroup group: raw
)
public slots ^<MirrorGroup[SlotDeclarationMirror]> = (
	| raw <Array[SlotDeclarationMirror]> |
	raw:: ((js propertyOf: (js propertyOf: reflectee at: (js literal: 'runtimeMixin')) at: (js literal: 'slots'))
		select: [:each | (js propertyOf: each at: (js literal: 'isSynthetic')) not])
		collect: [:each | SlotDeclarationMirror named: (js propertyOf: each at: (js literal: 'name'))].
	^ImmutableMirrorGroup group: raw
)
) : (
)
public class MutableMethodGroup group: ms within: mb ir: ir = MutableMirrorGroup group: ms within: mb ir: ir () (
'as yet unclassified'
public addFromSource: s <String> = (
	| 
	result <LowLevelMethodMirror>
	cat
	newM
	|
	result:: compiler
		compileMethodSource: s
		within: enclosingMixin.
	
	(* TODO: copy old category if any *)
	(* TODO: check for name conflicts *)
	
	newM:: MethodBuilder reflecting: result in: enclosingMixin.
	mixinIR methods removeAllSuchThat: [:ea | ea name = result name].
	mixinIR methods add: result.
	(* TODO: remove existing method with same name if any from the mirror group as well as the mixin ir *)
	super addMirror: newM.
	^newM
)
) : (
)
public class MutableMirrorGroup group: ms within: mb ir: ir = ImmutableMirrorGroup group: ms (|
public enclosingMixin = mb.
protected mixinIR = ir.
|) (
'as yet unclassified'
addMirror: m <Mirror>  = (
	mirrors keysAndValuesDo: [:index :mirror | 
		mirror simpleName = m simpleName ifTrue: [^mirrors at: index put: m]].
	^mirrors addLast: m
)
) : (
)
public class MutableNestedClassGroup group: ms within: mb ir: ir = MutableMirrorGroup group: ms within: mb ir: ir () (
) : (
)
public class ObjectMirror reflecting: r = (|
	public reflectee = r.
|) (
'as yet unclassified'
public evaluate: expression <String>
ifCompilerError: compilationErrorHandler <[:Error]> 
ifError: evalErrorHandler <[:Error]> ^<ObjectMirror> = (
	|
	compiler
	ir
	dnuHandlers
	writer
	stream
	src
	func
	result
	|
	[compiler:: compilation Compiler new.
	ir:: compiler
			compileExpressionSource: expression
			inMixin: getClass mixin.
	dnuHandlers:: compiler dnuHandlers.
	
	writer:: generation Writer new.
	stream:: CharacterWriteStream on: (Array new: 100).
	writer generateSourceFor: dnuHandlers on: stream.
	src:: String withAll: stream contents.
	func:: js call: (js ident: 'eval') with: {'(',src, ')'}.
	js call: func with: {js verbatim: 'Object.prototype'}.
	
	writer:: generation Writer new.
	stream:: CharacterWriteStream on: (Array new: 100).
	writer generateSourceFor: ir function on: stream.
	src:: String withAll: stream contents.
	src out.
	func:: js call: (js ident: 'eval') with: {'(',src, ')'}.
	] on: Error do: [:e | ^compilationErrorHandler value: e].
	[result:: js call: (js propertyOf: func at: (js literal: 'call')) with: {reflectee}.]
		on: Error do: [:e | ^evalErrorHandler value: e].
	^ObjectMirror reflecting: result
)
public getClass = (
	#BOGUS. (* Wrong for bilingual objects. *)
	^ClassMirror reflecting:
		(js propertyOf: reflectee at: (js literal: 'newspeakClass')).
)
public getClassIfFail: blk = (
	#BOGUS. (* Wrong for bilingual objects. *)
	^ClassMirror reflecting:
		(js propertyOf: reflectee at: (js literal: 'newspeakClass')).
)
public getSlot: selector = (
	|
	mangledName = vmmirror mangleSelector: selector, '`slot'.
	raw = js propertyOf: reflectee at: mangledName.
	|
	(js operator: '===' with: (js ident: 'undefined') and: raw) ifTrue: [halt].
	^ObjectMirror reflecting: raw
)
public getSlot: selector ifFail: blk = (
	|
	mangledName = vmmirror mangleSelector: selector, '`slot'.
	raw = js propertyOf: reflectee at: mangledName.
	|
	(js operator: '===' with: (js ident: 'undefined') and: raw) ifTrue: [halt].
	^ObjectMirror reflecting: raw
)
public setSlot: selector to: value = (
	|
	mangledName = vmmirror mangleSelector: selector, '`slot'.
	raw = js propertyOf: reflectee at: mangledName.
	|
	(js operator: '===' with: (js ident: 'undefined') and: raw) ifTrue: [^halt].
	js assign: (js propertyOf: reflectee at: mangledName) toBe: value.
)
public setSlot: selector to: value ifFail: blk = (
	|
	mangledName = vmmirror mangleSelector: selector, '`slot'.
	raw = js propertyOf: reflectee at: mangledName.
	|
	(js operator: '===' with: (js ident: 'undefined') and: raw) ifTrue: [^halt].
	js assign: (js propertyOf: reflectee at: mangledName) toBe: value.
)
) : (
)
public class SlotDeclarationMirror named: n = (|
	public name <Symbol> = n.
	public accessModifier <Symbol> = #public. (*BOGUS*)
|) (
) : (
)
'as yet unclassified'
classDeclIRFor: mixin within: enclosing = (
	| source = 'Newspeak3 ''Uncategorized'' ', (ClassDeclarationMirror reflecting: mixin) source. |
	^compiler compileClassSource:  source within: enclosing
)
updateMixin: oldMixin from: newRuntimeMixin by: classDeclIR = (
	|
	oldRuntimeMixin = js propertyOf: oldMixin at: (js literal: 'runtimeMixin').
	oldRuntimeMetamixin = js propertyOf: oldRuntimeMixin at: (js literal: 'meta').
	newRuntimeMetamixin = js propertyOf: newRuntimeMixin at: (js literal: 'meta').
	applications = js propertyOf: oldRuntimeMixin at: (js literal: 'applications').
	|
	(* TODO: handle deletes *)
	(* TODO: copy nested classes also? *)
	(* TODO: copy new metadata *)
	classDeclIR instanceSide methods do: [:ea |
		| jsName |
		jsName:: compilation names manglePublic: ea name.
		js assign: (js propertyOf: oldRuntimeMixin at: jsName) toBe: (js propertyOf: newRuntimeMixin at: jsName).
	].
	{#name. #header. #slots. #methods. #nestedClasses} do: [:jsName |
		js assign: (js propertyOf: oldRuntimeMixin at: jsName) toBe: (js propertyOf: newRuntimeMixin at: jsName).
	].
	classDeclIR classSide methods do: [:ea |
		| jsName |
		jsName:: compilation names manglePublic: ea name.
		js assign: (js propertyOf: oldRuntimeMetamixin at: jsName) toBe: (js propertyOf: newRuntimeMetamixin at: jsName).
	].
	{#slots. #methods. #nestedClasses} do: [:jsName |
		js assign: (js propertyOf: oldRuntimeMetamixin at: jsName) toBe: (js propertyOf: newRuntimeMetamixin at: jsName).
	].
	applications do: [:runtimeClass |
		|
		runtimeMetaclass = js propertyOf: runtimeClass at: (js literal: 'meta').
		|
		runtimeClass out.
		(* Cf. IntermediateClassDeclaration copyMethods: *)
		classDeclIR instanceSide methods do: [:ea |
			| jsProName jsPubName |
			jsPubName:: compilation names manglePublic: ea name.
			jsProName:: compilation names mangleProtected: ea name.
			ea isProtected ifTrue: [
				js assign: (js propertyOf: runtimeClass at: jsProName) toBe: (js propertyOf: newRuntimeMixin at: jsPubName).
				js assign: (js propertyOf: runtimeClass at: jsPubName) toBe: (js call: (js ident: 'dnuCatcher') with: {jsPubName}).
			].
			ea isPublic ifTrue: [
				js assign: (js propertyOf: runtimeClass at: jsProName) toBe: (js propertyOf: newRuntimeMixin at: jsPubName).
				js assign: (js propertyOf: runtimeClass at: jsPubName) toBe: (js propertyOf: newRuntimeMixin at: jsPubName).
			].
		].
		classDeclIR classSide methods do: [:ea |
			| jsProName jsPubName |
			jsPubName:: compilation names manglePublic: ea name.
			jsProName:: compilation names mangleProtected: ea name.
			ea isProtected ifTrue: [
				js assign: (js propertyOf: runtimeMetaclass at: jsProName) toBe: (js propertyOf: newRuntimeMetamixin at: jsPubName).
				js assign: (js propertyOf: runtimeMetaclass at: jsPubName) toBe: (js call: (js ident: 'dnuCatcher') with: {jsPubName}).
			].
			ea isPublic ifTrue: [
				js assign: (js propertyOf: runtimeMetaclass at: jsProName) toBe: (js propertyOf: newRuntimeMetamixin at: jsPubName).
				js assign: (js propertyOf: runtimeMetaclass at: jsPubName) toBe: (js propertyOf: newRuntimeMetamixin at: jsPubName).
			].
		].
	].
)
) : (
)
