Newspeak3
'Aliens'
class AlienTests usingPlatform: p testFramework: minitest = NewspeakObject (
"Probably should test a separate instance of Aliens, i.e. not the one installed in NsPlatform, but that might not work when we get to testing callbacks and the vm can only send them back to image code at one place."|
	Alien = p aliens Alien3.
	TestContext = minitest TestContext.
|)
(
class BasicTests = TestContext (
""|

|)
('as yet unclassified'
doAccessingOn: a <Alien> = (
		
	assert: [a dataSize = 128].
	assert: [a asUnsignedLong = 0].
		
	a signedByteAt: 1 put: -126.
	a signedShortAt: 5 put: -1234.
	a signedLongAt: 9 put: -88000088.
	a unsignedByteAt: 13 put: 255.
	a unsignedShortAt: 17 put: 1337.
	a unsignedLongAt: 21 put: 13371337.
	a floatAt: 30 put: Float pi.
	a doubleAt: 40 put: Float e.
		
	assert: [(a signedByteAt: 1) = -126].
	assert: [(a signedShortAt: 5) = -1234].
	assert: [(a signedLongAt: 9) = -88000088].
	assert: [(a unsignedByteAt: 13) = 255].
	assert: [(a unsignedShortAt: 17) = 1337].
	assert: [(a unsignedLongAt: 21) = 13371337].	
	assert: [(a floatAt: 30) closeTo: Float pi]. "Loss of precision expected"
	assert: [(a doubleAt: 40) = Float e].
)
testAccessingOnDirect = (
	
	doAccessingOn: (Alien new: 128)
)
testAccessingOnIndirect = (
	
	(Alien newC: 128) freeAfter: [:a | doAccessingOn: a ].
)
testAllocation = (
	|a|
	
	a:: Alien newC: 128.
	deny: [a address = 0].
	assert: [a dataSize = 128].
	a free.
	
	a:: Alien rawNewC: 128.
	a free.
)
testStrings = (
	| hello a |
	hello:: 'Hello Brave New World!'.
	
	[
	a:: Alien fromString: hello.
	
	deny: [a address = 0].
	assert: [a strlen = hello size].
	assert: [a strcpy = hello].
	
	] ensure: [a free]
)) : ('as yet unclassified'
TEST_CONTEXT = (
)))