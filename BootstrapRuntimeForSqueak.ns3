Newspeak3
'NewspeakRuntime'
class BootstrapRuntimeForSqueak packageUsing: namespace = NewspeakObject (
"Bundles enough module definitions to create a subset of the platform object that can compile NS3.

Copyright (c) 2011 Ryan Macnak.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ''Software''), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ''AS IS'', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE."|
	Collections = namespace NSCollections Collections.
	Kernel = namespace NSKernel Kernel.
	Mirrors = namespace Mirrors Mirrors4.
		LowLevelMirrors = namespace Mirrors LowLevelMirrorsForSqueak.
		AtomicInstaller = namespace Mirrors AtomicInstaller4.
		SqueakVmMirror = namespace VmMirror SqueakVmMirror.
		MirrorGroups = namespace Mirrors MirrorGroups.
	Streams = namespace NSStreams NSStreams.
	
	CP = namespace NS2CombinatorialParsing CombinatorialParsing.
	BCP = namespace NS2CombinatorialParsing BlocklessCombinatorialParsing.
	BlocklessCombinatorialParsing = BCP mixin apply: CP.
	Newspeak3Grammar = namespace Newspeak3 Newspeak3Grammar.
	Newspeak3AST = namespace Newspeak3 Newspeak3AST.
	Newspeak3Parsing = namespace Newspeak3 Newspeak3Parsing.
	Newspeak3Compilation = namespace Newspeak3 Newspeak3Compilation.
	
	Newspeak3CompilerAdaptor = namespace Newspeak3CompilerAdaptor Newspeak3CompilerAdaptor.
|)
(
class Platform usingVMMirror: vmm = (
"Just enought to get NS3 compiler going"|
	blackMarket = vmm blackMarket.

	namespace = ooter.

	public collections = Delay computation: [Collections usingPlatform: self].
	public kernel = Delay computation: [Kernel usingPlatform: self vmMirror: vmm].
	public mirrors = Delay computation: [Mirrors usingLib: self].
	public streams = Delay computation: [Streams usingPlatform: self].
|self resetForNewImageSession)
('as yet unclassified'
AtomicInstaller4 = (
	^namespace AtomicInstaller
)
bootstrap = (
	| time repoDir |
	Transcript open.
	repoDir:: (FileDirectory default containingDirectory containingDirectory / 'newspeak').
	time:: [
		repoDir fileNames collect: [:ea | (ea endsWith: '.ns2') | (ea endsWith: '.ns3') ifTrue: [
			| src klass |
			Transcript cr; show: ea.
			klass:: LanguageFileReader new compileFile: (repoDir fullNameFor: ea).
			(Smalltalk at: #PackageInfo) named: (klass basicCategory findTokens: '-') first. 
			Transcript show: '...done'.
		]].
	] timeToRun.

	('***Overall in ', (time/1000/60) floor printString , ' minutes') out.
)
doesNotUnderstand: aMsg = (
	"An interim measure so that NsPlatform can be used instead of Platform"
	#BOGUS yourself.
	^blackMarket perform: aMsg selector withArguments: aMsg arguments
)
resetForNewImageSession = (
	
))'as yet unclassified'
ooter = (
	^self
)
using: vmm <VMMirror> ^<Platform>= (
	^Platform usingVMMirror: vmm
))