Newspeak3
'NS2Squeak'
class BootstrapRuntimeForSqueak packageUsing: namespace = (
(* Bundles enough module definitions to create a subset of the platform object that can compile NS3.
 
Copyright (c) 2010-2012 Ryan Macnak.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ''Software''), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ''AS IS'', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. *)|
	Collections = namespace NSCollections Collections.
	Ducts = namespace Brazil Ducts.
	Exceptions = namespace NSExceptions Exceptions.
	Kernel = namespace NSKernel Kernel.
	Mirrors = namespace Mirrors NewspeakMirrors.
		LowLevelMirrors = namespace Mirrors LowLevelMirrorsForSqueak.
		AtomicInstaller = namespace Mirrors AtomicInstaller.
		SqueakVmMirror = namespace VmMirror SqueakVmMirror.
		MirrorGroups = namespace Mirrors MirrorGroups.
	Past = namespace Past Past.
	Streams = namespace NSStreams NSStreams.
	
	CP = namespace NS2CombinatorialParsing CombinatorialParsing.
	BCP = namespace NS2CombinatorialParsing BlocklessCombinatorialParsing.
	BlocklessCombinatorialParsing = BCP mixin apply: CP.
	NewspeakGrammar = namespace NewspeakGrammar.
	NewspeakASTs = namespace NewspeakASTs.
	NewspeakParsing = namespace NewspeakParsing.
	Newspeak2SqueakCompilation = namespace Newspeak2SqueakCompilation.
	
	Newspeak3CompilerAdaptor = namespace Newspeak3CompilerAdaptor Newspeak3CompilerAdaptor.
|)
(
class Platform usingVmMirror: vmm = (
(* Just enought to get the NS3 compiler going *)||
	blackMarket = vmm blackMarket.

	namespace = outer BootstrapRuntimeForSqueak.

	public collections = Collections usingPlatform: self.
	public ducts = Ducts usingPlatform: self.
	public exceptions = Exceptions usingPlatform: self.
	public kernel = Kernel usingPlatform: self vmMirror: vmm.
	public mirrors = Mirrors usingPlatform: self vmMirror: vmm.
	public past = Past usingPlatform: self.
	public streams = Streams usingPlatform: self.
||self resetForNewImageSession)
('as yet unclassified'
bootstrap = (
	| time repoDir |
	blackMarket Transcript open.
	repoDir:: (blackMarket FileDirectory default containingDirectory / 'newspeak').
	time:: [
		| files |
		files:: repoDir fileNames select: [:ea | (ea endsWith: '.ns2') | (ea endsWith: '.ns3')].
		files:: files sortBy: [:a :b | a < b].
		files do: [:ea |
			| src klass |
			blackMarket Transcript cr; show: ea.
			klass:: blackMarket LanguageFileReader new compileFile: (repoDir fullNameFor: ea).
			(blackMarket Smalltalk at: #PackageInfo) named: (klass basicCategory findTokens: '-') first. 
			blackMarket Transcript show: '...done'.
		].
	] timeToRun.

	('***Overall in ', (time/1000/60) floor printString , ' minutes') out.
)
resetForNewImageSession = (
	
)) : ()'as yet unclassified'
using: vmm <VMMirror> ^<Platform>= (
	^Platform usingVmMirror: vmm
)) : ()