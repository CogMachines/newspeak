Newspeak3
'Mirrors'
class ActivationMirrors usingPlatform: platform vmMirror: vmm = (
(* Mirrors for method activations and processes.

Copyright (c) 2009 Peter von der Ahe
Copyright (c) 2011 Gilad Bracha, Ryan Macnak and Cadence Design Systems
Copyright (c) 2012 Cadence Design Systems

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
''Software''), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ''AS IS'', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. *)|
	private OutOfScopeNotification = platform squeak OutOfScopeNotification.
	private SyntaxErrorNotification = platform squeak SyntaxErrorNotification.
	private Project = platform squeak Project.
	private DebuggerMethodMap = platform squeak DebuggerMethodMap.

	private vmmirror = vmm.
	private mirrors = platform mirrors.
	private ObjectMirror = platform mirrors ObjectMirror.
	private MixinBuilder = platform mirrors MixinBuilder.
	private MixinMirror = platform mirrors MixinMirror.
	private MethodMirror = platform mirrors MethodMirror.
|) (
class ActivationMirror onContext: ctxt <MethodContext> = (|
	public (*BOGUS*) context_slot <MethodContext> = ctxt.
	public (*BOGUS*) sender_slot <ActivationMirror>
	protected home_slot <ActivationMirror>
	protected localNames_slot <List[Symbol]>
	protected methodMirror_slot <MethodMirror>
|#ACCESSBOGUS) (
'as yet unclassified'
public = anotherMirror = (
	(anotherMirror isKindOf: ActivationMirror) 
		ifFalse: [ ^false].
	
	^context_slot == anotherMirror context_slot.
)
public activationsDo: action <[:ActivationMirror]> = (
	| currentMirror |
	currentMirror:: self.
	[currentMirror isNil] whileFalse:
		[action value: currentMirror.
		currentMirror:: currentMirror sender]
)
public activationsUpTo: activation <ActivationMirror> = (
	(* Answer an Array of activations up to, but not including, activationOrNil *)
	^Array streamContents:
		[:s | | current |
		current:: self.
		[s nextPut: current.
		 activation isSenderOf: current] whileFalse:
			[current:: current sender]]
)
bciForHighlightingIn: thread <ThreadMirror> ^ <Integer|nil> = (
	^(pcForHighlightingIn: thread) - homeMethod initialPC
)
public compile: newSource ifFail: onFail ^<MethodMirror> = (
	self subclassResponsibility.
)
public errorReportOn: stream = (
	context_slot errorReportOn: stream
)
public evaluate: expression <String> 
ifCompilerError: compilationErrorHandler <[:Error]> 
ifError: evalErrorHandler <[:Error]> ^<ObjectMirror> = (
	subclassResponsibility
)
public evaluate: expression <String> 
withBlackMarket: blackMarket <Object> 
ifCompilerError: compilationErrorHandler <[:Error]> 
ifError: evalErrorHandler <[:Error]> ^<ObjectMirror> = (
	(* Most languages don't need extra blackMarket during debugging *)
	^self evaluate: expression asString
	ifCompilerError: compilationErrorHandler
	ifError: evalErrorHandler
)
public hasActivation: activation <ActivationMirror> ^ <Boolean> = (
	^context_slot hasSender: activation context_slot
)
public home ^<ActivationMirror> = (
	^isBlockActivation
		ifTrue:
			[home_slot ifNil:
				[context_slot home ifNotNil:
					[:it | home_slot:: class onContext: it]].
			home_slot]
		ifFalse:
			[self]
)
homeInThread ^ <ActivationMirror> = (
	isBlockActivation ifFalse: [^self].
	home ifNotNil:
		[:homeMirror <ActivationMirror>  |
		(hasActivation: homeMirror) ifTrue:
			[activationsDo:
				[:each <ActivationMirror> |
				each context_slot == homeMirror context_slot ifTrue: [^each]]]].
	^nil
)
public homeMethod ^ <CompiledMethod> = (
	^home ifNotNil:
		[:it |
		self == it
			ifTrue: [context_slot method]
			ifFalse: [it homeMethod]]
)
public isBlockActivation ^<Boolean> = (
	^context_slot closure notNil
)
private isMessageNotUnderstood  ^ <Boolean> = (
	^context_slot selector = #doesNotUnderstand:
)
isSenderOf: activation <ActivationMirror> ^ <Boolean> = (
	^(self == activation sender_slot)
		or: [context_slot == activation context_slot sender]
)
localNames ^ <List[String]>= (
  subclassResponsibility
)
public localNamesWithValuesDo: action <[:String :ObjectMirror]> = (
	localNames doWithIndex:
		[:localName :i |
		action
			value: localName
			value: (ObjectMirror reflecting: ([home context_slot at: i] ifError: ['<error getting value>']))]
)
public localVariableValueMirror: name <String> = (
	| index |
	index:: localNames indexOf: name.
	^ObjectMirror reflecting: ([home context_slot at: index] ifError: ['<error getting value>'])
)
public method ^<MethodMirror> = (
	methodMirror_slot ifNil:[methodMirror_slot:: MethodMirror reflecting: homeMethod].
	^methodMirror_slot
)
public notUnderstoodArguments = (
	^(context_slot tempAt: 1) arguments
)
public notUnderstoodMessage ^ <Symbol> = (
	^(context_slot tempAt: 1) selector
)
pc = (
	^context_slot pc
)
pcForHighlightingIn: thread <ThreadMirror> ^ <Integer|nil> = (
	(* The pc to use for highlighting depends on whther the context is the active (top) contex or not.
	The top context's pc is its effective pc.  But other contexts' pcs are those following a send,
	since they are suspended after a send.  Hence their highlighting pc is the pc	 previous to the current pc. *)
	^context_slot pc ifNotNil:
		[:ctxtpc |
		(thread isActiveContext: context_slot)	
			ifTrue: [ctxtpc]	
			ifFalse: [context_slot method pcPreviousTo: ctxtpc]]
)
public printOn: stream = (
	isBlockActivation
		ifTrue:
			[home ifNotNil:
				[:it |
				stream nextPutAll: '[] in '.
				it printOn: stream.
				^self].
			stream nextPutAll: '<<Orphaned block>>']
		ifFalse:
			[homeMethod ifNotNil:
				[:it | | receiverMixin methodMixin |
				receiverMixin:: receiver getClass mixin.
				stream nextPutAll: receiverMixin simpleName.
				methodMixin:: method definingMixin.
				(receiverMixin = methodMixin)
					ifFalse:
						[stream nextPut: "(".
						stream nextPutAll: methodMixin simpleName.
						stream nextPut: ")"].
				stream space.
				stream nextPutAll: (it selector ifNil: [it defaultSelector]).
				isMessageNotUnderstood ifTrue:
					[stream space.
					notUnderstoodMessage printOn: stream].
				^self].
			stream nextPutAll: '<<Anonymous method>>']
)
public receiver ^<ObjectMirror> = (
	^ObjectMirror reflecting: context_slot receiver
)
public selector ^<Symbol> = (
	^context_slot selector
)
public sender ^<ActivationMirror> = (
	sender_slot ifNil:
		[context_slot sender ifNotNil:
			[:it | sender_slot:: (ActivationMirror reflecting: it)]].
	^sender_slot
)
public setLocalVariable: variableName <String> toExpression: exprString <String> ifFail: onFail <[:String]> ^<Object> = (
	| index newValue <ObjectMirror> |
	#BOGUS. (* Should take an ObjectMirror for the new value and call should choose with version of evaluate. *)
	index:: localNames indexOf: variableName ifAbsent:
		[variableName asInteger asString = variableName asString
			ifTrue: [variableName asInteger + localNames size]].
	(index isNil or: [index < 1 or: [index > stackDepth]])
		ifTrue: [^onFail valueWithPossibleArgument: 'Not found: ', variableName].
	newValue:: self
		evaluate: exprString
		ifCompilerError: [:e | ^onFail cull: e description]
		ifError: [:e | ^onFail cull: e description].
	home context_slot at: index put: newValue reflectee.
)
public setLocalVariable: variableName <String> toValue: newValue  ifFail: onFail <[:String]> ^<Object> = (
	| index  |
	index:: localNames indexOf: variableName ifAbsent:
		[variableName asInteger asString = variableName asString
			ifTrue: [variableName asInteger + localNames size]].
	(index isNil or: [index < 1 or: [index > stackDepth]])
		ifTrue: [^onFail valueWithPossibleArgument: 'Not found: ', variableName].
	home context_slot at: index put: newValue.
)
public sourceAvailable ^<Boolean> = (
	#ACCESSBOGUS. (* We should have decided not to colorize earlier when the method gave us nil source. *)
	^(homeMethod properties includesKey: #source) or: [homeMethod trailer hasSourcePointer]
)
public sourceRangeIn: thread <ThreadMirror> ^ <Interval> = (
	subclassResponsibility
)
stackDepth ^ <Integer> = (
	isBlockActivation ifTrue: [^context_slot size].
	^home context_slot size
)
public stackIndicesWithValuesDo: action <[:Integer :ObjectMirror]> = (
	| tempFrameSize |
	tempFrameSize: localNames size.
	stackDepth to: tempFrameSize + 1 by: -1 do:
		[:i |
		action
			value: i - localNames size
			value: (ObjectMirror reflecting: (context_slot at: i))]
)
public withAllActivations   = (
		^Array streamContents:  
			[:s | activationsDo: 
				[:each |  s nextPut: each]].

)
) : (
'as yet unclassified'
public reflecting: c <ContexPart> ^ <Instance> = (

	^c methodClass language activationMirrorFor: c using: outer ActivationMirrors
)
)
public class ActivationMirrorCompiledByNewspeak onContext: c <ContextPart> = ActivationMirror onContext: c (
(* A mirror on activations whose code was produced by the Newspeak compiler (NS3 and above). *)|
	private debugInfo_slot
	private debugMapper_slot
|) (
'as yet unclassified'
public compile: newSource ifFail: onFail ^<MethodMirror> = (
	| builder newSelector declMirror mixinMirror |

	builder:: MixinBuilder reflecting: method definingMixin reflectee.
	newSelector:: (builder methods addFromSource: newSource) simpleName.
	declMirror:: builder declaration install.

	mixinMirror:: builder isMeta
		ifTrue: [declMirror classSide]
		ifFalse: [declMirror instanceSide].	

	^mixinMirror methods findMirrorNamed: newSelector.
)
debugInfo ^<DebugInfo> = (
(* looks like this can't cope with fatcory methods *)
	debugInfo_slot ifNil: [
		| llmm <LowLevelMethodMirror> |
		(homeMethod properties includesKey: #debugInfo)
			ifTrue: [^debugInfo_slot:: homeMethod properties at: #debugInfo].
		llmm:: mirrors compiler
			compileMethodSource: method source within: method definingMixin.
		debugInfo_slot:: llmm debugInfo.
	].
	^debugInfo_slot
)
debugMapper = (
	debugMapper_slot ifNil: [
		debugMapper_slot:: debugInfo mapperForContext: context_slot
	].
	^debugMapper_slot
)
public evaluate: expression <String> 
ifCompilerError: compilationErrorHandler <[:Error]> 
ifError: evalErrorHandler <[:Error]> ^<ObjectMirror> = (

	(* Evaluate [expression] with the reflectee as the receiver. Names in scope in the current activation will be available, with the exception that from a closure activation any setters for temporaries not written to in that closure will only update the value seen in that closure, not all enclosing contexts where that temporary is in scope. If [expression] cannot be compiled, activate [compilationErrorHandler] with the exception. If the evaluation of [expression] raises an error, activate [evalErrorHandler] with the error. Otherwise return an ObjectMirror on the result of [expression]. *)
	| mxnMirror mtdMirror result |
	[mxnMirror:: method definingMixin. (* Super, outer and implicit receiver sends should behave like the expression is in the method class, not the receiver class. *)
	mtdMirror:: mirrors compiler
		compileExpressionSource: expression readStream
		inContext: context_slot
		inMixin: mxnMirror. 
		
	mtdMirror category: #DoIts.
	mtdMirror methodMixin: mxnMirror reflectee.
	mtdMirror compiledMethod properties
		at: #source put: expression;
		at: #debugInfo put: mtdMirror debugInfo]
			on: Error
			do: [:e | ^compilationErrorHandler cull: e ].
		
	[result:: mirrors vmmirror 
		object: context_slot receiver
		executeMethod: mtdMirror compiledMethod
		with: {context_slot}
		ifFail: [ ^compilationErrorHandler cull: (Error description: 'primitiveExecuteMethod failed') ]]
			on: Error
			do: [:e | ^evalErrorHandler cull: e].

	^mirrors ObjectMirror reflecting: result
)
public evaluate: expression <String> 
withBlackMarket: blackMarket <Object> 
ifCompilerError: compilationErrorHandler <[:Error]> 
ifError: evalErrorHandler <[:Error]> ^<ObjectMirror> = (

	(* Evaluate [expression] with the reflectee as the receiver. Names in scope in the current activation will be available, with the exception that from a closure activation any setters for temporaries not written to in that closure will only update the value seen in that closure, not all enclosing contexts where that temporary is in scope. Allow [`] as an identifier, bound to [blackMarket]. If [expression] cannot be compiled, activate [compilationErrorHandler] with the exception. If the evaluation of [expression] raises an error, activate [evalErrorHandler] with the error. Otherwise return an ObjectMirror on the result of [expression]. *)

	| mxnMirror mtdMirror result |
	[mxnMirror:: method definingMixin. (* Super, outer and implicit receiver sends should behave like the expression is in the method class, not the receiver class. *)
	mtdMirror:: mirrors compiler
		compileExpressionSource: expression asString
		inContext: context_slot
		inMixin: mxnMirror
		allowBlackMarket: true. 
		
	mtdMirror category: #DoIts.
	mtdMirror methodMixin: mxnMirror reflectee.
	mtdMirror compiledMethod properties
		at: #source put: expression;
		at: #debugInfo put: mtdMirror debugInfo]
			on: Error
			do: [:e | ^compilationErrorHandler cull: e ].
		
	[result:: vmmirror 
		object: context_slot receiver
		executeMethod: mtdMirror compiledMethod
		with: {context_slot. blackMarket}
		ifFail: [ ^compilationErrorHandler cull: (Error description: 'primitiveExecuteMethod failed') ]]
			on: Error
			do: [:e | ^evalErrorHandler cull: e].

	^mirrors ObjectMirror reflecting: result
)
public isInitializer ^ <Boolean> = (
	^method isInitializer
)
localNames ^ <List[String]>= (

	sourceAvailable ifFalse: [^{}].

	localNames_slot ifNil: [
		localNames_slot:: debugMapper localNames 
	].
	^localNames_slot
)
localNamesWithIndicesDo: action <[:String :Integer]> = (
	localNames doWithIndex: [:localName :index | action value: localName value: index].
)
public localNamesWithValuesDo: action <[:String :ObjectMirror]> = (

	localNames do: [:ea | action value: ea value: 
		(ObjectMirror reflecting: ([debugMapper getValueOf: ea] 
			ifError: ['<error getting value>']))].
)
public localVariableValueMirror: name <String> = (
	^ObjectMirror reflecting: (debugMapper getValueOf: name)
)
localVariableValueMirrorForIndex: desiredIndex <Number> = (
	localNames doWithIndex: 
		[:localName :index |
		index = desiredIndex ifTrue: 
			[^ObjectMirror reflecting: (debugMapper getValueOf: localName)]]
)
public sourceRangeIn: thread <ThreadMirror> ^ <Interval> = (
	sourceAvailable ifFalse: [^nil].
	^debugInfo bciSourceMapping at: (bciForHighlightingIn: thread) ifAbsent: [nil].
)
public stackIndicesWithValuesDo: action <[:Integer :ObjectMirror]> = (
	| tempFrameSize |
	#BOGUS yourself.
	(* Need to specialize.  The operand stack isn't simply after the number of locals in scope because remote temps don't take one slot each on the stacks of nested-closures. *)

	tempFrameSize: localNames size (* + hidden itvs, setters, pushnils *).

	stackDepth to: tempFrameSize + 1 by: -1 do:
		[:i |
		action
			value: i - tempFrameSize
			value: (ObjectMirror reflecting: (context_slot at: i))]
)
) : (
)
public class ActivationMirrorCompiledBySqueak onContext: ctxt = ActivationMirror onContext: ctxt (
(* A mirror that operates on activations whose code was compiled by the Squeak back-end. *)|
	protected methodMap_slot <DebuggerMethodMap>
|) (
'as yet unclassified'
public compile: newSource ifFail: onFail ^<MethodMirror> = (

	| klass newSelector newCM |
	klass:: method reflectee methodClass.
	newSelector:: klass
		compile: newSource 
		classified: 'as-yet-unclassified'
		notifying: nil.
	newCM:: klass compiledMethodAt: newSelector.

	^MethodMirror reflecting: newCM
)
public evaluate: expression <String> 
ifCompilerError: compilationErrorHandler <[:Error]> 
ifError: evalErrorHandler <[:Error]> ^<ObjectMirror> = (
	[
		| newValue |
		newValue:: method reflectee methodClass language compiler new
			evaluate: expression asString
			in: context_slot
			to: receiver reflectee
			notifying: (* requestor *) nil
			ifFail: [^compilationErrorHandler valueWithPossibleArgument: 'Error'].
		^ObjectMirror reflecting: newValue
	] on: SyntaxErrorNotification do: [:ex | ^compilationErrorHandler cull: ex]
	on: OutOfScopeNotification do: [:ex | ex resume: true]
)
localNames ^ <SequenceableCollection[String]>= (
	localNames_slot ifNil: [		
		(* localNames_slot:: methodNode ifNotNil: [:it | it tempNames] *)
		localNames_slot:: methodMap tempNamesForContext: context_slot
	].
	^localNames_slot ifNil: [{}]
)
localNamesWithIndicesDo: action <[:String :Number]> = (
	localNames doWithIndex: [:localName :index | action value: localName value: index].
)
public localNamesWithValuesDo: action <[:String :ObjectMirror]> = (
	localNames doWithIndex:
		[:localName :i |
		action
			value: localName
			value: (ObjectMirror reflecting: (methodMap namedTempAt: i in: context_slot))]
)
public localVariableValueMirror: name <String> = (
	| index |
	index:: localNames indexOf: name.
	^ObjectMirror reflecting: ([methodMap namedTempAt: index in: context_slot] ifError: ['<error getting value>'])
)
localVariableValueMirrorForIndex: desiredIndex <Number> = (
	localNames doWithIndex:
		[:localName :index|
		index = desiredIndex ifTrue:
			[^ObjectMirror reflecting: ([methodMap namedTempAt: index in: context_slot] ifError: ['<error getting value>'])]].
)
methodMap ^<DebuggerMethodMap> = (
	methodMap_slot ifNil: [methodMap_slot:: DebuggerMethodMap forMethod: homeMethod].
	^methodMap_slot
)
public sourceRangeIn: thread <ThreadMirror> ^ <Interval> = (
	^context_slot debuggerMap
		rangeForPC: pc
		contextIsActiveContext: (thread isActiveContext: context_slot)
)
) : (
)
public class NSActivationMirror = (|
|) (
'as yet unclassified'
public activationsDo: aBlock  = (
	^lowLevelActivationMirror activationsDo: aBlock.
)
lowLevelActivationMirror = (
	subclassResponsibility
)
) : (
)
public class NSMethodActivationMirror on: anActivationMirror = NSActivationMirror (|
	lowLevelActivationMirror = anActivationMirror.
|) (
) : (
)
class NSThreadMirror on: aLowLevelThreadMirror <ThreadMirror> = (|
	 lowLevelThreadMirror  =  aLowLevelThreadMirror.
|) (
'accessing'
public name = (
	^lowLevelThreadMirror name.
)
public summary = (
	 ^lowLevelThreadMirror summary.
)
'as yet unclassified'
public createActivationFromContext: context <ContextPart> ^ <ActivationMirror> = (
	 ^NSMethodActivationMirror on: (lowLevelThreadMirror createActivationFromContext: context).
)
public install: method <NS2MethodMirror> restart: activation <ActivationMirror> ifFail: onFail = (
	^lowLevelThreadMirror
	 	install: method 
		restart: activation 
		ifFail: onFail.
)
public isActiveContext: aContext <MethodContext> = (
	^lowLevelThreadMirror isActiveContext: aContext.
)
public restart: activation <ActivationMirror> ^<ActivationMirror> = (
	^lowLevelThreadMirror restart: activation.
)
public return: mirror <ObjectMirror> from: activation <ActivationMirror> ^<ActivationMirror> = (
	^lowLevelThreadMirror return: mirror from: activation.
)
public squeakProcess = (
	^lowLevelThreadMirror squeakProcess.
)
public stepInto: activation <ActivationMirror> ^<ActivationMirror> = (
	^lowLevelThreadMirror  stepInto: activation.
)
public stepIntoBlock: activation <ActivationMirror> ^<ActivationMirror> = (
	 ^lowLevelThreadMirror stepIntoBlock: activation.
)
public stepOver: activation <ActivationMirror> ^ <ActivationMirror> = (
	 ^lowLevelThreadMirror stepOver: activation.
)
public unwindRecursion: activation <ActivationMirror> ^<ActivationMirror> = (
	 ^lowLevelThreadMirror unwindRecursion: activation.
)
'printing'
public printOn: stream = (
	^lowLevelThreadMirror printOn: stream.
)
'testing'
public isActiveThread = (
	^lowLevelThreadMirror  isActiveThread.
)
'thread control'
public resume = (
	^lowLevelThreadMirror resume.
)
public suspend = (
	 ^lowLevelThreadMirror suspend.
)
public terminate = (
	 ^lowLevelThreadMirror terminate.
)
) : (
)
public class NSTransientSlotActivationMirror = NSActivationMirror (|
|) (
) : (
)
class ThreadMirror on: process <Process> = (
(* Represents a thread of control. *)|
	public (* BOGUS *) squeakProcess = process.
	protected wasMorphic = Project uiProcess == process.
|#ACCESSBOGUS) (
'accessing'
public name = (
	^wasMorphic
		ifTrue: ['UI event loop']
		ifFalse: ['thread ', squeakProcess name].
)
public summary = (
	^name, ' @ priority ', squeakProcess priority asString
)
'as yet unclassified'
public createActivationFromContext: context <ContextPart> ^ <ActivationMirror> = (
	assert: [context isNil not] message: 'context is nil'.
	^ActivationMirror reflecting: context
)
public install: method <NS2MethodMirror> restart: activation <ActivationMirror> ifFail: onFail = (
	| newContext |
		error.
	activation sender. (* Remember sender *)
	activation ifNil: [^onFail value: 'Block''s method not on stack'].
	newContext:: squeakProcess popTo: activation context_slot.
	newContext == activation context_slot ifFalse:
		[onFail value: 'Method saved, but error during unwind.'.
		^activationFor: newContext relativeTo: activation].
	squeakProcess
		restartTopWith: method reflectee;
		stepToSendOrReturn.
	^activation refresh
)
public isActiveContext: aContext <MethodContext> = (
	^squeakProcess suspendedContext == aContext
)
public restart: activation <ActivationMirror> ^<ActivationMirror> = (
	| newContext |
	newContext:: squeakProcess popTo: activation context_slot.
	newContext == activation context_slot ifTrue:
		[newContext:: squeakProcess restartTop; stepToSendOrReturn].
	^createActivationFromContext: newContext .
)
public return: mirror <ObjectMirror> from: activation <ActivationMirror> ^<ActivationMirror> = (
	| newContext |
	newContext:: squeakProcess popTo: activation sender context_slot value: mirror reflectee.
	^createActivationFromContext: newContext .
)
public stepInto: activation <ActivationMirror> ^<ActivationMirror> = (
	squeakProcess step: activation context_slot.
	^createActivationFromContext: squeakProcess stepToSendOrReturn.
)
public stepIntoBlock: activation <ActivationMirror> ^<ActivationMirror> = (
	squeakProcess stepToHome: activation context_slot.
	^createActivationFromContext: squeakProcess stepToSendOrReturn.
)
public stepOver: activation <ActivationMirror> ^ <ActivationMirror> = (
	| newContext |
	newContext:: squeakProcess completeStep: activation context_slot.
	newContext == activation context_slot ifTrue:
		[newContext:: squeakProcess stepToSendOrReturn].
	^createActivationFromContext: newContext .
)
public unwindRecursion: activation <ActivationMirror> ^<ActivationMirror> = (
	| newContext |
	newContext:: squeakProcess popTo: activation context_slot findSecondToOldestSimilarSender.
	^createActivationFromContext: newContext .
)
'printing'
public printOn: stream = (
	stream
		nextPutAll: 'ThreadMirror:';
		nextPutAll: name
)
'testing'
public isActiveThread = (
	^squeakProcess isActiveProcess
)
'thread control'
public resume = (
	| oldUiProcess |
	wasMorphic
		ifTrue:
			[oldUiProcess:: Project uiProcess.
			Project resumeProcess: squeakProcess]
		ifFalse:
			[squeakProcess resume].
	wasMorphic ifTrue: [oldUiProcess terminate]
)
public suspend = (
	(* Special case for the Morphic UI thread. NsFFISessionManager takes care of native UI thread. *)
	Project spawnNewProcessIfThisIsUI: squeakProcess.

	squeakProcess suspend.
)
public terminate = (
	Project spawnNewProcessIfThisIsUI: squeakProcess.
	squeakProcess terminate
)
) : (
)
'accessing'
public onContext: context <ContextPart> ^ <ActivationMirror> = (
error.

(*	assert: [context isNil not] message: 'context is nil'.
	^ActivationMirror reflecting: context    *)
)
public onProcess: process <Process> ^ <ThreadMirror> = (
	assert: [process isNil not] message: 'process is nil'.
(*	^NSThreadMirror on: (ThreadMirror on: process).  *)
	^(ThreadMirror on: process).
	
	
)
) : (
)
