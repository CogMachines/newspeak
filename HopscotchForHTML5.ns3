Newspeak3
'Hopscotch-Core'
class HopscotchForHTML5 usingPlatform: p =  (|
	private Context = p graphics Context.

	private 

global = p aliens global.
	private document = global at: 'document'.
	private body = document at: 'body'.
	
	private disclosureClosedImage = p namespace disclosureClosedImage.
	private disclosureTransitionImage = p namespace disclosureTransitionImage.
	private disclosureOpenImage = p namespace disclosureOpenImage.
	
	

public core = self.
|)
(
class ButtonFragment label: l action: a = LeafFragment (|
	label = l.
	action = a.
|)
('as yet unclassified'
createVisual = (
	^(document createElement: 'button')
		appendChild: (document createTextNode: label);
		at: 'onclick' put: [action value. false];
		yourself
)) : ()
class CanvasFragment withExtent: e = LeafFragment (|
private alien = document createElement: 'canvas'.
|alien at: 'width' put: e x.
alien at: 'height' put: e y.
(alien at: 'style') at: 'position' put: 'relative')
('as yet unclassified'
context = (
	^Context on: (alien getContext: '2d')
)
createVisual = (
	^alien
)
keyDownAction: onKeyPressed <[:String]> = (
	(* The canvas element itself doesn't seem to get key events. *)
	body
		addEventListener: 'keydown'
		with: [:e | onKeyPressed value: (String fromCharCode: (e at: 'keyCode'))]
)
mouseDownAction: onMouseDown <[:Point]> = (
	alien
		addEventListener: 'mousedown'
		with: [:e | onMouseDown value: (e at: 'offsetX') @ (e at: 'offsetY')].
)
mouseMovedAction: onMouseMoved <[:Point]> = (
	alien
		addEventListener: 'mousemove'
		with: [:e | onMouseMoved value: (e at: 'offsetX') @ (e at: 'offsetY')].
)) : ()
class ColumnComposer definitions: fragments = Composer (|
	definitions = fragments.
|)
('as yet unclassified'
createVisual = (
	| div |
	div:: document createElement: 'div'.
	definitions do: [:fragment |
		| cellDiv |
		cellDiv:: document createElement: 'div'.
		(cellDiv at: 'style') at: 'width' put: '100%'.
		cellDiv appendChild: fragment visual.
		div appendChild: cellDiv].
	^div
)) : ()
class Composer = Fragment ()
() : ()
class Fragment = (| visualX |)
('as yet unclassified'
createVisual = (
	subclassResponsibility
)
hasVisual = (
	^visualX isNil not
)
visual = (
	visualX isNil ifTrue: [visualX:: createVisual].
	^visualX
)) : ()
class HolderComposer withContent: definition = Composer (|
	contentSource ::= definition.
	actualContent
|)
('as yet unclassified'
content ^<Fragment> = (
	actualContent isNil ifTrue: [actualContent:: contentSource value].
	^actualContent
)
createVisual = (
	| div |
	div:: document createElement: 'div'.
	div appendChild: content visual.
	^div
)
refresh = (
	(contentSource isBlock and: [hasVisual])
		ifTrue:
			[ | oldContent newContent |
			oldContent:: actualContent.
			actualContent:: nil.
			newContent:: content.
			visual replaceChild: newContent visual with: oldContent visual]
		ifFalse:
			[actualContent refresh].
)) : ()
class HopscotchWindow openSubject: s = (|
	public currentPresenter ::= s presenter.

	private alien = document createElement: 'div'.
|(alien at: 'style')
		at: 'borderStyle' put: 'solid';
		at: 'borderWidth' put: '4px';
		at: 'borderRadius' put: '5px';
		at: 'borderColor' put: 'black';
		at: 'padding' put: '2px'.
	body appendChild: alien.
	
	alien appendChild: currentPresenter visual)
() : ()
class HyperlinkFragment label: l action: a = LeafFragment (|
	label = l.
	action = a.
|)
('as yet unclassified'
createVisual = (
	^(document createElement: 'a') 
		at: 'href' put: '#';
		appendChild: (document createTextNode: label);
		at: 'onclick' put: [action value. false];
		yourself
)) : ()
class LeafFragment = Fragment ()
() : ()
class Presenter onSubject: aSubject = Fragment (|
subject ::= aSubject.
|)
('as yet unclassified'
alert: text = (
	global alert: text
)
button: label <String> action: block <[]>= (
	^ButtonFragment label: label action: block
)
canvas: extent <Point> = (
	^CanvasFragment withExtent: extent
)
collapsed: collapsed <[Fragment]> expanded: expanded <[Fragment]> ^<Fragment> = (
	^	collapsed: collapsed 
		expanded: expanded
		initiallyExpanded: false
)
collapsed: collapsed <[Fragment]> expanded: expanded <[Fragment]> initiallyExpanded: flag <Boolean>
^<Fragment> = (
	^ToggleComposer
		collapsedDefinition: collapsed
		expandedDefinition: expanded
		initiallyExpanded: flag
)
column: definitions = (
	^ColumnComposer definitions: definitions
)
createVisual = (
	^definition visual
)
definition ^<Fragment> = (
	subclassResponsibility
)
holder: definition <[Fragment]> = (
	^HolderComposer withContent: definition
)
image: image = (
	^StaticImageFragment image: image
)
label: label <String> = (
	^StaticLabelFragment text: label
)
link: label <String> action: block <[]> = (
	^HyperlinkFragment label: label action: block
)
row: definitions = (
	^RowComposer definitions: definitions
)) : ()
class RowComposer definitions: fragments = Composer (|
	definitions = fragments.
|)
('as yet unclassified'
createVisual = (
	| div |
	div:: document createElement: 'div'.
	definitions do: [:fragment |
		| cellDiv |
		cellDiv:: document createElement: 'div'.
		(cellDiv at: 'style') at: 'display' put: 'inline-block'.
		cellDiv appendChild: fragment visual.
		div appendChild: cellDiv].
	^div
)) : ()
class StaticImageFragment image: i = LeafFragment (|
	image = i.
|)
('as yet unclassified'
createVisual = (
	^image cloneNode: false (* Not deep *)
)) : ()
class StaticLabelFragment text: t = LeafFragment (|
	text = t.
|)
('as yet unclassified'
createVisual = (
	^document createTextNode: text
)) : ()
class Subject onModel: aModel = (|
model ::= aModel.
presenterX
|)
('as yet unclassified'
createPresenter = (
	subclassResponsibility
)
presenter = (
	presenterX isNil ifTrue: [presenterX:: createPresenter].
	^presenterX
)) : ()
class ToggleComposer collapsedDefinition: collapsed
 expandedDefinition: expanded
 initiallyExpanded: flag = Composer (|
expandedDefinition = expanded.
collapsedDefinition = collapsed.
isExpanded ::= flag.
expandedPresenter
collapsedPresenter
contentHolder
toggleWidget
|)
('as yet unclassified'
createVisual = (
	| toggleDiv div |
	contentHolder:: document createElement: 'div'.
	
	toggleDiv:: document createElement: 'div'.
	toggleWidget:: document createElement: 'img'.
	toggleWidget at: 'onclick' put: [userToggle].
	toggleDiv appendChild: toggleWidget.
	
	(contentHolder at: 'style') 
		at: 'display' put: 'inline-block'.
	(toggleDiv at: 'style') 
		at: 'display' put: 'inline'.
	toggleWidget at: 'align' put: 'top'.
	
	isExpanded
		ifTrue: [installExpandedPresenter]
		ifFalse: [installCollapsedPresenter].
		
	div:: document createElement: 'div'.
	div appendChild: toggleDiv.
	div appendChild: contentHolder.
	^div
)
installCollapsedPresenter = (
	collapsedPresenter isNil ifTrue: 
		[collapsedPresenter:: collapsedDefinition value].
	installContentVisual: collapsedPresenter visual.
	toggleWidget at: 'src' put: (disclosureClosedImage at: 'src').
)
installContentVisual: newVisual = (
	contentHolder hasChildNodes
		ifTrue:
			[ | oldVisual = contentHolder at: 'firstChild'. |
			contentHolder replaceChild: newVisual with: oldVisual]
		ifFalse: [contentHolder appendChild: newVisual].
)
installExpandedPresenter = (
	expandedPresenter isNil ifTrue:
		[expandedPresenter:: expandedDefinition value].
	installContentVisual: expandedPresenter visual.
	toggleWidget at: 'src' put: (disclosureOpenImage at: 'src').
)
userToggle = (
	isExpanded:: isExpanded not.
	isExpanded
		ifTrue: [installExpandedPresenter]
		ifFalse: [installCollapsedPresenter].
)) : ()) : ()