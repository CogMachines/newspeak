Newspeak3
'Tessi-Tests'
class AccessModifierTesting usingPlatform: platform  <Platform> testFramework: utf <Minitest> = (|
    private TestContext = utf TestContext.

    private ClassMirror = platform mirrors ClassMirror.
    private MessageNotUnderstood = platform blackMarket Exceptions MessageNotUnderstood.
|)
(
class ClassAccessingTests = TestContext ((*	Try to access classes with different access modifiers, but only via public send.
	 Class access is implemented via accessor methods - so fetching a class falls back to finding the appropriate method.
	All kind of different method sends are already tested in the MethodAcessingTests. *)|
	testSubjects = TestSubjects new.
|)
('as yet unclassified'
public testPrivateClassAccess = (
	should: [testSubjects PrivateGuineaPig] signal: MessageNotUnderstood.
)
public testProtectedClassAccess = (
	should: [testSubjects GuineaPig] signal: MessageNotUnderstood.
)
public testPublicClassAccess = (
	assert: testSubjects PublicGuineaPig new ping = 42.
)) : ('as yet unclassified'
TEST_CONTEXT = ())
class MethodAccessingTests = TestContext ((* Test access to methods with different access modifiers *)|
	testSubjects = TestSubjects new.
|)
('implicit receiver send testing'
public testDefaultImplicitReceiverSend = (
	(* send a message via an implicitReceiverSend which goes to a method with default access modifier *)
	assert: testSubjects BabyGuineaPig new Inner new defaultImplicitReceiverSend = 42.
)
public testDefaultImplicitReceiverSendWithInheritance = (
	(* send a message via implicitReceiverSend which goes to a method with default access modifier with inheritance *)
	assert: testSubjects BabyGuineaPig new defaultImplicitReceiverSendWithInheritance = 42.
)
public testPrivateImplicitReceiverSend = (
	(* send a message via implicitReceiverSend which goes to a private method *)
	assert: testSubjects BabyGuineaPig new Inner new privateImplicitReceiverSend = 42.
)
public testPrivateImplicitReceiverSendWithInheritance = (
	(* send a message via implicitReceiverSend which goes to a private method via inheritance *)
	should: [testSubjects BabyGuineaPig new privateImplicitReceiverSendWithInheritance] signal: MessageNotUnderstood.
)
public testProtectedImplicitReceiverSend = (
	(* send a message via implicitReceiverSend which goes to a protected method *)
	assert: testSubjects BabyGuineaPig new Inner new protectedImplicitReceiverSend = 42.
)
public testProtectedImplicitReceiverSendWithInheritance = (
	(* send a message via implicitReceiverSend which goes to a protected method via inheritance *)
	assert: testSubjects BabyGuineaPig new protectedImplicitReceiverSendWithInheritance = 42.
)
public testPublicImplicitReceiverSend = (
	(* send a message via implicitReceiverSend which goes to a public method *)
	assert: testSubjects BabyGuineaPig new Inner new publicImplicitReceiverSend = 42.
)
public testPublicImplicitReceiverSendWithInheritance = (
	(* send a message via implicitReceiverSend which goes to a public method via inheritance *)
	assert: testSubjects BabyGuineaPig new publicImplicitReceiverSendWithInheritance = 42.
)'method override testing'
public testOverriddenMethodInInnerClassPublicSend = (
	should: [testSubjects BabyGuineaPig new overriddenMethod] signal: MessageNotUnderstood.
)
public testOverriddenMethodInInnerClassViaImplicitReceiverSend = (
	assert: testSubjects BabyGuineaPig new callOverriddenMethod = 42.
)
public testOverriddenMethodInSuperClassViaImplicitReceiverSend = (
	assert: testSubjects GuineaPig new FetusGuineaPig new callOverriddenMethod = 42.
)
public testOverriddenMethodInSuperClassViaPublicSend = (
	should: [testSubjects GuineaPig new FetusGuineaPig new overriddenMethod] signal: MessageNotUnderstood.
)'outer send testing'
public testDefaultOuterSend = (
	(* send a message via an outerSend which goes to a method with default access modifier *)
	assert: testSubjects GuineaPig new FetusGuineaPig new outerDefaultMethod = 42.
)
public testDefaultOuterSendWithInheritance = (
	(* send a message via an outerSend which goes to a method with default access modifier via inheritance *)
	assert: testSubjects BabyGuineaPig new Inner new defaultOuterSendWithInheritance = 42.
)
public testPrivateOuterSend = (
	(* send a message via outerSend which goes to a private method *)
	assert: testSubjects GuineaPig new FetusGuineaPig new outerPrivateMethod = 42.
)
public testPrivateOuterSendWithInheritance = (
	(* send a message via outerSend which goes to a private method via inheritance *)
	should: [testSubjects BabyGuineaPig new Inner new privateOuterSendWithInheritance] signal: MessageNotUnderstood.
)
public testProtectedOuterSend = (
	(* send a message via outerSend which goes to a protected method *)
	assert: testSubjects GuineaPig new FetusGuineaPig new outerProtectedMethod = 42.
)
public testProtectedOuterSendWithInheritance = (
	(* send a message via outerSend which goes to a protected method via inheritance *)
	assert: testSubjects BabyGuineaPig new Inner new protectedOuterSendWithInheritance = 42.
)
public testPublicOuterSend = (
	(* send a message via outerSend which goes to a public method *)
	assert: testSubjects GuineaPig new FetusGuineaPig new outerPublicMethod = 42.
)
public testPublicOuterSendWithInheritance = (
	(* send a message via outerSend which goes to a public method via inheritance *)
	assert: testSubjects BabyGuineaPig new Inner new publicOuterSendWithInheritance = 42.
)'public send testing'
public testDefaultPublicSend = (
	(* send a message via publicSend which goes to a method with default access modifier *)
	should: [testSubjects GuineaPig new defaultMethod] signal: MessageNotUnderstood.
)
public testDefaultPublicSendWithInheritance = (
	(* send a message via publicSend which goes to a method with default access modifier in the super chain *)
	should: [testSubjects BabyGuineaPig new defaultMethod] signal: MessageNotUnderstood.
)
public testPrivatePublicSend = (
	(* send a message via publicSend which goes to a private method *)
	should: [testSubjects GuineaPig new privateMethod] signal: MessageNotUnderstood.
)
public testPrivatePublicSendWithInheritance = (
	(* send a message via publicSend which goes to a private method in the super chain *)
	should: [testSubjects BabyGuineaPig new privateMethod] signal: MessageNotUnderstood.
)
public testProtectedPublicSend = (
	(* send a message via publicSend which goes to a protected method *)
	should: [testSubjects GuineaPig new protectedMethod] signal: MessageNotUnderstood.
)
public testProtectedPublicSendWithInheritance = (
	(* send a message via publicSend which goes to a protected method in the super chain *)
	should: [testSubjects BabyGuineaPig new protectedMethod] signal: MessageNotUnderstood.
)
public testPublicPublicSend = (
	(* send a message via publicSend which goes to a public method *)
	assert: testSubjects GuineaPig new publicMethod = 42.
)
public testPublicPublicSendWithInheritance = (
	(* send a message via publicSend which goes to a public method in the super chain *)
	assert: testSubjects BabyGuineaPig new publicMethod = 42.
)'self send testing'
public testDefaultSelfSend = (
	(* send a message via selfSend which goes to a method with default access modifier *)
	assert: testSubjects GuineaPig new selfDefaultMethod = 42.
)
public testDefaultSelfSendWithInheritance = (
	(* send a message via selfSend which goes to a method with default access modifier in the super chain *)
	assert: testSubjects BabyGuineaPig new selfDefaultMethod = 42.
)
public testPrivateSelfSend = (
	(* send a message via selfSend which goes to a private method*)
	assert: testSubjects GuineaPig new selfPrivateMethod = 42.
)
public testPrivateSelfSendwithInheritance = (
	(* send a message via selfSend which goes to a private method in the super chain *)
	should: [ testSubjects BabyGuineaPig new selfPrivateMethod ] signal: MessageNotUnderstood.
)
public testProtectedSelfSend = (
	(* send a message via selfSend which goes to a protected method*)
	assert: testSubjects GuineaPig new selfProtectedMethod = 42.
)
public testProtectedSelfSendWithInheritance = (
	(* send a message via selfSend which goes to a protected method in the super chain *)
	assert: testSubjects BabyGuineaPig new selfProtectedMethod = 42.
)
public testPublicSelfSend = (
	(* send a message via selfSend which goes to a public method*)
	assert: testSubjects BabyGuineaPig new selfPublicMethod = 42.
)
public testPublicSelfSendWithInheritance = (
	(* send a message via selfSend which goes to a public method in the super chain *)
	assert: testSubjects BabyGuineaPig new selfPublicMethod = 42.
)'super send testing'
public testDefaultSuperSend = (
	(* send a message via superSend which goes to a method with default access modifier *)
	assert: testSubjects BabyGuineaPig new superDefaultMethod = 42.
)
public testPrivateSuperSend = (
	(* send a message via superSend which goes to a private method *)
	should: [ testSubjects BabyGuineaPig new superPrivateMethod ] signal: MessageNotUnderstood.
)
public testProtectedSuperSend = (
	(* send a message via superSend which goes to a protected method *)
	assert: testSubjects BabyGuineaPig new superProtectedMethod = 42.
)
public testPublicSuperSend = (
	(* send a message via superSend which goes to a public method *)
	assert: testSubjects BabyGuineaPig new superPublicMethod = 42.
)) : ('as yet unclassified'
TEST_CONTEXT = ())
class SlotAccessingTests = TestContext ((*	Try to access slots with different access modifiers, but only via public send.
	 Slot access is implemented via accessor methods - so fetching a slot falls back to finding the appropriate method.
	All kind of different method sends are already tested in the MethodAcessingTests. *)|
	testSubjects = TestSubjects new.
|)
('as yet unclassified'
public testDefaultSlotAccess = (
	should: [testSubjects GuineaPig new privateSlot] signal: MessageNotUnderstood.
)
public testPrivateSlotAccess = (
	should: [testSubjects GuineaPig new privateSlot] signal: MessageNotUnderstood.
)
public testProtectedSlotAccess = (
	should: [testSubjects GuineaPig new protectedSlot] signal: MessageNotUnderstood.
)
public testPublicSlotAccess = (
	assert: testSubjects GuineaPig new publicSlot = 42.
)) : ('as yet unclassified'
TEST_CONTEXT = ())
class TestSubjects = ((* Holds a bunch of classes which we test against *)||)
(
class BabyGuineaPig = GuineaPig ((* A class to test access to inherited slots/methods *)||)
(
class Inner = ((* A Class to test outerSends in combination with inheritance *)|
				defaultImplicitReceiverTarget		= 42.
	public		publicImplicitReceiverTarget		= 42.
	protected	protectedImplicitReceiverTarget	= 42.
	private		privateImplicitReceiverTarget		= 42.
|)
('as yet unclassified'
public defaultImplicitReceiverSend = (
	^ defaultImplicitReceiverTarget
)
public defaultOuterSendWithInheritance = (
	^ outer BabyGuineaPig defaultMethod
)
public privateImplicitReceiverSend = (
	^ privateImplicitReceiverTarget
)
public privateOuterSendWithInheritance = (
	^ outer BabyGuineaPig privateMethod
)
public protectedImplicitReceiverSend = (
	^ protectedImplicitReceiverTarget
)
public protectedOuterSendWithInheritance = (
	^ outer BabyGuineaPig protectedMethod
)
public publicImplicitReceiverSend = (
	^ publicImplicitReceiverTarget
)
public publicOuterSendWithInheritance = (
	^ outer BabyGuineaPig publicMethod
)) : ()'as yet unclassified'
public callOverriddenMethod = (
	^ overriddenMethod
)
public defaultImplicitReceiverSendWithInheritance = (
	^ defaultMethod
)
private overriddenMethod = (
	(*	This is a private method which overrides a a method with the same signature from a super class.
		The super method should never be executed when called from an instance of this class via implicit receiver send. *)
	^ 42
)
public privateImplicitReceiverSendWithInheritance = (
	^ privateMethod
)
public protectedImplicitReceiverSendWithInheritance = (
	^ protectedMethod
)
public publicImplicitReceiverSendWithInheritance = (
	^ publicMethod
)
public selfDefaultMethod = (
	^ self defaultMethod
)
public selfPrivateMethod = (
	^ self privateMethod
)
public selfProtectedMethod = (
	^ self protectedMethod
)
public selfPublicMethod = (
	^ self publicMethod
)
public superDefaultMethod = (
	^ super defaultMethod
)
public superPrivateMethod = (
	^ super privateMethod
)
public superProtectedMethod = (
	^ super protectedMethod
)
public superPublicMethod = (
	^ super publicMethod
)) : ()
class GuineaPig = ((* A class with a default access modifier. Slots and methods of all sort to be tested against *)|
	public		publicSlot		= 42.
	protected	protectedSlot	= 42.
	private		privateSlot		= 42.
				defaultSlot		= 42.
|)
(
class FetusGuineaPig = ((* A class to test outerSends with different accessModifiers.
    We implement all methods/slots to return `nil` so that we can be certain that an outerSend was used.*)|
	public		publicSlot
	protected	protectedSlot
	private		privateSlot	
				defaultSlot
|)
('as yet unclassified'
public callOverriddenMethod = (
	^ overriddenMethod
)
defaultMethod = (
	^ nil
)
public outerDefaultMethod = (
	^ outer GuineaPig defaultMethod
)
public outerPrivateMethod = (
	^ outer GuineaPig privateMethod
)
public outerProtectedMethod = (
	^ outer GuineaPig protectedMethod
)
public outerPublicMethod = (
	^ outer GuineaPig publicMethod
)
private overriddenMethod = (
	(*	This is a private method which overrides a a method with the same signature from an outer class.
		The outer method should never be executed when called from an instance of this class via implicit receiver send. *)
	^ 42
)
private privateMethod = (
	^ nil
)
protected protectedMethod = (
	^ nil
)
public publicMethod = (
	^ nil
)) : ()'as yet unclassified'
defaultMethod = (
	^ 42
)
public overriddenMethod = (
	(*	This is a public method which is overridden by a subclass and an inner class.
		This should never be executed when called from the sub-/inner class via implicit receiver send. *)
	^ 0
)
private privateMethod = (
	^ 42
)
protected protectedMethod = (
	^ 42
)
public publicMethod = (
	^ 42
)
public selfDefaultMethod = (
	^ self defaultMethod
)
public selfPrivateMethod = (
	^ self privateMethod
)
public selfProtectedMethod = (
	^ self protectedMethod
)) : ()
class PrivateGuineaPig = ()
() : ()
class PublicGuineaPig = ()
('as yet unclassified'
ping = (
	^ 42
)) : ()) : ()) : ()