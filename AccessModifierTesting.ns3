Newspeak3
'AccessModifierTesting'
 class AccessModifierTesting usingPlatform: platform  <Platform> testFramework: utf <Minitest> =  (|
    private TestContext = utf TestContext.

    private ClassMirror = platform mirrors ClassMirror.
    private MessageNotUnderstood = platform blackMarket Exceptions MessageNotUnderstood.
|)
(
class ClassAccessingTests = TestContext ((*	Try to access classes with different access modifiers, but only via public send.
	 Class access is implemented via accessor methods - so fetching a class falls back to finding the appropriate method.
	All kind of different method sends are already tested in the MethodAcessingTests. *)|
	testSubjects = TestSubjects new.
|)
('as yet unclassified'
public testPrivateClassAccess = (
	should: [testSubjects APrivateClass] signal: MessageNotUnderstood.
)
public testProtectedClassAccess = (
	should: [testSubjects AClass] signal: MessageNotUnderstood.
)
public testPublicClassAccess = (
	assert: testSubjects APublicClass new ping = #pong.
)) : ('as yet unclassified'
TEST_CONTEXT = ())
class MethodAccessingTests = TestContext ((* Test access to methods with different access modifiers *)|
	testSubjects = TestSubjects new.
|)
('implicit receiver send testing'
public testDefaultImplicitReceiverSend = (
	(* send a message via an implicitReceiverSend which goes to a method with default access modifier *)
	assert: testSubjects ASubClass new ASubInnerClass new defaultImplicitReceiverSend = #defaultImplicitReceiverTarget.
)
public testDefaultImplicitReceiverSendWithInheritance = (
	(* send a message via implicitReceiverSend which goes to a method with default access modifier with inheritance *)
	assert: testSubjects ASubClass new defaultImplicitReceiverSendWithInheritance = #defaultMethod.
)
public testPrivateImplicitReceiverSend = (
	(* send a message via implicitReceiverSend which goes to a private method *)
	assert: testSubjects ASubClass new ASubInnerClass new privateImplicitReceiverSend = #privateImplicitReceiverTarget.
)
public testPrivateImplicitReceiverSendWithInheritance = (
	(* send a message via implicitReceiverSend which goes to a private method via inheritance *)
	should: [testSubjects ASubClass new privateImplicitReceiverSendWithInheritance] signal: MessageNotUnderstood.
)
public testProtectedImplicitReceiverSend = (
	(* send a message via implicitReceiverSend which goes to a protected method *)
	assert: testSubjects ASubClass new ASubInnerClass new protectedImplicitReceiverSend = #protectedImplicitReceiverTarget.
)
public testProtectedImplicitReceiverSendWithInheritance = (
	(* send a message via implicitReceiverSend which goes to a protected method via inheritance *)
	assert: testSubjects ASubClass new protectedImplicitReceiverSendWithInheritance = #protectedMethod.
)
public testPublicImplicitReceiverSend = (
	(* send a message via implicitReceiverSend which goes to a public method *)
	assert: testSubjects ASubClass new ASubInnerClass new publicImplicitReceiverSend = #publicImplicitReceiverTarget.
)
public testPublicImplicitReceiverSendWithInheritance = (
	(* send a message via implicitReceiverSend which goes to a public method via inheritance *)
	assert: testSubjects ASubClass new publicImplicitReceiverSendWithInheritance = #publicMethod.
)'method override testing'
public testOverriddenMethodInASubInnerClassClassViaImplicitReceiverSend = (
	assert: testSubjects ASubClass new callOverriddenMethod = #privateOverriddenMethod.
)
public testOverriddenMethodInInnerClassPublicSend = (
	should: [testSubjects ASubClass new overriddenMethod] signal: MessageNotUnderstood.
)
public testOverriddenMethodInSuperClassViaImplicitReceiverSend = (
	assert: testSubjects AClass new AInnerClass new callHiddenMethod = #privateHiddenMethod.
)
public testOverriddenMethodInSuperClassViaPublicSend = (
	should: [testSubjects AClass new AInnerClass new hiddenMethod] signal: MessageNotUnderstood.
)'outer send testing'
public testDefaultOuterSend = (
	(* send a message via an outerSend which goes to a method with default access modifier *)
	assert: testSubjects AClass new AInnerClass new outerDefaultMethod = #defaultMethod.
)
public testDefaultOuterSendWithInheritance = (
	(* send a message via an outerSend which goes to a method with default access modifier via inheritance *)
	assert: testSubjects ASubClass new ASubInnerClass new defaultOuterSendWithInheritance = #defaultMethod.
)
public testPrivateOuterSend = (
	(* send a message via outerSend which goes to a private method *)
	assert: testSubjects AClass new AInnerClass new outerPrivateMethod = #privateMethod.
)
public testPrivateOuterSendWithInheritance = (
	(* send a message via outerSend which goes to a private method via inheritance *)
	should: [testSubjects ASubClass new ASubInnerClass new privateOuterSendWithInheritance] signal: MessageNotUnderstood.
)
public testProtectedOuterSend = (
	(* send a message via outerSend which goes to a protected method *)
	assert: testSubjects AClass new AInnerClass new outerProtectedMethod = #protectedMethod.
)
public testProtectedOuterSendWithInheritance = (
	(* send a message via outerSend which goes to a protected method via inheritance *)
	assert: testSubjects ASubClass new ASubInnerClass new protectedOuterSendWithInheritance = #protectedMethod.
)
public testPublicOuterSend = (
	(* send a message via outerSend which goes to a public method *)
	assert: testSubjects AClass new AInnerClass new outerPublicMethod = #publicMethod.
)
public testPublicOuterSendWithInheritance = (
	(* send a message via outerSend which goes to a public method via inheritance *)
	assert: testSubjects ASubClass new ASubInnerClass new publicOuterSendWithInheritance = #publicMethod.
)'public send testing'
public testDefaultPublicSend = (
	(* send a message via publicSend which goes to a method with default access modifier *)
	should: [testSubjects AClass new defaultMethod] signal: MessageNotUnderstood.
)
public testDefaultPublicSendWithInheritance = (
	(* send a message via publicSend which goes to a method with default access modifier in the super chain *)
	should: [testSubjects ASubClass new defaultMethod] signal: MessageNotUnderstood.
)
public testPrivatePublicSend = (
	(* send a message via publicSend which goes to a private method *)
	should: [testSubjects AClass new privateMethod] signal: MessageNotUnderstood.
)
public testPrivatePublicSendWithInheritance = (
	(* send a message via publicSend which goes to a private method in the super chain *)
	should: [testSubjects ASubClass new privateMethod] signal: MessageNotUnderstood.
)
public testProtectedPublicSend = (
	(* send a message via publicSend which goes to a protected method *)
	should: [testSubjects AClass new protectedMethod] signal: MessageNotUnderstood.
)
public testProtectedPublicSendWithInheritance = (
	(* send a message via publicSend which goes to a protected method in the super chain *)
	should: [testSubjects ASubClass new protectedMethod] signal: MessageNotUnderstood.
)
public testPublicPublicSend = (
	(* send a message via publicSend which goes to a public method *)
	assert: testSubjects AClass new publicMethod = #publicMethod.
)
public testPublicPublicSendWithInheritance = (
	(* send a message via publicSend which goes to a public method in the super chain *)
	assert: testSubjects ASubClass new publicMethod = #publicMethod.
)'self send testing'
public testDefaultSelfSend = (
	(* send a message via selfSend which goes to a method with default access modifier *)
	assert: testSubjects AClass new selfDefaultMethod = #defaultMethod.
)
public testDefaultSelfSendWithInheritance = (
	(* send a message via selfSend which goes to a method with default access modifier in the super chain *)
	assert: testSubjects ASubClass new selfDefaultMethod = #defaultMethod.
)
public testPrivateSelfSend = (
	(* send a message via selfSend which goes to a private method*)
	assert: testSubjects AClass new selfPrivateMethod = #privateMethod.
)
public testPrivateSelfSendwithInheritance = (
	(* send a message via selfSend which goes to a private method in the super chain *)
	should: [ testSubjects ASubClass new selfPrivateMethod ] signal: MessageNotUnderstood.
)
public testProtectedSelfSend = (
	(* send a message via selfSend which goes to a protected method*)
	assert: testSubjects AClass new selfProtectedMethod = #protectedMethod.
)
public testProtectedSelfSendWithInheritance = (
	(* send a message via selfSend which goes to a protected method in the super chain *)
	assert: testSubjects ASubClass new selfProtectedMethod = #protectedMethod.
)
public testPublicSelfSend = (
	(* send a message via selfSend which goes to a public method*)
	assert: testSubjects AClass new selfPublicMethod = #publicMethod.
)
public testPublicSelfSendWithInheritance = (
	(* send a message via selfSend which goes to a public method in the super chain *)
	assert: testSubjects ASubClass new selfPublicMethod = #publicMethod.
)'super send testing'
public testDefaultSuperSend = (
	(* send a message via superSend which goes to a method with default access modifier *)
	assert: testSubjects ASubClass new superDefaultMethod = #defaultMethod.
)
public testPrivateSuperSend = (
	(* send a message via superSend which goes to a private method *)
	should: [ testSubjects ASubClass new superPrivateMethod ] signal: MessageNotUnderstood.
)
public testProtectedSuperSend = (
	(* send a message via superSend which goes to a protected method *)
	assert: testSubjects ASubClass new superProtectedMethod = #protectedMethod.
)
public testPublicSuperSend = (
	(* send a message via superSend which goes to a public method *)
	assert: testSubjects ASubClass new superPublicMethod = #publicMethod.
)) : ('as yet unclassified'
TEST_CONTEXT = ())
class SlotAccessingTests = TestContext ((*	Try to access slots with different access modifiers, but only via public send.
	 Slot access is implemented via accessor methods - so fetching a slot falls back to finding the appropriate method.
	All kind of different method sends are already tested in the MethodAcessingTests. *)|
	testSubjects = TestSubjects new.
|)
('as yet unclassified'
public testDefaultSlotAccess = (
	should: [testSubjects AClass new defaultSlot] signal: MessageNotUnderstood.
)
public testPrivateSlotAccess = (
	should: [testSubjects AClass new privateSlot] signal: MessageNotUnderstood.
)
public testProtectedSlotAccess = (
	should: [testSubjects AClass new protectedSlot] signal: MessageNotUnderstood.
)
public testPublicSlotAccess = (
	assert: testSubjects AClass new publicSlot = #publicSlot.
)) : ('as yet unclassified'
TEST_CONTEXT = ())
 class TestSubjects  =  ((* Holds a bunch of classes which we test against *)||)
(
class AClass = ((* A class with a default access modifier. Slots and methods of all sort to be tested against *)|
	public		publicSlot		= #publicSlot.
	protected	protectedSlot	= #protectedSlot.
	private		privateSlot		= #privateSlot.
				defaultSlot		= #defaultSlot.
|)
(
class AInnerClass = (
(* A class to test outerSends with different accessModifiers.*)|
	public		publicSlot		= #innerPublicSlot.
	protected	protectedSlot	= #innerProtectedSlot.
	private		privateSlot		= #innerPrivateSlot.
				defaultSlot		= #innerDefaultSlot.
|)
('as yet unclassified'
public callHiddenMethod = (
	^ hiddenMethod
)
defaultMethod = (
	^ #innerDefaultMethod
)
private hiddenMethod = (
	(*	This is a private method which hides a method with the same signature from an outer class.
		The outer method should never be executed when called from an instance of this class via implicit receiver send. *)
	^ #privateHiddenMethod
)
public outerDefaultMethod = (
	^ outer AClass defaultMethod
)
public outerPrivateMethod = (
	^ outer AClass privateMethod
)
public outerProtectedMethod = (
	^ outer AClass protectedMethod
)
public outerPublicMethod = (
	^ outer AClass publicMethod
)
private privateMethod = (
	^ #innerPrivateMethod
)
protected protectedMethod = (
	^ #innerProtectedMethod
)
public publicMethod = (
	^ #innerPublicMethod
)) : ()'as yet unclassified'
defaultMethod = (
	^ #defaultMethod
)
public hiddenMethod = (
	(*	This is a public method which is hidden by an inner class.
		This should never be executed when called from the inner class via implicit receiver send. *)
	^ #hiddenMethod
)
public overriddenMethod = (
	(*	This is a public method which is overridden by a subclass.
		This should never be executed when called from the subclass via implicit receiver send. *)
	^ #overriddenMethod
)
private privateMethod = (
	^ #privateMethod
)
protected protectedMethod = (
	^ #protectedMethod
)
public publicMethod = (
	^ #publicMethod
)
public selfDefaultMethod = (
	^ self defaultMethod
)
public selfPrivateMethod = (
	^ self privateMethod
)
public selfProtectedMethod = (
	^ self protectedMethod
)
public selfPublicMethod = (
	^ self publicMethod
)) : ()
private class APrivateClass = ()
() : ()
public class APublicClass = ()
('as yet unclassified'
ping = (
	^ #pong
)) : ()
class ASubClass = AClass ((* A class to test access to inherited slots/methods *)||)
(
class ASubInnerClass = ((* A Class to test outerSends in combination with inheritance *)|
				defaultImplicitReceiverTarget		= #defaultImplicitReceiverTarget.
	public		publicImplicitReceiverTarget		= #publicImplicitReceiverTarget.
	protected	protectedImplicitReceiverTarget	= #protectedImplicitReceiverTarget.
	private		privateImplicitReceiverTarget		= #privateImplicitReceiverTarget.
|)
('as yet unclassified'
public defaultImplicitReceiverSend = (
	^ defaultImplicitReceiverTarget
)
public defaultOuterSendWithInheritance = (
	^ outer ASubClass defaultMethod
)
public privateImplicitReceiverSend = (
	^ privateImplicitReceiverTarget
)
public privateOuterSendWithInheritance = (
	^ outer ASubClass privateMethod
)
public protectedImplicitReceiverSend = (
	^ protectedImplicitReceiverTarget
)
public protectedOuterSendWithInheritance = (
	^ outer ASubClass protectedMethod
)
public publicImplicitReceiverSend = (
	^ publicImplicitReceiverTarget
)
public publicOuterSendWithInheritance = (
	^ outer ASubClass publicMethod
)) : ()'as yet unclassified'
public callOverriddenMethod = (
	^ overriddenMethod
)
public defaultImplicitReceiverSendWithInheritance = (
	^ defaultMethod
)
private overriddenMethod = (
	(*	This is a private method which overrides a method with the same signature from a super class.
		The super method should never be executed when called from an instance of this class via implicit receiver send. *)
	^ #privateOverriddenMethod
)
public privateImplicitReceiverSendWithInheritance = (
	^ privateMethod
)
public protectedImplicitReceiverSendWithInheritance = (
	^ protectedMethod
)
public publicImplicitReceiverSendWithInheritance = (
	^ publicMethod
)
public selfDefaultMethod = (
	^ self defaultMethod
)
public selfPrivateMethod = (
	^ self privateMethod
)
public selfProtectedMethod = (
	^ self protectedMethod
)
public selfPublicMethod = (
	^ self publicMethod
)
public superDefaultMethod = (
	^ super defaultMethod
)
public superPrivateMethod = (
	^ super privateMethod
)
public superProtectedMethod = (
	^ super protectedMethod
)
public superPublicMethod = (
	^ super publicMethod
)) : ()) : ()) : ()