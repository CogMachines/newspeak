Newspeak3
'NS2JS'
class NS2JSCompilerTestingConfiguration packageTestsUsing: ns = (
"Configuration to run the compiler tests against the V8 strategy.

Copyright 2012 SAP AG.
Copyright 2012 Google Inc.
   
Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
"|
	CP = ns NS2CombinatorialParsing CombinatorialParsing.
	BCP = ns NS2CombinatorialParsing BlocklessCombinatorialParsing.
	BlocklessCombinatorialParsing = BCP mixin |> CP.
	Newspeak3AST = ns Newspeak3AST.
	Newspeak3Compilation = ns Newspeak3Compilation.
	Newspeak3Grammar = ns Newspeak3Grammar.
	NewspeakMirrors = ns NewspeakMirrors. "Why the Squeak mirrors?"
	Newspeak3Parsing = ns Newspeak3Parsing.
	JavascriptGeneration = ns JavascriptGeneration.
	Newspeak2JavascriptCompilation = ns Newspeak2JavascriptCompilation.
	
	NSCompilerTesting = ns NSCompilerTesting.
	CommandLineV8TestingStrategy = ns CommandLineV8TestingStrategy.

	private Collections = ns NSCollections Collections.
	private NSStreams = ns NSStreams NSStreams.
	private AliensForJavascript = ns AliensForJavascript AliensForJavascript.
	private NewspeakMirrorsForJavascript = ns NewspeakMirrorsForJavascript NewspeakMirrorsForJavascript.
	
	VMMirror = ns VMMirror.
|)
('as yet unclassified'
createCollectionsSource = (

	^ 'Collections usingPlatform: TestingPlatform new'
)
platformSource = (

	^ 'class TestingPlatform = (
	|
		kernel = Kernel new.
		Streams = NSStreams.
		streams = Streams usingPlatform: self.
		mirrors = NewspeakMirrorsForJavascript usingPlatform: self.
		aliens = AliensForJavascript usingPlatform: self.
		blackMarket = BlackMarket new.
	|)(
	
		class Random = ()(
			''public''
			next = (
				^ aliens evalJavascript: ''Math.random()''
			)
		)
	
		class Kernel = ()(
			class Association key: key value: value = (
			|
			key = key.
			value = value.
			|)(
				''comparing''
				= other = (
					^ other key = self key and: [other value = self value])
				''copying''
				copy = (
					^ self class key: key value: value
				)
			)
		)
		class BlackMarket = ( | Collections = The_Collections new.|)(
			class The_Collections = ()(
				class WeakArray = ()())
		)
	)'
)
sourceOf: module = (

	| fileSource mirrorModuleSourceWithNewspeakObject |
	fileSource:: String streamContents: [:s |
		module printClassOn: s].
	mirrorModuleSourceWithNewspeakObject:: fileSource
		copyFrom: (fileSource indexOfSubCollection: 'class')
		to: fileSource size.
	^ mirrorModuleSourceWithNewspeakObject
		copyReplaceAll: '= NewspeakObject'
		with: '= '
)
strategyUsingPlatform: platform = (

	| parserLib ns3grammar astModule parsingModule mirrors compilationModule |
	parserLib:: BlocklessCombinatorialParsing usingLib: platform.
	ns3grammar:: Newspeak3Grammar parserLib: parserLib.
	astModule:: Newspeak3AST usingLib: platform.
	parsingModule:: Newspeak3Parsing usingLib: platform ast: astModule grammar: ns3grammar.
	mirrors:: NewspeakMirrors usingPlatform: platform vmMirror: VMMirror new.
	compilationModule:: Newspeak2JavascriptCompilation
		usingPlatform: platform
		newspeakParser: parsingModule
		javascriptGeneration: (JavascriptGeneration usingPlatform: platform)
		mirrorLib: mirrors.
	^ CommandLineV8TestingStrategy
		platform: platform
		compilerModule: compilationModule
		v8path: '/home/rmacnak/node'
		temporaryDirectoryPath: '/tmp'.
)
testModulesUsingPlatform: platform <Platform> minitest: minitest <Minitest> = (

	| strategy |
	strategy:: strategyUsingPlatform: platform.
	^{NSCompilerTesting 
		usingPlatform: platform
		testingStrategy: strategy
		minitest: minitest}
)) : ()