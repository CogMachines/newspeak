Newspeak3
'NS2Squeak'
class KernelForSqueak usingPlatform: p vmMirror: vmm = (
(* N.B.: Although Newspeak classes and mixins are represented by the Behavior and Mixin classes of this module, not all code here is live in the system.  In particular, true, false and nil are not instances of the True, False and UndefinedObject defined here but still instances of the corresponding Squeak classes.

This code was derived in part by converting the Strongtalk Magnitude, Boolean and  UndefinedObject classes to Newspeak. For those classes, the Sun Microsystems copyright and BSD license below applies.

Copyright 2008 Cadence Design Systems, Inc.
   
Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0

Copyright (c) 1995-2006 Sun Microsystems, Inc. ALL RIGHTS RESERVED.
Copyright 2008-2009 David Pennell, Stephen Pair, Gilad Bracha and other contributors.
Copyright 2011 Ryan Macnak

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, 
 this  list of conditions and the following disclaimer.

* Redistribution in binary form must reproduce the above copyright notice, 
this list of conditions and the following disclaimer in the documentation and/o other materials provided with the distribution.

Neither the name of Sun Microsystems or the names of contributors may 
be used to endorse or promote products derived from this software without 
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS 
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
DAMAGE. *)|
	private Map = p blackMarket Dictionary.
	private WeakSet = p blackMarket WeakSet.
	private IdentitySet = p blackMarket IdentitySet.
	private MethodDictionary = p blackMarket MethodDictionary.
	(* Note we use Squeak's collection classes for serializing/bootstrapping purposes. *)
	private Language = p blackMarket Language. 
	private Smalltalk = p blackMarket Smalltalk.
	
	private vmmirror = vmm.

	private ImplementationBase = p blackMarket ImplementationBase.
	private ArraySlot = Array.
	private ByteArraySlot = ByteArray.
	private CharacterSlot = Character.
	private ErrorSlot = Error.
	private FloatSlot = Float.
	private IntegerSlot = Integer.
	private ObjectSlot = Object.
	private StringSlot = String.
	private SymbolSlot = Symbol.
|)
(
public class AbstractMixin = (
(* A mixin is the difference between a class and its superclass: a set of additional methods, slots and nested class declarations.  Newspeak class declarations implicitly define instance-side and class-side pairs of mixins, and Newspeak classes (other than Top) are all mixin applications.

Most of the methods of this class are to allow mixins to behave like Smalltalk classes when we must deal with Squeak, since Newspeak classes do reside in Squeak's system dictionary, mostly source control (the changes file) and IDE utilities like senders/implementors. These methods are not part of a mature Newspeak system.

In principle, slots common to both instance- and class-side mixins should be defined here. However, for historic reasons the offsets at which the VM expects these slots are not at the beginning of the object, so they are duplicated in InstanceMixin and ClassMixin. *)|
|)
('accessing'
isMixin ^<Boolean> = (
	^true
)
language = (
	^Language newspeak3
)'squeak-interoperability'
acceptsLoggingOfCompilation = (
	^false
)
allSubclassesDo: blk = (
	(* IDE crap *)
)
allSuperclasses = (
	^{}
)
binding = (
	^ nil -> self
)
canUnderstand: sel = (
	^self methodDictionary includesKey: sel
)
classSide = (
	^self theMetaClass
)
compiledMethodAt: selector <Symbol> ^<CompiledMethod> = (
	^ self methodDictionary at: selector
)
compiledMethodAt: selector ifAbsent: aBlock = (
	(* Answer the compiled method associated with the argument, selector (a Symbol), a message selector in the receiver's method dictionary. If the selector is not in the dictionary, return the value of aBlock *)

	^ self methodDict at: selector ifAbsent: aBlock
)
definingClass = (
	^self
)
enclosingClass = (
	#BOGUS. (* Used by syntax highlighter, at least *)
	^self enclosingMixin
)
fileOutChangedMessages: aSet on: aFileStream moveSource: moveSource toFile: fileIndex = (
	(* File a description of the messages of this class that have been 
	changed (i.e., are entered into the argument, aSet) onto aFileStream.  If 
	moveSource, is true, then set the method source pointer to the new file position.
	Note when this method is called with moveSource=true, it is condensing the
	.changes file, and should only write a preamble for every method. *)
	| org |
	(org:: self organization) categories do: 
		[:cat | 
		| sels |
		sels:: (org listAtCategoryNamed: cat) select: [:sel | aSet includes: sel].
		((cat beginsWith: '*') and: [cat endsWith: '-override'])
			ifTrue: [
				sels do:
					[:sel |  self printMethodChunkHistorically: sel on: aFileStream
						moveSource: moveSource toFile: fileIndex]]
			ifFalse: [
				sels do:
					[:sel |  self printMethodChunk: sel withPreamble: true on: aFileStream
						moveSource: moveSource toFile: fileIndex]]]
)
includesBehavior: aClass = (
	^self == aClass or:[(* self inheritsFrom: aClass *) aClass == Object]
)
includesSelector: sel <Symbol> ^<Boolean> = (
	(* Answer whether the message whose selector is the argument is in the 
	method dictionary of the receiver's class. *)

	^ self methodDict includesKey: sel 
)
methodDict = (
	^self methodDictionary
)
mixin = (
	^self
)
moveChangesTo: newFile = (
	(* Used in the process of condensing changes, this message requests that 
	the source code of all methods of the receiver that have been changed 
	should be moved to newFile. *)

	| changes |
	changes:: self methodDict keys select: [:sel |
		(self compiledMethodAt: sel) fileIndex > 1].
	self
		fileOutChangedMessages: changes
		on: newFile
		moveSource: true
		toFile: 2
)
printCategoryChunk: cat on: aFileStream priorMethod: priorMethod = (
	
)
printMethodChunk: selector withPreamble: doPreamble on: outStream
		moveSource: moveSource toFile: fileIndex = (
	(* Copy the source code for the method associated with selector onto the fileStream.  If moveSource true, then also set the source code pointer of the method. *)
	| preamble method oldPos newPos sourceFile endPos |
	doPreamble 
		ifTrue: [preamble:: self name , ' methodsFor: ' ,
					(self organization categoryOfElement: selector) asString printString]
		ifFalse: [preamble:: ''].
	method:: self methodDict at: selector ifAbsent:
		[outStream nextPutAll: selector; cr.
		outStream tab; nextPutAll: '** ERROR!  THIS SCRIPT IS MISSING ** ' translated; cr; cr.
		outStream nextPutAll: '  '.
		^ outStream].

	((method fileIndex = 0
		or: [(SourceFiles at: method fileIndex) == nil])
		or: [(oldPos:: method filePosition) = 0])
		ifTrue:
		[(* The source code is not accessible.  We must decompile... *)
		preamble size > 0 ifTrue: [outStream cr; nextPut: "!"; nextChunkPut: preamble; cr].
		outStream nextChunkPut: method decompileString]
		ifFalse:
		[sourceFile:: SourceFiles at: method fileIndex.
		preamble size > 0
			ifTrue:    (* Copy the preamble *)
				[outStream copyPreamble: preamble from: sourceFile at: oldPos]
			ifFalse:
				[sourceFile position: oldPos].
		(* Copy the method chunk *)
		newPos:: outStream position.
		outStream copyMethodChunkFrom: sourceFile.
		sourceFile skipSeparators.      (* The following chunk may have ]style[ *)
		sourceFile peek == "]" ifTrue: [
			outStream cr; copyMethodChunkFrom: sourceFile].
		moveSource ifTrue:    (* Set the new method source pointer *)
			[endPos:: outStream position.
			method checkOKToAdd: endPos - newPos at: newPos.
			method setSourcePosition: newPos inFile: fileIndex]].
	preamble size > 0 ifTrue: [outStream nextChunkPut: ' '].
	^ outStream cr
)
putClassCommentToCondensedChangesFile: aFileStream = (
)
selectorsAndMethodsDo: selectorAndMethodBlock = (
	(* Evaluate the two argument selectorAndMethodBlock for all the selector/method pairs in my method dictionary. *)

	^ self methodDict keysAndValuesDo: selectorAndMethodBlock
)
superclass = (
	^nil (* IDE crap: allLiteralsOf *)
)
thoroughWhichSelectorsReferTo: literal special: specialFlag byte: specialByte = (
	(* Answer a set of selectors whose methods access the argument as a 
	literal. Dives into the compact literal notation, making it slow but 
	thorough *)

	^self whichSelectorsReferTo: literal special: specialFlag byte: specialByte thorough: true
)
wantsChangeSetLogging = (
	^false
)
whichClassIncludesSelector: aSymbol = (
	(* Answer the class on the receiver's superclass chain where the 
	argument, aSymbol (a message selector), will be found. Answer nil if none found. *)
	(* Rectangle whichClassIncludesSelector: #inspect. *)
	(self includesSelector: aSymbol)
		ifTrue: [^ self].
	superclass == nil
		ifTrue: [^ nil].
	^ superclass whichClassIncludesSelector: aSymbol
)
whichSelectorsReferTo: literal = (
	(* Answer a Set of selectors whose methods access the argument as a
literal. *)

	| special byte |
	special:: Smalltalk hasSpecialSelector: literal ifTrueSetByte: [:b | byte:: b].
	^self whichSelectorsReferTo: literal special: special byte: byte

	(* Rectangle whichSelectorsReferTo: #+. *)
)
whichSelectorsReferTo: literal special: specialFlag byte: specialByte = (
	(* Answer a set of selectors whose methods access the argument as a literal. *)

	^self whichSelectorsReferTo: literal special: specialFlag byte: specialByte thorough: false
)
whichSelectorsReferTo: literal special: specialFlag byte: specialByte thorough: thorough = (
	(* Answer a set of selectors whose methods access the argument as a literal. If thorough is true, then dives into the compact literal notation, making it slow but thorough *)

	| who = IdentitySet new. |
	self selectorsAndMethodsDo: [ :selector :method |
		(((thorough
			ifFalse: [ method hasLiteral: literal ]
			ifTrue: [ method hasLiteralThorough: literal ]) or: [
				specialFlag and: [ method scanFor: specialByte ] ]) and: [
			literal isVariableBinding not or: [
				(* N.B. (method indexOfLiteral: literal) < method numLiterals copes with l;ooking for
				Float bindingOf: #NaN, since (Float bindingOf: #NaN) ~= (Float bindingOf: #NaN). *)
				(method indexOfLiteral: literal) ~= 0] ]) ifTrue: [
			who add: selector ] ].
	^who
)) : ()
public class Behavior = (
(* My instances describe the behavior of other objects. I provide the minimum state necessary for creating and running instances. Most objects are created as instances of the more fully supported subclass, Class, but I am a good starting point for providing instance-specific behavior (as in Metaclass).

At this time, and for the foreseeable future, this class is polluted by a large number of methods necessary to support interaction with the surrounding Squeak Smalltalk implementation. In a pure Newspeak setting, these methods would be handled by mirrors exclusively.  The data in the slots would be private.

Any functionality beyond instantiation, mixin application and answering the class name is a security hole.

*)|
private	superclass <Behavior | nil> (* Must be slot 1; known to VM *)
private	methodDict <MethodDictionary> (* Must be slot 2; known to VM *)
private	format <SmallInteger> (* Must be slot 3; known to VM *)
private	mixinSlot <Mixin | nil> (* Must be slot 4; known to VM *)
private	enclosingObjectSlot <Behavior | nil> (* Must be slot 5; known to VM *)
|)
('accessing'
inheritsFrom: aClass  = (
	(* Answer whether the argument, aClass, is on the receiver's superclass 
	chain. *)

	| aSuperclass |
	aSuperclass:: superclass.
	[aSuperclass == nil]
		whileFalse: 
			[aSuperclass == aClass ifTrue: [^true].
			aSuperclass:: aSuperclass superclass].
	^false
)
language = (
	^mixinSlot language
)
name = (
	^'someBehavior'	
)
simpleName = (
	^mixin simpleName
)'as yet unclassified'
acceptsLoggingOfCompilation = (
	^false
)
asString = (
	^self printString
)
canUnderstand: selector = (
	(* Answer whether the receiver can respond to the message whose selector 
	is the argument. The selector can be in the method dictionary of the 
	receiver's class or any of its superclasses. *)

	(self includesSelector: selector) ifTrue: [^true].
	superclass == nil ifTrue: [^false].
	^superclass canUnderstand: selector
)
classSide = (
	^self theMetaClass
)
enclosingClass = (
	#BOGUS. (* Used by syntax highlighter. *)
	^self enclosingObjectSlot == nil ifFalse: [self enclosingObjectSlot class]
)
instVarNamesAndOffsetsDo: aBinaryBlock = (
	(* This is part of the interface between the compiler and a class's instance or field names.
	 The class should enumerate aBinaryBlock with the instance variable name strings and
	 their integer offsets.  The order is important. Names evaluated later will override the
	 same names occurring earlier. *)

	| superInstSize |
	(superInstSize:: superclass notNil ifTrue: [superclass instSize] ifFalse: [0]) > 0 ifTrue:
		[superclass instVarNamesAndOffsetsDo: aBinaryBlock].
	1 to: self instSize - superInstSize do:
		[:i| aBinaryBlock value: (self instVarNames at: i) value: i + superInstSize]
)
organization = (
	^mixin organization 
)
printOn: stm = (
	stm nextPutAll: self name
)
selectorsAndMethodsDo: selectorAndMethodBlock = (
	(* Evaluate the two argument selectorAndMethodBlock for all the selector/method pairs in my method dictionary. *)

	^ self methodDict keysAndValuesDo: selectorAndMethodBlock
)
wantsChangeSetLogging = (
	^false
)
withAllSuperclasses = (
	(* Answer an OrderedCollection of the receiver and the receiver's
	superclasses. The first element is the receiver,
	followed by its superclass; the last element is Object. *)

	| temp |
	temp:: self allSuperclasses.
	temp addFirst: self.
        ^temp
)'cadence'
addSelector: selector withMethod: compiledMethod = (
	^self basicAddSelector: selector withMethod: compiledMethod
)
allSuperclasses = (
	(* Answer an OrderedCollection of the receiver's and the receiver's
	ancestor's superclasses. The first element is the receiver's immediate
	superclass, followed by its superclass; the last element is Object. *)
	| temp |
	^ superclass == nil
		ifTrue: [ OrderedCollection new]
		ifFalse: [temp:: superclass allSuperclasses asOrderedCollection.
			temp addFirst: superclass.
			temp]
)
basicAddSelector: selector withMethod: compiledMethod = (
	(* Add the message selector with the corresponding compiled method to the
	receiver's method dictionary.
	Do this without sending system change notifications *)

	| oldMethodOrNil |
	oldMethodOrNil:: self lookupSelector: selector.
	self methodDict at: selector put: compiledMethod.
	compiledMethod methodClass: self.
	compiledMethod selector: selector.

	(* Now flush Squeak's method cache, either by selector or by method *)
	oldMethodOrNil == nil ifFalse: [oldMethodOrNil flushCache].
	selector flushCache.
)
compiledMethodAt: selector ifAbsent: aBlock = (
	(* Answer the compiled method associated with the argument, selector (a Symbol), a message selector in the receiver's method dictionary. If the selector is not in the dictionary, return the value of aBlock *)

	^ self methodDict at: selector ifAbsent: aBlock
)
instVarIndexFor: instVarName ifAbsent: aBlock = (
	(* Answer the index of the named instance variable. *)

	^self allInstVarNames indexOf: instVarName ifAbsent: aBlock
)
whichClassIncludesSelector: aSymbol = (
	(* Answer the class on the receiver's superclass chain where the
	argument, aSymbol (a message selector), will be found. Answer nil if none found. *)
	(* Rectangle whichClassIncludesSelector: #inspect. *)
	(self includesSelector: aSymbol)
		ifTrue: [^ self].
	superclass == nil
		ifTrue: [^ nil].
	^ superclass whichClassIncludesSelector: aSymbol
)'comparing'
identityHash = (
	(*
	 Answer a SmallInteger whose value is related to the receiver's identity.
	 Behavior implements identityHash to allow the VM to use an object representation which
	 does not use a direct reference to an object's class.  If the VM is using this implementation
	 then classes are held in a class table and instances refer to their index in the table.  This is
	 more compact because the index field in the object header is less than a full word in size,
	 and this simplifies a just-in-time compiler's in-line cache management because class indices
	 are not updated by the garbage collector.  A class's class table index is its identityHash so
	 that an instance can be created without searching the table for a class's index.  The VM uses
	 this primitive to enter the class into the class table, assigning its identityHash with an as-yet
	 unused class table index. *)

	^vmmirror behaviorHashOf: self
)'initialize-release'
superclass: sc methodDictionary: md format: fmt = (
	superclass: sc.
	methodDict: md.
	format: fmt.
)'instance creation'
basicNew = (
	(* <primitive: 70> *)
	^vmmirror instantiateFixedClass: self
)
basicNew: sizeRequested = (
	(* <primitive: 71> *)
	^vmmirror instantiateVariableClass: self withSize: sizeRequested
)'smalltalk-reflection'
addSelectorSilently: selector withMethod: compiledMethod = (
	(* Add the message selector with the corresponding compiled method to the 
	receiver's method dictionary.
	Do this without sending system change notifications *)

	| oldMethodOrNil |
	oldMethodOrNil:: self lookupSelector: selector.
	self methodDict at: selector put: compiledMethod.
	compiledMethod methodClass: self.
	compiledMethod selector: selector.

	(* Now flush Squeak's method cache, either by selector or by method *)
	oldMethodOrNil == nil ifFalse: [oldMethodOrNil flushCache].
	selector flushCache.
)
allInstVarNames = (
	(* Answer an Array of the names of the receiver's instance variables. The 
	Array ordering is the order in which the variables are stored and 
	accessed by the interpreter. *)

	| vars |
	superclass == nil
		ifTrue: [vars:: self instVarNames copy]	(* Guarantee a copy is answered. *)
		ifFalse: [vars:: superclass allInstVarNames , self instVarNames].
	^vars
)
allInstancesDo: aBlock = (
	(* Evaluate the argument, aBlock, for each of the current instances of the 
	receiver.
	
	Because aBlock might change the class of inst (for example, using become:),
	it is essential to compute next before aBlock value: inst. *)
	| instancesOrNil inst next |
	instancesOrNil:: vmmirror allInstancesOf: self.
	nil == instancesOrNil ifFalse: [instancesOrNil do: aBlock. ^self].
	(* Bulk instances primitive failed, fall back to old iterative primitive. *)
	inst: self someInstance.
	[nil == inst]
		whileFalse:
		[
		next: inst nextInstance.
		aBlock value: inst.
		inst: next]
)
allSubclassesDo: aBlock = (
	(* Evaluate the argument, aBlock, for each of the receiver's subclasses. *)

	self subclassesDo: 
		[:cl | 
		aBlock value: cl.
		cl allSubclassesDo: aBlock]
)
allSubclassesDoGently: block = (
	self allSubclassesDo: block
)
binding = (
	^nil -> self
)
compiledMethodAt: selector <Symbol> ^<CompiledMethod> = (
	^ self methodDictionary at: selector
)
decompilerClass = (
	(* IDE crap for when synthetic methods are confused as Smalltalk methods *)
	^(Smalltalk at: #Compiler) decompilerClass
)
forgetDoIts = (
	(* Nothing to do. Newspeak doits aren't installed in the methodDict *)
)
includesBehavior: aClass = (
	^self == aClass or:[self inheritsFrom: aClass]
)
includesSelector: sel <Symbol> ^<Boolean> = (
	(* Answer whether the message whose selector is the argument is in the 
	method dictionary of the receiver's class. *)

	^ self methodDict includesKey: sel 
)
instVarIndexFor: instVarName = (
	(* Answer the index of the named instance variable. *)

	| index |
	index:: mixin instVarNames == nil
		ifTrue: [0]
		ifFalse: [mixin instVarNames indexOf: instVarName].
	index == 0 ifTrue: 
		[^superclass == nil 
			ifTrue: [0]
			ifFalse: [superclass instVarIndexFor: instVarName]].
	^superclass == nil 	
		ifTrue: [index]
		ifFalse: [index + superclass instSize]
)
instVarNames = (
	^mixin == nil
		ifTrue: [{} (* Top *)] 
		ifFalse: [mixin instVarNames]
)
lookupSelector: selector = (
	(* Look up the given selector in my methodDictionary.
	Return the corresponding method if found.
	Otherwise chase the superclass chain and try again.
	Return nil if no method is found. *)
	| lookupClass |
	lookupClass:: self.
	[lookupClass == nil]
		whileFalse: 
			[(lookupClass includesSelector: selector)
				ifTrue: [^ lookupClass compiledMethodAt: selector].
			lookupClass:: lookupClass superclass].
	^ nil
)
methodDictionary = (
	^methodDict
)
setInstVarNames: instVarArray = (
(*	| required |
	required:: self instSize.
	superclass notNil ifTrue:[required:: required - superclass instSize].
	instVarArray size = required
		ifFalse:[^self error: required printString, ' instvar names are required'].
	instVarArray isEmpty
		ifTrue:[instanceVariables:: nil]
		ifFalse:[instanceVariables:: instVarArray asArray]. *)
)
someInstance = (
	^vmmirror firstInstanceOf: self ifNone: [nil]
)
sourceCodeAt: selector = (
	(* IDE crap for when synthetic methods are confused as Smalltalk methods *)
	^ (self methodDict at: selector) getSourceFor: selector in: self
)
thoroughWhichSelectorsReferTo: literal special: specialFlag byte: specialByte = (
	(* Answer a set of selectors whose methods access the argument as a 
	literal. Dives into the compact literal notation, making it slow but 
	thorough *)

	^self whichSelectorsReferTo: literal special: specialFlag byte: specialByte thorough: true
)
whichSelectorsReferTo: literal special: specialFlag byte: specialByte = (
	(* Answer a set of selectors whose methods access the argument as a literal. *)

	^self whichSelectorsReferTo: literal special: specialFlag byte: specialByte thorough: false
)
whichSelectorsReferTo: literal special: specialFlag byte: specialByte thorough: thorough = (
	(* Answer a set of selectors whose methods access the argument as a literal. If thorough is true, then dives into the compact literal notation, making it slow but thorough *)

	| who = IdentitySet new. |
	self selectorsAndMethodsDo: [ :selector :method |
		(((thorough
			ifFalse: [ method hasLiteral: literal ]
			ifTrue: [ method hasLiteralThorough: literal ]) or: [
				specialFlag and: [ method scanFor: specialByte ] ]) and: [
			literal isVariableBinding not or: [
				(* N.B. (method indexOfLiteral: literal) < method numLiterals copes with l;ooking for
				Float bindingOf: #NaN, since (Float bindingOf: #NaN) ~= (Float bindingOf: #NaN). *)
				(method indexOfLiteral: literal) ~= 0] ]) ifTrue: [
			who add: selector ] ].
	^who
)'testing'
instSize = (
	(* Answer the number of named instance variables
	(as opposed to indexed variables) of the receiver.
	 Above Cog Spur the class format is
		<5 bits inst spec><16 bits inst size> *)
	^format bitAnd: 16rFFFF
)
instSpec = (
	(* Answer the instance specification part of the format that defines what kind of object
	 an instance of the receiver is.  The formats are
		0 = 0 sized objects (UndefinedObject True False et al)
		1 = non-indexable objects with inst vars (Point et al)
		2 = indexable objects with no inst vars (Array et al)
		3 = indexable objects with inst vars (MethodContext AdditionalMethodState et al)
		4 = weak indexable objects with inst vars (WeakArray et al)
		5 = weak non-indexable objects with inst vars (ephemerons) (Ephemeron)
		6 unused, reserved for exotic pointer objects?
		7 reserved by the VM
		8 unused, reserved for exotic non-pointer objects?
		9 (?) 64-bit indexable
		10 - 11 32-bit indexable
		12 - 15 16-bit indexable
		16 - 23 byte indexable
		24 - 31 compiled method *)
	^(format bitShift: -16) bitAnd: 16r1F
)
isBehavior = (
	(* Return true if the receiver is a behavior *)
	^true
)
isBits = (
	(* Answer whether the receiver contains just bits (not pointers).
	 Above Cog Spur the class format is
		<5 bits inst spec><16 bits inst size>
	 where the 5-bit inst spec is
		 0 = 0 sized objects (UndefinedObject True False et al)
		 1 = non-indexable objects with inst vars (Point et al)
		 2 = indexable objects with no inst vars (Array et al)
		 3 = indexable objects with inst vars (MethodContext AdditionalMethodState et al)
		 4 = weak indexable objects with inst vars (WeakArray et al)
		 5 = weak non-indexable objects with inst vars (ephemerons) (Ephemeron)
		 6,7,8 unused
		 9 (?) 64-bit indexable
		 10 - 11 32-bit indexable
		 12 - 15 16-bit indexable
		 16 - 23 byte indexable
		 24 - 31 compiled method *)
	^self instSpec >= 9
)
isBytes = (
	(* Answer whether the receiver has 8-bit instance variables.
	 Above Cog Spur the class format is
		<5 bits inst spec><16 bits inst size>
	 where the 5-bit inst spec is
		 0 = 0 sized objects (UndefinedObject True False et al)
		 1 = non-indexable objects with inst vars (Point et al)
		 2 = indexable objects with no inst vars (Array et al)
		 3 = indexable objects with inst vars (MethodContext AdditionalMethodState et al)
		 4 = weak indexable objects with inst vars (WeakArray et al)
		 5 = weak non-indexable objects with inst vars (ephemerons) (Ephemeron)
		 6,7,8 unused
		 9 (?) 64-bit indexable
		 10 - 11 32-bit indexable
		 12 - 15 16-bit indexable
		 16 - 23 byte indexable
		 24 - 31 compiled method *)
	^self instSpec >= 16
)
isFixed = (
	(* Answer whether the receiver does not have a variable (indexable) part. *)

	^self isVariable not
)
isMeta = (
	^ false
)
isMixinApplication = (
	^true (* All instances of this Behavior class are.  Squeak Behaviors are not. *)
)
isPointers = (
	(* Answer whether the receiver contains just pointers (not bits). *)

	^self isBits not
)
isVariable = (
	(* Answer whether the receiver has indexable variables.
	 Above Cog Spur the class format is
		<5 bits inst spec><16 bits inst size>
	 where the 5-bit inst spec is
		 0 = 0 sized objects (UndefinedObject True False et al)
		 1 = non-indexable objects with inst vars (Point et al)
		 2 = indexable objects with no inst vars (Array et al)
		 3 = indexable objects with inst vars (MethodContext AdditionalMethodState et al)
		 4 = weak indexable objects with inst vars (WeakArray et al)
		 5 = weak non-indexable objects with inst vars (ephemerons) (Ephemeron)
		 6,7,8 unused
		 9 (?) 64-bit indexable
		 10 - 11 32-bit indexable
		 12 - 15 16-bit indexable
		 16 - 23 byte indexable
		 24 - 31 compiled method *)
	| instSpec |
	instSpec:: self instSpec.
	^instSpec >= 2 and: [instSpec ~= 5]
)
isWeak = (
	(* Answer whether the receiver has contains weak references. *)
	^ self instSpec = 4
)
isWords = (
	(* Answer whether the receiver has 16-bit instance variables. *)
	^self isBytes not
)) : ()
public class Boolean = Value (
(* Boolean is an abstract class defining the protocol for logic testing operations and conditional control structures for the logical values represented by the instances of its subclasses True and False. *)self error: 'You may not create any more Booleans - this is two-valued logic')
('as yet unclassified'
asAlien ^ <Integer> = (

	(* Convert to C boolean representation *)

	self subclassResponsibility
)'control'
and: f <[Boolean]>	 ^ <Boolean> = (

	self subclassResponsibility
)
ifFalse: then <[]> ^ <Object> = (

	self subclassResponsibility
)
ifFalse: then <[X def]> ifTrue: else <[Y def]> ^ <X|Y> = (

	self subclassResponsibility
)
ifTrue: then <[]> ^ <Object> = (

	self subclassResponsibility
)
ifTrue: then <[X def]> ifFalse: else <[Y def]> ^ <X|Y> = (

	self subclassResponsibility
)
or: f <[Boolean]>	^ <Boolean> = (

	self subclassResponsibility
)'operations'
& other <Boolean>^ <Boolean> = (

	(* and *)

	self subclassResponsibility
)
not ^ <Boolean> = (


	self subclassResponsibility
)
xor: other <Boolean> ^ <Boolean> = (

	(* exclusive-or *)

	^self ~~ other
)
| other <Boolean> ^ <Boolean> = (

	(* or *)

	self subclassResponsibility
)'testing'
isBoolean ^<Boolean> = (
	^true
)'utility'
onFalse: blk <[Object]> ^ <Boolean> = (

	(* Like onTrue:, but evaluates block when false. *)

	self subclassResponsibility
)
onTrue: blk <[Object]>  ^<Boolean> = (

	(* Like ifTrue: except that the receiver is returned.  This is sometimes useful when an expensive
	  side effect is needed based on the result of (a conditional expression whose
	  result must be returned or preserved), and where factoring out parts of the conditional expression
	  would obfusticate the control flow.   Example:  

				^<john can run a marathon>
						onTrue: [ <john, run marathon> ] 

	  is prettier (some think) than any of the alternatives:

		1) 	^<john can run a marathon>
						ifTrue: [ <john, run marathon>.
									  true ]
						ifFalse: [ false ]

		2)		| result <Boolean> |
				result :=  <john can run a marathon>.
				result
					ifTrue: [ <john, run marathon> ].
				^result

		3)		^<john can run a marathon> and: [ <john, run marathon>.  true ]
	  *)

	self subclassResponsibility
)) : ()
public class Class = Behavior (
(* My instances describe the representation and behavior of objects.  Except for Top, my instances are the result of mixin applications.

The slot 'subclasses' is a redundant structure.  It is never used during execution, but is used by the development system to simplify or speed certain operations.

See comments in Behavior regarding problems wrt IDE support and security.
*)|
 private subclassesSlot <WeakSet>
 private nameSlot <Symbol> (* N.B.: This must not be called name.  Otherwise its setter will conflict classes such as CLibrary that have #name: as their primary factory. *)
|)
('as yet unclassified'
addSubclass: subclass = (
	self addWeakSubclass: subclass.
)
addWeakSubclass: subclass = (

	self assert: [subclass superclass == self] message: 'Not my subclass!'.

	subclassesSlot == nil ifTrue: [subclassesSlot: WeakSet new].
	
	subclassesSlot add: subclass.
)
basicCategory = (
	^mixin category
)
category = (
	^mixin category
)
category: newCategory = (
	#BOGUS.
	#WARN.
)
isMeta = (
	^false
)
mixin = (
	^self mixinSlot
)
mixinApply: superklass = (
	| application |
	application:: self mixin apply: superklass.
	application setEnclosingObjectSlot: self enclosingObjectSlot.
	application class setEnclosingObjectSlot: self class enclosingObjectSlot.
	^application
)
name = (
	^self nameSlot
)
removeSubclass: aSubclass = (
	(* If the argument, aSubclass, is one of the receiver's subclasses, remove it. *)

	subclassesSlot == nil ifFalse: [
		subclassesSlot remove: aSubclass ifAbsent: []
	].
)
setEnclosingObjectSlot: e = (
	enclosingObjectSlot: e.
	self class setEnclosingObjectSlot: e.
)
setName: n = (
	self nameSlot: n
)
subclasses= (
	^subclassesSlot ifNil: [{}]
)
subclassesDo: aBlock = (
	(* Evaluate the argument, aBlock, for each of the receiver's immediate subclasses. *)

	subclasses == nil  ifFalse: [ subclasses do: aBlock ].
)
theMetaClass = (
	^self class
)
theNonMetaClass = (
	^self
)'cadence'
fuelAccept: aVisitor = (
	aVisitor visitClassOrTrait: self
)) : ()
public class ClassMixin = AbstractMixin (
(* A class-side mixin is the difference between a metaclass and Class. (In Newspeak metaclasses are direct subclasses of Class, unlike Smalltalk where they are subclasses of the class's superclass's metaclass.) Note that class-side mixins can only introduce additional methods, unlike instance-side mixins which can introduce slots, methods and nested classes. Because of this, module definitions (top-level classes) are always stateless.
*)|
	organization <ClassOrganizer>
	methodDictionary <MethodDictionary> (* must be slot 2; known to VM *)
	instanceMixin <InstanceMixin>
	enclosingMixin <InstanceMixin> (* must be slot 4; known to VM *)
|)
('accessing'
isMeta ^<Boolean> = (
	^true
)
name = (
	^instanceMixin name , ' class'
)'as yet unclassified'
applications = (
	^{}
)
printOn: stm = (
	stm nextPutAll: name , ' mixin'
)
simpleName = (
	^instanceMixin simpleName, ' class'
)
slots = (
	^Array new
)'squeak-interoperability'
category = (
	^instanceMixin category
)
instVarNames = (
	^Array new
)
theMetaClass = (
	^self
)
theNonMetaClass = (
	^instanceMixin
)) : ()
public class False = Boolean ((* False defines the behavior of its single instance, false -- logical negation. Notice how the truth-value checks become direct message sends, without the need for explicit testing.

Be aware however that most of these methods are not sent as real messages in normal use. Most are inline coded by the compiler as test and jump bytecodes - avoiding the overhead of the full message sends. So simply redefining these methods here will have no effect. *))
('as yet unclassified'
asAlien ^ <Integer> = (
	^0
)'control'
and: f <[Boolean]> ^ <Boolean> = (
	^false
)
ifFalse: then <[]> ^ <Object> = (
	^then value
)
ifFalse: then <[X def]> ifTrue: else <[Y def]> ^ <X|Y> = (
	^then value
)
ifTrue: then <[]> ^ <Object> = (
	^nil
)
ifTrue: then <[X def]> ifFalse: else <[Y def]> ^ <X | Y> = (
	^else value
)
or: f <[Boolean]> ^ <Boolean> = (
	^f value
)
|| f <[Boolean]> ^ <Boolean> = (
	^f value
)'operations'
& other <Boolean> ^ <Boolean> = (
	^false
)
not ^ <Boolean> = (
	^true
)
| other <Boolean> ^ <Boolean> = (
	^other
)'printing'
printOn: strm <CharOutputStream>
 = (
	strm nextPutAll: 'false'
)'utility'
onFalse: blk <[Object]> ^ <Boolean> = (
	blk value.
	^self
)
onTrue: blk <[Object]> ^ <Boolean> = (
	^self
)) : ()
public class Future computing: block <[E]> = (
(* A deferred computation. Used for simultaneous slots. It evalutes its closure in response to nearly every message.

The future used for actors/asynchrony is a 'push future'. The future used for simultaneous slots/laziness is a 'pull future'.

TODO: Forward every message except isFuture/isResolved/resolve. Make the IDE not send messages to unresolved futures in inspectors and debuggers.

TODO: Deal for more compilated simultaneous slot cases by introducing some notion of a resolution group and doing increment resolution in breadth-first order.

TODO: Rename to something like Deferred? Even if actor futures and lazy futures are duals, that doesn't mean they have equal claims to the name 'future'. Push collections are called 'observables', not 'collections'. *)|
	private blockOrValue000 <[E] | E> ::= block. (* Can we get rid of the 000 terminated names please *)
	private state000 <Symbol> ::= #unresolved.
|)
('as yet unclassified'
Future = (	
	(* When access control is enforced the inherited method won't be activated by other objects sending #Future and this stub can be removed. *)	
	^resolve Future
)
protected doesNotUnderstand: message = (
	^message sendTo: self resolve
)
public isFuture ^<Boolean> = (
	^true
)
resolve = (
	state000 = #resolving ifTrue: [
		Error signal: 'Divergent evalutation of ', blockOrValue000 printString].
	state000 = #unresolved ifTrue: [
		state000: #resolving.
		blockOrValue000: blockOrValue000 value.
		[blockOrValue000 isFuture] whileTrue:
			[blockOrValue000: blockOrValue000 resolve].
		state000: #resolved.
	].
	^blockOrValue000
)
public yourself = (
	(* See InstanceMixin>>apply:withName: *)
	^self resolve
)) : ('as yet unclassified'
computation: block = (
	^self computing: block
))
public class InstanceMixin = AbstractMixin (
(* An instance-side mixin is the difference between a (non-meta) class and its superclass: a set of additional methods, slots and nested class declarations.

All of my members except methods to invoke mixin application should be hidden, and be only accessible by mirrors. *)|
name <Symbol>
methodDictionary <MethodDictionary> (* must be slot 2; known to VM *)
slots <List[{Symbol.Boolean.Symbol}]> (* name, mutable?, accessModifier *)
enclosingMixin <InstanceMixin | nil> (* must be slot 4; known to VM *)
nestedMixins <Map[Symbol, InstanceMixin]> = Map new. (* must be called nestedMixins; known to compiler *)
applications <WeakSet> = WeakSet new.
classMixin <ClassMixin>
cachedHeaderSource <String>
cachedConstructorName <Symbol>
category <Symbol> ::= #Uncategorized.
organization <ClassOrganizer> (* Yuck *)
|)
('accessing'
apply: superklass <Class> ^ <Class> = (
	^self |> superklass
)
apply: superclassArg <Class> withName: n <String> ^ <Class> = (

	| superClass <Class> invocation <Class> offset <Integer>  |

	superClass:: superclassArg yourself. (* Extract real object from potential Delay *)
      superClass isNil ifTrue:[superClass:: Object].
	#BOGUS yourself. (* Use named supplied as arg *)
	invocation:: self invokeWithSuperclass: superClass withName: n.
	(* invocation basicCategory: #'Irrelevant-Mixin-applications'. *)

	offset:: superClass instSize.
	offset ~= 0 ifTrue:[self generateAccessorsFor: invocation offset: offset].

	applications add: invocation.
	^invocation
)
isMeta ^<Boolean> = (
	^false
)'as yet unclassified'
accessModifier ^ <Symbol>= (
	(*	We need the accessModifier for ClassDeclarationBuilders and for the printClassOn: method.
		Finding the accessModifier is hell and a mixin shoud not not be able to give that information.
		Mixins, by definition, do not know with which accessModifier they are applied with. So, we ask
		the enclosing mixin instead and assume that top-level mixins can only be applied as public.
		This can lead to erroneous accessModifiers if the mixin is not applied at the same place
		where it is defined.
		Unfortunately, we have to give an accessModifier here, because ClassDeclarationBuilders are
		constructed from a mixin and the printClassOn: method is implemented here. *)
	^ isTopLevel ifTrue: [
		(* if there is no enclosing mixin, assume that we are #public *)
		#public.
	] ifFalse: [
		(*	Search the enclosing mixin for a method (accessor) with the simple name of this mixin. 
			The accessModifier of that method is what we assume to be the accessModifier of this mixin. *)
		(enclosingMixin methodDictionary at: simpleName
		ifAbsent: [Error signal: 'Mixin can not be found in its parent mixin' ]) accessModifier.
	]
)
accessModifierIfNecessary = (
	^ ((accessModifier = #public and: isTopLevel) or: (accessModifier = #protected and: isTopLevel not))
		ifTrue: [ '' ]
		ifFalse: [ accessModifier, ' ' ]
)
apply: superklass <Class> index: index <Integer> ^ <Class> = (
	^renameMixinInitializerOf: (apply: superklass) index: index
)
apply: superklass <Class> withName: n <String>  index: index <Integer> ^ <Class> = (
	^renameMixinInitializerOf: (apply: superklass withName: n) index: index
)
constructorName = (
	^cachedConstructorName
)
definingModule = (
	^enclosingMixin isNil ifTrue: [self] ifFalse: [enclosingMixin definingModule]
)
hasBody ^ <Boolean> = (
      #BOGUS yourself.
	^cachedHeaderSource last ~= "."
)
private isMixedInto: klass = (
	| k ::= klass. |
	[nil == k] whileFalse:
		[self == k mixin ifTrue: [^true].
		k:: k superclass].
	^false
)
isTopLevel = (
	^ enclosingMixin isNil
)
languageData = (
	^cachedHeaderSource
)
nestedClasses = (
	^nestedMixins values
)
printClass = (
(* print the source for this class in the top level syntax *)

| stream |
stream:: self language createOutputStreamForClassNamed: self name.
self printTopClassOn: stream.
stream close.
^stream fullName
)
printClassOn: stm = (

	stm nextPutAll: accessModifierIfNecessary.
	stm nextPutAll: 'class '.
	stm nextPutAll: cachedHeaderSource.

	stm cr; nextPut: "(".
	(nestedMixins values asSortedCollection:
			[:nm1 :nm2| nm1 name <= nm2 name]) do:
		[:ea | stm cr. ea printClassOn: stm].
	writeOrganizationOf: self on: stm.
	stm nextPut: ")".

	stm nextPutAll: ' : ('; cr.
	writeOrganizationOf: classMixin on: stm.
	stm nextPut: ")".
)
printOn: stm = (
	stm nextPutAll: name , ' mixin'
)
printTopClassOn: stm = (

	stm nextPutAll: 'Newspeak3'; cr; nextPutAll: category asString printString; cr.

	stm nextPutAll: 'class '.
	stm nextPutAll: cachedHeaderSource.
      hasBody ifFalse:[^self].
	stm cr; nextPut: "(".
	(nestedMixins values asSortedCollection:
			[:nm1 :nm2| nm1 name <= nm2 name]) do:
		[:ea | stm cr. ea printClassOn: stm].
	writeOrganizationOf: self on: stm.
	stm nextPut: ")".

	stm nextPutAll: ' : ('; cr.
	writeOrganizationOf: classMixin on: stm.
	stm nextPut: ")".
)
private renameMixinInitializerOf: superklass <Class> index: index <Integer> ^ <Class> = (
(*
Many mixin applications need to have the instance initializer of the mixin renamed so that it never conflicts with other mixin applications in the same superclass chain. This routine takes an index that is unique in the superclass chain. The index N is then used to rename the initializer from the form mixinInitializer`foo to mixinInitializer`foo`N.
*)
	|  
	mtds <MethodDictionary> = superklass methodDictionary. 
	initName <Symbol> =  ('mixinInitializer`', constructorName) asSymbol.
	newInitName = ('mixinInitializer`',  index printString, '`', constructorName) asSymbol.
	factory <CompiledMethod> = mtds at: initName.
	|
	mtds removeKey: initName.
	mtds removeKey: ('initializer`', constructorName) asSymbol.
	(* add renamed instance initializer *)
	mtds at:  newInitName put: factory.  (* copy factory so name matches? *)
	^superklass.
)
simpleName = (
	^(name subStrings: {"`"}) last asSymbol
)
spurFormat: nInstVars <Integer> variable: isVar <Boolean> words: isWords <Boolean> pointers: isPointers <Boolean> weak: isWeak <Boolean> ^ <Integer> = (
	(* This method was derived from the same method in ClassBuilder.

	Answer the instance specification part of the format that defines what kind of object
	 an instance of the receiver is.  The formats are
			0	= 0 sized objects (UndefinedObject True False et al)
			1	= non-indexable objects with inst vars (Point et al)
			2	= indexable objects with no inst vars (Array et al)
			3	= indexable objects with inst vars (MethodContext AdditionalMethodState et al)
			4	= weak indexable objects with inst vars (WeakArray et al)
			5	= weak non-indexable objects with inst vars (ephemerons) (Ephemeron)
			6	= unused
			7	= immediates (SmallInteger, Character)
			8	= unused
			9	= 64-bit indexable
		10-11	= 32-bit indexable (Bitmap)
		12-15	= 16-bit indexable
		16-23	= 8-bit indexable
		24-31	= compiled methods (CompiledMethod)
	*)
	| instSpec |
	instSpec:: isWeak
					ifTrue: [4]
					ifFalse:
						[isPointers
							ifTrue:
								[isVar
									ifTrue: [nInstVars > 0 ifTrue: [3] ifFalse: [2]]
									ifFalse: [nInstVars > 0 ifTrue: [1] ifFalse: [0]]]
							ifFalse: [isWords ifTrue: [12] ifFalse: [16]]].
	^(instSpec bitShift: 16) + nInstVars
)
squeakV3format: nInstVars <Integer> variable: isVar <Boolean> words: isWords <Boolean> pointers: isPointers <Boolean> weak: isWeak <Boolean> ^ <Integer> = (
	(* This method was derived from the same method in ClassBuilder, and
	somwewhat cleaned up
	
	Compute the format for the given instance specification.
	nInstVars - the number of named inst vars (e.g. Point's x,y => nInstVars = 2).
	isVar  true if indexable inst vars.
	isWords  true for bit objects not organized as bytes (Float wpould you believe)
	isPointers  true for pointer objects (except CompiledMethod) false otherwise
	isWeak, true if indexable, named weak collection
	*)
	| cClass instSpec sizeHiBits fmt |
(*	NOTE: This code supports the backward-compatible extension to 8 bits of instSize. The format word is...
		<2 bits=instSize//64><5 bits=cClass><4 bits=instSpec><6 bits=instSize\\64><1 bit=0> *)
	sizeHiBits:: (nInstVars+1) // 64.
	cClass:: 0.  (* for now *)
	instSpec:: isWeak
		ifTrue:[4]
		ifFalse:[isPointers
				ifTrue: [isVar
						ifTrue: [nInstVars>0 ifTrue: [3] ifFalse: [2]]
						ifFalse: [nInstVars>0 ifTrue: [1] ifFalse: [0]]]
				ifFalse: [isWords ifTrue: [6] ifFalse: [8]]].
	fmt:: sizeHiBits.
	fmt:: (fmt bitShift: 5) + cClass.
	fmt:: (fmt bitShift: 4) + instSpec.
	fmt:: (fmt bitShift: 6) + ((nInstVars+1)\\64).  (* +1 since prim size field includes header *)
	fmt:: (fmt bitShift: 1). (* This shift plus integer bit lets wordSize work like byteSize *)
	^fmt
)
traitComposition = (
	^{}
)
writeOrganizationOf: mxn on: aStream = (
	| org <ClassOrganizer> |
	org:: mxn organization.

	(org elementArray isEmpty and:
		[ (org categories copyWithout: org class nullCategory) isEmpty]) ifTrue: [^self].

	org categories asSortedCollection do:
		[ :cat | | sels |
		aStream  nextPut:"'"; nextPutAll: cat;  nextPut:"'"; cr.
		sels:: org listAtCategoryNamed: cat.
		sels asSortedCollection do: [ :sel | aStream nextPutAll: (mxn compiledMethodAt: sel) getSource; cr; cr ]]
)
|> superclassArg <Class> ^<Class> = (
	| superklass = superclassArg yourself. |
	(* Extract real object from potential Delay *)
	^self apply: superklass withName: (self simpleName, ' mixin |>', superklass name)
)'private'
format: nInstVars <Integer> variable: isVar <Boolean> words: isWords <Boolean> pointers: isPointers <Boolean> weak: isWeak <Boolean> ^ <Integer> = (
	(* 
	Compute the format for the given instance specification.
	nInstVars - the number of named inst vars (e.g. Point's x,y => nInstVars = 2).
	isVar  true if indexable inst vars.
	isWords  true for bit objects not organized as bytes (Float would you believe)
	isPointers  true for pointer objects (except CompiledMethod) false otherwise
	isWeak, true if indexable, named weak collection.

	Switch-hit depending on the underlying VM implementation.
	*)
	^vmmirror isSpur
		ifTrue: [self spurFormat: nInstVars variable: isVar words: isWords pointers: isPointers weak: isWeak]
		ifFalse: [self squeakV3format: nInstVars variable: isVar words: isWords pointers: isPointers weak: isWeak]
)
generateAccessorsFor: invocation <Class> offset: offset <Integer> = (
	| ivs <Collection[String]> mtds <MethodDictionary> |
	ivs:: invocation instVarNames.
	mtds:: invocation methodDict.
	(offset +1  to: offset + ivs size) with: slots do:[:n <Integer> :slot <{Name.Mutable.AccessModifier}> |
		mtds at: slot first asSymbol put: (CompiledMethod newGetterForSlot: n accessModifier: slot last).
		slot second (* if slot is mutable *)
			ifTrue: [mtds at: (slot first, ':') asSymbol put: (CompiledMethod newSetterForSlot: n accessModifier: slot last)]
			ifFalse: [mtds at: ('setOnce`', slot first, ':') asSymbol put: (CompiledMethod newSetterForSlot: n accessModifier: slot last)].
	]
)
invokeWithSuperclass: superClass <Class> withName: n  <String> ^<Class> = (

	| fmt <Integer> newMeta <Metaclass> newClass <Class> env |

	(isMixedInto: superClass) ifTrue: [Error signal: 'The current implementation cannot handle repeated applications of a mixin to the same inheritance chain (', name, ').'].

	newMeta:: Metaclass new.
	newMeta 
		superclass: Class
		methodDictionary: classMixin methodDictionary copy
		format: Class format.

	(* newMeta setInstVarNames: {}. *)
	newClass:: newMeta new.
	fmt:: self pointerFormatNumberOfInstVars: superClass instSize + slots size .
	newClass
		superclass: superClass
		methodDictionary: methodDictionary copy
		format: fmt.
	newClass setInstVarNames: instVarNames.
	newClass setName: n.
	
	newClass mixinSlot: self.
	newMeta mixinSlot: self classMixin.
	
	applications add: newClass.
	superClass addWeakSubclass: newClass.
	
	^newClass
)
pointerFormatNumberOfInstVars: n <Integer> ^ <Integer> = (
	^self format: n variable: false words: false pointers: true weak: false
)'squeak-interoperability'
addSelector: selector withMethod: compiledMethod = (
	^self basicAddSelector: selector withMethod: compiledMethod
)
basicAddSelector: selector withMethod: compiledMethod = (
	(* Add the message selector with the corresponding compiled method to the 
	receiver's method dictionary.
	Do this without sending system change notifications *)

	| oldMethodOrNil |
	oldMethodOrNil:: self lookupSelector: selector.
	self methodDict at: selector put: compiledMethod.
	compiledMethod methodClass: self.
	compiledMethod selector: selector.

	(* Now flush Squeak's method cache, either by selector or by method *)
	oldMethodOrNil == nil ifFalse: [oldMethodOrNil flushCache].
	selector flushCache.
)
classVarNames = (
	^{}
)
instVarAt: n = (
	n = 14 ifTrue: [^self]. (* compiler compatability *)
	^super instVarAt: n
)
instVarNames = (
	^(slots collect: [:pair | pair first]) asArray
)
lookupSelector: selector = (
	(* Look up the given selector in my methodDictionary.
	Return the corresponding method if found.
	Otherwise chase the superclass chain and try again.
	Return nil if no method is found. *)
	| lookupClass |
	lookupClass:: self.
	[lookupClass == nil]
		whileFalse: 
			[(lookupClass includesSelector: selector)
				ifTrue: [^ lookupClass compiledMethodAt: selector].
			lookupClass:: lookupClass superclass].
	^ nil
)
sharedPools = (
	^{}
)
superclass = (
	^Object
)
theMetaClass = (
	^classMixin
)
theNonMetaClass = (
	^self
)) : ()
public class Magnitude = (
(* A Magnitude[M] is an object that has a linear relationship with objects of type M, such
that they can be compared using the relational operations <,>,<=,>=.

%note: The derived operations are carefully defined to use <
    and not = for the following reasons:
        - speed
        - use of = may be bad for subclasses with a problematic definition of =,
          such as floating point numbers.
*)|
|)
('comparing'
< other <M> ^<Boolean> = (


	self subclassResponsibility
)
<= other <M> ^<Boolean> = (


	(* %todo: when using inherited types, use the original definition:
		^(other < self) not
	*)
	^self < other or: [ self = other ]
)
> other <M> ^<Boolean> = (


	(* %todo: for inherited types use:
		^other < self
	*)
	^(self <= other) not
)
>= other <M> ^<Boolean> = (


	^(self < other) not
)
between: min <M> and: max <M> ^<Boolean> = (

	(* test whether the receiver is in the range min -> max, inclusive *)

	(* test the max case first since end of range overflow is generally more common *)
	^self <= max and: [ self >= min ]
)
compare: other <M>  ^<Int> = (

	(* Returns -1 if self < other, 0 if self = other, or 1 if self > other *)

	^self < other
		ifTrue: [ -1 ]
		ifFalse: [ self > other
							ifTrue: [ 1 ] ifFalse: [ 0 ]  ]
)
max: other <ARG> ^<Self | ARG> = (
		(* {where X is arg 1 of #< message of receiverType;
			where ARG <X> is arg 1} *)

	(* The guaranteed is safe because of the inference clause *)
	^self > ((* guaranteed <M>:\ *) other)
		ifTrue: [ self ]
		ifFalse: [ other ]
)
min: other <ARG> ^<Self | ARG> = (
		(* {where X is arg 1 of #< message of receiverType;
			where ARG <X> is arg 1} *)

	(* The guaranteed is safe because of the inference clause *)
	^self < ((* guaranteed <M> *) other)
		ifTrue: [ self ]
		ifFalse: [ other ]
)) : ('utility'
defaultSort ^<[:X:M | Boolean]> = (
	(* {where X is returnType of #new message of receiverType} *)
	(* return a sort predicate suitable for a sorted collection of M *)

	(* The guarantee is safe because of the inference clause *)
	^(* guaranteed <[X,M,^Boolean]> *)
		[ :m1 <Magnitude[M]> :m2 <M> | m1 <= m2 ]
))
public class Metaclass = Behavior (
(* Each class is an instance of a unique metaclass. All metaclasses are instances
of Metaclass, and are direct subclasses of Class. This differs from Smalltalk, where the metaclass would be a subclass of the metaclass of the class's superclass.
See comments in Behavior regarding problems wrt IDE suppport and security.
*)|
	private thisClass <Instance>
|)
('as yet unclassified'
category = (
	^theNonMetaClass category
)
isMeta = (
	^true
)
mixin ^<ClassMixin> = (
	^self mixinSlot
)
name = (
	thisClass == nil
		ifTrue: [^'a Metaclass']
		ifFalse: [^thisClass name , ' class']
)
new = (
	(* The receiver can only have one instance. Create it or complain that
	one already exists. *)

	thisClass class == self
		ifTrue: [self error: 'A Metaclass should only have one instance!']
		ifFalse: [thisClass: self basicNew. ^thisClass]
)
removeSubclass: aClass = (
	(* Do nothing. *)
)
subclassesDo: aBlock = (
	(* Evaluate aBlock for each of the receiver's immediate subclasses. *)
	thisClass subclassesDo:[:aSubclass|
		(* The following test is for Class class which has to exclude
		the Metaclasses being subclasses of Class. *)
		aSubclass isMeta ifFalse:[aBlock value: aSubclass class]].
)
theMetaClass = (
	^self
)
theNonMetaClass = (
	^thisClass
)'cadence'
fuelAccept: aVisitor = (
	aVisitor visitMetaclass: self
)'restricted'
setEnclosingObjectSlot: e = (
	enclosingObjectSlot: e
)) : ()
public class Object = ImplementationBase (
(* Object is the root of the object hierarchy in the Newspeak programming language, and provides behavior common to all objects.  The superclass of Object is the empty class Top.  The purpose of Top is to allow all code to live in mixins.

For each protocol P in the system, this class provides a method 'isP' which answers true if and only if the receiver is an instance of a class which implements the protocol P.

Unlike other systems inspired by Smalltalk, the number of methods in this class is deliberately kept to a minimum. Behavior should only be provided by this class if it should be considered part of the core set of features available to *all* Newspeak programmers.

The security model of the Newspeak programming language is based on capabilities and it is essential that capabilities cannot leak through behavior provided by this class. For example, this class provides no mechanism for accessing instance variables of its instances. Instead such capabilities are provided to the debugger and other tools through mirror based reflection modules.

Object has no instance variables, nor should any be added. This is due to several classes of objects that inherit from Object that have special implementations (SmallInteger and UndefinedObject for example) or the VM knows about and depends on the structure and layout of certain standard classes. *)|
|)
('accessing'
protected class = (
	(* Answers the class of the receiver. *)
	(* :openquestion: Should this method be protected or public? If this method is public, code wishing to separate the authority granted by an object from the authority granted by its class must explicitly override it with a private or protected version. If this method is protected, code wishing to use patterns like Collection>>species must explicit override it with a public version. *)
	^vmmirror classOf: self
)
public yourself = (
	(* Answers the receiver. *)
	^self
)'as yet unclassified'
protected cloneX = (
	#BOGUS. (* It appears the JIT VM is not happy the standard VMMirror trick, so for now we inherit the primitive from ImplementationBase. *)
	^vmmirror clone: self
)
public isNil ^<Boolean> = (
	(* Note this method is used as a template for the generated isFoo ^false methods, so do not remove it. *)
	^false
)
protected subclassResponsibility = (
	self Error signal: 'My subclass should have overridden ', thisContext sender selector printString
)'comparing'
public = other <Object> ^<Boolean> = (
	(* Answers whether the receiver is considered equal to 'other'.
	May be overridden by subclasses, and should be overridden if the method 'hash' is overridden.
	This method must implement an equivalence relation, that is, the following must hold:
	* x = x evaluates to true
	* if x = y evaluates to true then y = x must evaluate to true
	* if x = y evaluates to true and y = z evaluates to true then x = z must evaluate to true.
	Furthermore, this method must be consistent with the implementation of hash, that is:
	* if x = y evaluates to true then x hash = y hash must evaluate to true. *)
	^self == other
)
public == other <Object> ^<Boolean> = (
	(* Answers whether the receiver is indistinguishable from 'other'. The default implementation answers whether the receiver is the same object as 'other'. Value objects should override to answer =.  *)
	(* :openquestion: Should we remove this? Identity seems only useful to tools that must cooperate with VM internals, such as atomic install and serializers, and these tools should already use the VM mirror since this method may be overridden. *)
	^vmmirror is: self identicalTo: other
)
public hash ^<Integer> = (
	(* Answers the hash code for the receiver.
	May be overridden by subclasses, and should be overridden if the method '=' is overridden.
	The hash code must obey the requirements set forth in the method '=', that is, the following must hold:
	* if x = y evaluates to true then x hash = y hash must evaluate to true. *)
	^self identityHash
)
public identityHash ^<Integer> = (
	(* Answers the identity hash code of the reciever. *)
	^vmmirror identityHashOf: self
)
public ~= anObject = (
	^(self = anObject) not
)
public ~~ anObject = (
	^(self == anObject) not
)'message not understood'
protected doesNotUnderstand: message = (
	| sel exception resumptionValue |
	sel: message selector.
	sel isUnary ifTrue: [(sel startsWith: 'is') ifTrue:
		[(* 2 = LdFalse - LdSelf, i.e. this is a ^false method *)
		| m = CompiledMethod toReturnConstant: 2 trailerBytes: CompiledMethodTrailer empty. |
		m selector: sel.
		m methodClass: Object.
		(* :bug: This should be added to the receiver class to avoid making the behavior of proxies dependent whether an isFoo message has already been sent to another class. *)
		Object
			addSelectorSilently: sel
			withMethod: m.
		^false]].

	exception:: MessageNotUnderstood new 
		message: message;
		receiver: self.
	resumptionValue: exception signal.
	
	^ exception reachedDefaultHandler
		ifTrue: [ message sentTo: self ]
		ifFalse: [ resumptionValue ].
)'newspeak requirement'
protected Array = (
	^ArraySlot
)
protected ByteArray = (
	^ByteArraySlot
)
protected Character = (
	(* To be removed when Strings and Characters are unified. *)
	^CharacterSlot
)
protected Error = (
	^ErrorSlot
)
protected Float = (
	^FloatSlot
)
protected Future = (
	^outer KernelForSqueak Future
)
protected Integer = (
	^IntegerSlot
)
protected Object = (
	^ObjectSlot
)
protected String = (
	^StringSlot
)
protected Symbol = (
	(* To be removed when symbol literals are removed. *)
	^SymbolSlot
)'pattern matching extension'
protected Pattern = (
	^patternMatching PatternClass
)
case: pattern otherwise: fail = (
	| MatchFailure tempResult |
	MatchFailure: patternMatching Binding new.
	tempResult:: pattern doesMatch: self else: [ MatchFailure ].

	^ tempResult == MatchFailure
		ifTrue: [ pattern matchFailedFor: self escape: fail ]
		ifFalse: [ tempResult boundValue ].
)'printing'
public printOn: s <WriteStream> = (
	(* Prints a representation of the receiver on the given stream.
	The printed representation is for debugging purposes only and should not be relied on for any other purpose whatsoever.
	May be overridden in subclasses. *)
	s
		nextPutAll: self class name;
		nextPut: "#";
		nextPutAll: self identityHash printString
)
public printString ^<String> = (
	(* Returns a printed representation of the receiver.
	The printed representation is for debugging purposes only and should not be relied on for any other purpose whatsoever.
	May be overridden in subclasses. *)
	^self String streamContents: [ :s | self printOn: s]
)'protected'
protected assert: condition <[Boolean]> message: message = (
	(* Raises an error with the given message if and only if condition evaluates to false. *)
	condition isBlock ifFalse: [Error signal: 'Block required'].
	condition value ifFalse: [Error signal: message]
)'testing'
public isImmutable (* ^<Boolean> *) = (
	(* Answer true if and only if the receiver is immutable.
	Should not be overridden in subclasses. *)
	(* To be removed. *)
	^vmmirror isImmutable: self
)) : ()
public class True = Boolean (
(* True defines the behavior of its single instance, true -- logical assertion. Notice how the truth-value checks become direct message sends, without the need for explicit testing.

Be aware however that most of these methods are not sent as real messages in normal use. Most are inline coded by the compiler as test and jump bytecodes - avoiding the overhead of the full message sends. So simply redefining these methods here will have no effect. *))
('as yet unclassified'
asAlien ^ <Integer> = (
	^1
)'control'
and: f <[Boolean]>	 ^ <Boolean> = (
	^f value
)
ifFalse: then <[]> ^ <Object> = (
	^nil
)
ifFalse: then <[X def]> ifTrue: else <[Y def]> ^ <X|Y> = (
	^else value
)
ifTrue: then <[]> ^<Object> = (
	^then value
)
ifTrue: then <[X def]> ifFalse: else <[Y def]> ^ <X|Y> = (
	^then value
)
or: f <[Boolean]> ^ <Boolean> = (
	^true
)
|| f <[Boolean]>^ <Boolean> = (
	^true
)'operations'
& other <Boolean> ^ <Boolean> = (
	^other
)
not ^ <Boolean> = (
	^false
)
| other <Boolean> ^ <Boolean> = (
	^true
)'printing'
printOn: strm <CharOutputStream>
 = (
	strm nextPutAll: 'true'
)'utility'
onFalse: blk <[Object]> ^ <Boolean> = (
	^self
)
onTrue: blk <[Object]> ^ <Boolean> = (
	blk value.
	^self
)) : ()
public class UndefinedObject = Value (
(* UndefinedObject's sole instance is nil. nil represents a prior value for variables that have not been initialized, or for results which are meaningless. *))
('comparing'
= other <Object> ^<Boolean> = (
	^other isNil
)'copying'
copy ^<Instance> = (
	self messageNotUnderstood: 
		(self (* Message *) receiver: self selector: #copy arguments: nil (* empty array *))
)'printing'
printOn: strm <CharOutputStream> = (
	strm putAll: 'nil'
)'testing'
isNil ^<Boolean> = (
	^true
)
notNil ^<Boolean> = (
	^false
)) : ()
public class Value = (
(* Some objects cannot change after they are created. They are deeply immutable and known as value objects. A value object is globally unique, in the sense that no other object is equal to it.

An object o is a value object iff, under the assumption that o is a value object, it can be shown that:
-All its slots are immutable and contain value objects.
-Its enclosing objects are all value objects.
-Its class inherits from class Value and does not override its identity method (==).

Examples of such objects are numbers, booleans, characters, literal strings, symbols and module definitions. *))
('as yet unclassified'
public copy ^<Instance> = (
	^self
)) : ()'as yet unclassified'
CompiledMethod = (
	(* Must be referred to indirectly so it is not serialized. *)
	^Smalltalk at: #CompiledMethod
)
CompiledMethodTrailer = (
	(* Must be referred to indirectly so it is not serialized. *)
	^Smalltalk at: #CompiledMethodTrailer
)
MessageNotUnderstood = (
	(* Must be referred to indirectly so it is not serialized. *)
	^Smalltalk at: #MessageNotUnderstood
)
MutableString = (
	^String
)
SourceFiles = (
	(* Must be referred to indirectly so it is not serialized. *)
	^Smalltalk at: #SourceFiles
)
TODO = (
	(*
	Behavior heirarchy to use proper factory method initialization.
	
	Mixin/ClassMixin to use proper initialization.
	
	Mark private methods/slots.
	*)
)
isSpur ^<Boolean> = (
	^"A" class instSize == 0
)
patternMatching = (
	^Smalltalk at: #CachedPatternMatching ifAbsentPut: [
		(Smalltalk at: #NSPatternMatching) 
			usingPlatform: (Smalltalk at: #BlackMarket) platform].
)
takeOver = (	

	(takeOver: 
		Class class class enclosingObjectSlot) 
			ifFalse: ['Class takeOver did nothing' out].
	
	(takeOver:
		(Smalltalk at: #NSCompilerTesting) 
			superclass enclosingObjectSlot)
				ifFalse: ['Via namespace takeOver did nothing' out].

	(takeOver: 
		(Smalltalk at: #Collections) class class class class enclosingObjectSlot)
				ifFalse: ['Via namespace takeOver did nothing' out].					
)
takeOver: oldKernel <Kernel> = (	
	| old neu |

	oldKernel == self ifTrue: [^false (* Already in charge *)].

	old:: {
		oldKernel Class. oldKernel Class class.	 	
		oldKernel Behavior. oldKernel Behavior class.
		oldKernel ClassMixin. oldKernel ClassMixin class.
		oldKernel Metaclass. oldKernel Metaclass class.	
		oldKernel InstanceMixin. oldKernel InstanceMixin class.
		oldKernel Object. oldKernel Object class.
		oldKernel Future. oldKernel Future class}.

	neu:: {
		self Class. self Class class.
		self Behavior. self Behavior class.
		self ClassMixin. self ClassMixin class.
		self Metaclass. self Metaclass class.	
		self InstanceMixin. self InstanceMixin class.
		self Object. self Object class.
		self Future. self Future class}.	

	1 to: old size do: [:i |		
		(old at: i) == (neu at: i) ifTrue: [shouldNotBeEqual].
	].

	old elementsForwardIdentityTo: neu.
	vmmirror flushCache.
	^true
)'cadence'
OrderedCollection = (
	(* Must be referred to indirectly so it is not serialized. *)
	^Smalltalk at: #OrderedCollection
)) : ()