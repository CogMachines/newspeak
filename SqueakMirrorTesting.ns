Newspeak3
'Mirrors'
class SqueakMirrorTesting usingPlatform: platform minitest: minitest = (|
	private TestContext = minitest TestContext.
	private ContextPart = platform squeak ContextPart.
	private vmmirror = platform squeak VMMirror new.
|) (
public class SimulationTests = SuperSimulationTests (
(* Test that the Newspeak bytecodes run under image-side simulation and return the same results as the VM. *)) (
'as yet unclassified'
assertSimulation: block answers: result = (
	assert: [result = (ContextPart runSimulated: block)].
)
foo = (
	^'sub'
)
fooWithArg: n = (
	^'sub'
)
public testImplicitReceiverSendSimulation = (
	assertSimulation: [foo] answers: 'sub'.
	assertSimulation: [fooWithArg: 1] answers: 'sub'.
	assertSimulation: [bar] answers: 'enclosing'.
)
public testOuterExpressionSimulation = (
	assertSimulation: [outer SimulationTests] answers: outer SimulationTests.
	assertSimulation: [outer SqueakMirrorTesting] answers: outer SqueakMirrorTesting.
)
public testOuterSendSimulation = (
	assertSimulation: [outer SimulationTests foo] answers: 'sub'.
	assertSimulation: [outer SimulationTests fooWithArg: 1] answers: 'sub'.
	assertSimulation: [outer SqueakMirrorTesting foo] answers: 'enclosing'.
	assertSimulation: [outer SqueakMirrorTesting fooWithArg: 1] answers: 'enclosing'.
)
public testSelfSendSimulation = (
	assertSimulation: [self foo] answers: 'sub'.
	assertSimulation: [self fooWithArg: 1] answers: 'sub'.
)
public testSuperSendSimulation = (
	assertSimulation: [super foo] answers: 'super'.
	assertSimulation: [super fooWithArg: 1] answers: 'super'.
)
) : (
'as yet unclassified'
TEST_CONTEXT = ()
)
public class SuperSimulationTests = TestContext () (
'as yet unclassified'
foo = (
	^'super'
)
fooWithArg: n = (
	^'super'
)
) : (
)
public class VMMirrorTests = TestContext (|
|) (
class A = (|
	public foo
	public bar
|) (
'as yet unclassified'
public isA = (
	^true
)
public isB = (
	^false
)
) : (
)
class B = (|
	public baz
	public quo
|) (
'as yet unclassified'
public isA = (
	^false
)
public isB = (
	^true
)
) : (
)
'as yet unclassified'
public testChangeClass = (
	| obj |
	obj:: A new.
	obj foo: 3.
	obj bar: 4.
	assert: obj isA.
	vmmirror changeClassOf: obj to: B ifFail: [:why | failWithMessage: why ].
	assert: obj isB.
	assert: obj baz equals: 3.
	assert: obj quo equals: 4.
)
) : (
'as yet unclassified'
TEST_CONTEXT = ()
)
'as yet unclassified'
bar = (
	^'enclosing'
)
classFromSource: src <String> ^<Class> = (
	^(ClassDeclarationBuilder fromSource: src) install reflectee apply: Object
)
foo = (
	^'enclosing'
)
fooWithArg: n = (
	^'enclosing'
)
) : (
)
