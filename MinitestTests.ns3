Newspeak3
'Minitest'
class MinitestTests usingPlatform: platform testFramework: minitest = ((* Tests of the Minitest framework (that is, meta-tests). *)|
	private Exception = platform blackMarket Exceptions Exception.
	private testFramework = minitest.
	private TestContext = minitest TestContext.
	private TestCatalog = minitest TestCatalog.
	private Tester = minitest Tester.
|)
(
class AssertionTests = TestContext (
(* Describe the class in this comment. *)|
	guineaPig = GuineaPigTestModule testFramework: testFramework.
	catalog = TestCatalog forModule: guineaPig.
	tester
|)
(
class GuineaPigTestModule testFramework: testFramework = (|
	private TestContext = testFramework TestContext.
|)
(
class AssertEqualsTestContext = TestContext (|
|)
('as yet unclassified'
testAssertEqualsFail = (
	assert: 3 equals: 4
)
testAssertEqualsFailWithDescription = (
	assert: 3 equals: 4 description: 'custom description'
)
testAssertEqualsPass = (
	assert: 3 equals: 3
)) : ('as yet unclassified'
TEST_CONTEXT = (
))
class AssertTestContext = TestContext (|
|)
('as yet unclassified'
testAssertErrorBlock = (
	assert: [3 zork]
)
testAssertErrorExpression = (
	assert: 3 zork
)
testAssertFailBlock = (
	assert: [false]
)
testAssertFailExpression = (
	assert: false
)
testAssertFailWithDescription = (
	assert: false description: 'custom description'
)
testAssertPassBlock = (
	assert: [true]
)
testAssertPassExpression = (
	assert: true
)) : ('as yet unclassified'
TEST_CONTEXT = (
))
class DenyTestContext = TestContext (
(* Trial tests to verify that the various #deny... messages work correctly. *)|
|)
('as yet unclassified'
testDenyErrorBlock = (
	deny: [3 zork]
)
testDenyErrorExpression = (
	deny: 3 zork
)
testDenyFailBlock = (
	deny: [true]
)
testDenyFailExpression = (
	deny: true
)
testDenyFailWithDescription = (
	deny: true description: 'custom description'
)
testDenyPassBlock = (
	deny: [false]
)
testDenyPassExpression = (
	deny: false
)) : ('as yet unclassified'
TEST_CONTEXT = (
))
class ResultCreationTestContext = TestContext (
(* This helps test to see if TestContext was deferred to for the creation of the TestFailure and TestError result. *)|
	private TestFailure = testFramework TestFailure.	
	private TestError = testFramework TestError.
|)
(
class CustomTestSuccess case: testCase = (
(* A custom TestSuccess *)|
	case ::= testCase.
	message = 'all good here'.
|)
('as yet unclassified'
isSuccess = (
	^true
)) : ()'accessing'
createErrorResultFor: testCase <TestCase> exception: ex <Error> = (
	| exception |
	exception:: TestException1 new.
	exception messageText: 'created here'.
	^TestError case: testCase exception: exception
)
createFailureResultFor: testCase <TestCase> description: description <String> = (
	^TestFailure case: testCase description: 'created here'
)'as yet unclassified'
createSuccessResultFor: testCase <TestCase> = (
	^CustomTestSuccess case: testCase.
)
testFailureCreation = (
	assert: false description: 'better not see this'
)
testSuccess = (
	assert: true
)'tests'
testErrorCreation = (
	assert: [1 zork]
)) : ('as yet unclassified'
TEST_CONTEXT = ())
class ShouldShouldntTestContext = TestContext (
(* Describe the class in this comment. *)|
|)
('as yet unclassified'
testShouldFail = (
	[should: [TestException1 new signal] signal: TestException2]
		on: TestException1
		do: [:ex | ex resume]
)
testShouldFailWithDescription = (
	[should: [TestException1 new signal]
	signal: TestException2
	description: 'custom description']
		on: TestException1
		do: [:ex | ex resume]
)
testShouldPassExceptionSubclass = (
	should: [TestException1 new signal] signal: Exception
)
testShouldPassSameExceptionClass = (
	should: [TestException1 new signal] signal: TestException1
)
testShouldntFail = (
	shouldnt: [TestException1 new signal] signal: TestException1
)
testShouldntFailWithDescription = (
	shouldnt: [TestException1 new signal]
		signal: TestException1
		description: 'custom description'
)
testShouldntPass = (
	[shouldnt: [TestException1 new signal] signal: TestException2]
		on: TestException1
		do: [:ex | ex resume]
)) : ('as yet unclassified'
TEST_CONTEXT = (
))
class TestException1 = Exception (|
|)
() : ()
class TestException2 = Exception (|
|)
() : ()) : ()'as yet unclassified'
assert: testResults containsSelector: selector = (
	^(resultForSelector: selector in: testResults) notNil
)
resultForSelector: selector in: collection = (
	^collection
		detect: [:some | some testCase selector = selector]
		ifNone: [nil]
)
testAssertEquals = (
	tester:: Tester testSuite: (catalog testSuiteNamed: 'AssertEqualsTestContext').
	tester runAll.
	assert: tester errors size equals: 0.
	assert: tester failures size equals: 2.
	assert: tester failures containsSelector: #testAssertEqualsFail.
	assert: tester failures containsSelector: #testAssertEqualsFailWithDescription.
	assert: (resultForSelector: #testAssertEqualsFailWithDescription in: tester failures) description
		equals: 'custom description'.
	assert: tester successes size equals: 1.
	assert: tester successes containsSelector: #testAssertEqualsPass.
)
testAsserts = (
	tester:: Tester testSuite: (catalog testSuiteNamed: 'AssertTestContext').
	tester runAll.
	assert: tester errors size equals: 2.
	assert: tester errors containsSelector: #testAssertErrorBlock.
	assert: tester errors containsSelector: #testAssertErrorLiteral.
	assert: tester failures size equals: 3.
	assert: tester failures containsSelector: #testAssertFailBlock.
	assert: tester failures containsSelector: #testAssertFailLiteralBoolean.
	assert: tester failures containsSelector: #testAssertFailWithDescription.
	assert: (resultForSelector: #testAssertFailWithDescription in: tester failures) description
		equals: 'custom description'.
	assert: tester successes size equals: 2.
	assert: tester successes containsSelector: #testAssertPassBlock.
	assert: tester successes containsSelector: #testAssertPassLiteralBoolean.
)
testDenials = (
	tester:: Tester testSuite: (catalog testSuiteNamed: 'DenyTestContext').
	tester runAll.
	assert: tester errors size equals: 2.
	assert: tester errors containsSelector: #testDenyErrorBlock.
	assert: tester errors containsSelector: #testDenyErrorExpression.
	assert: tester failures size equals: 3.
	assert: tester failures containsSelector: #testDenyFailBlock.
	assert: tester failures containsSelector: #testDenyFailExpression.
	assert: tester failures containsSelector: #testDenyFailWithDescription.
	assert: (resultForSelector: #testDenyFailWithDescription in: tester failures) description
		equals: 'custom description'.
	assert: tester successes size equals: 2.
	assert: tester successes containsSelector: #testDenyPassBlock.
	assert: tester successes containsSelector: #testDenyPassExpression.
)
testResultCreation = (
	tester:: Tester testSuite: (catalog testSuiteNamed: 'ResultCreationTestContext').
	tester runAll.
	
	assert: tester failures size equals: 1.
	assert: tester failures first description = 'created here'.
	
	assert: tester errors size equals: 1.
	assert: tester errors first exception messageText = 'created here'.

	assert: tester successes size equals: 1.
	assert: tester successes first message = 'all good here'.
)
testShouldShouldnt = (
	tester:: Tester testSuite: (catalog testSuiteNamed: 'ShouldShouldntTestContext').
	tester runAll.
	assert: tester errors size equals: 0.
	assert: tester failures size equals: 4.
	assert: tester failures containsSelector: #testShouldFail.
	assert: tester failures containsSelector: #testShouldFailWithDescription.
	assert: tester failures containsSelector: #testShouldntFail.
	assert: tester failures containsSelector: #testShouldntFailWithDescription.
	assert: tester successes size equals: 3.
	assert: tester successes containsSelector: #testShouldPassExceptionSubclass.
	assert: tester successes containsSelector: #testShouldPassSameExceptionClass.
	assert: tester successes containsSelector: #testShouldntPass.
)) : ('as yet unclassified'
TEST_CONTEXT = (
))
class TestLifecycleTests = TestContext (
(* Tests to verify that test cases are collected and grouped into test suites correctly across test contexts, and that test contexts and their enclosing shared state classes are instantiated the correct number of times. *)|
	guineaPig = GuineaPigTestModule minitest: testFramework.
	catalog = TestCatalog forModule: guineaPig.
|)
(
class GuineaPigTestModule minitest: testFramework = (
(* A fake test module for the use by tests of the enclosing class.

Because this module is nested inside a test context, the test contexts and methods it contains are not included in the test catalog created for the enclosing test module. *)|
	private TestContext = testFramework TestContext.
	DirectlyNestedTestContextInstantiationCount ::= 0.
	OuterSharedStateClassInstantiationCount ::= 0.
	InnerSharedStateClassInstantiationCount ::= 0.
	InnerTestContextInstantiationCount ::= 0.
	OuterSharedStateCleanedUp ::= false.
	InnerSharedStateCleanedUp ::= false.
|)
(
class DirectlyNestedTestContext = TestContext (
(* A test context class directly nested inside its test module. The tests expect this class to have 3 test methods. *)|
|DirectlyNestedTestContextInstantiationCount: DirectlyNestedTestContextInstantiationCount + 1)
(
class DoublyNestedTestContextWhichShouldBeIgnored = TestContext (
(* A test context inside a test context, should be ignored by the catalog building logic. *)|
|)
('as yet unclassified'
testCase1 = (
	
)) : ('as yet unclassified'
TEST_CONTEXT = (
	
))'as yet unclassified'
testCase1 = (
	
)
testCase2 = (
	
)
testCase3 = (
	
)
testFoo: bar = (
	(* A keyword method like this should not be recognized as a test. *)
)) : ('as yet unclassified'
TEST_CONTEXT = (
	
))
class OuterSharedStateClass = (
(* A non-test context class that serves as a container of shared state for its nested test contexts. *)|
	outerSharedState = 42.
|OuterSharedStateClassInstantiationCount: OuterSharedStateClassInstantiationCount + 1)
(
class InnerSharedStateClass = (
(* Another non-test context class. *)|
	innerSharedState = 24.
|InnerSharedStateClassInstantiationCount: InnerSharedStateClassInstantiationCount + 1)
(
class InnerTestContext = TestContext (
(* A test context class nested in some shared state classes. The tests expect this class to have 2 test methods. *)|
|InnerTestContextInstantiationCount: InnerTestContextInstantiationCount + 1)
('as yet unclassified'
testCase1 = (
	
)
testCase2 = (
	
)) : ('as yet unclassified'
TEST_CONTEXT = (
	
))'as yet unclassified'
cleanUp = (
	InnerSharedStateCleanedUp: true.
)) : ()'as yet unclassified'
cleanUp = (
	OuterSharedStateCleanedUp: true.
)) : ()) : ()'as yet unclassified'
testCatalogContentsForDirectlyNested = (
	assert: (catalog testSuiteNames includes: 'DirectlyNestedTestContext').
	assert: (catalog testSuiteNamed: 'DirectlyNestedTestContext') size equals: 3.
)
testCatalogContentsForInnerContext = (
	assert: (catalog testSuiteNames includes: 'InnerTestContext').
	assert: (catalog testSuiteNamed: 'InnerTestContext') size equals: 2.
)
testCatalogSize = (
	assert: catalog testSuiteNames size equals: 2.
)
testInstantiationCounts = (
	| tester |
	tester:: Tester testSuite: catalog allTests.
	tester runAll.
	assert: guineaPig DirectlyNestedTestContextInstantiationCount equals: 3.
	assert: guineaPig OuterSharedStateClassInstantiationCount equals: 1.
	assert: guineaPig InnerSharedStateClassInstantiationCount equals: 1.
	assert: guineaPig InnerTestContextInstantiationCount equals: 2.
)
testSharedStateCleanUp = (
	| tester |
	tester:: Tester testSuite: catalog allTests.
	tester runAll.
	assert: guineaPig OuterSharedStateCleanedUp.
	assert: guineaPig InnerSharedStateCleanedUp.
)
testSuiteSizes = (
	assert: (catalog testSuiteNamed: 'DirectlyNestedTestContext') testCases size
	equals: 3.
	assert: (catalog testSuiteNamed: 'InnerTestContext') testCases size
	equals: 2.
)) : ('as yet unclassified'
TEST_CONTEXT = (
(* Marking this class as a test context. *)
))) : ()