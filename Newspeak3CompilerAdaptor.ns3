Newspeak3
'NS2Squeak'
class Newspeak3CompilerAdaptor usingPlatform: platform = ((*
Copyright (c) 2010  Felix Geller. 
Copyright (c) 2011  Ryan Macnak and Cadence Design Systems

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ''Software''), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ''AS IS'', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. *)|

	Language = platform blackMarket NsMultilanguage Language.
	LanguageCompiler = platform blackMarket NsMultilanguage LanguageCompiler.
	LanguageFileWriter = platform blackMarket NsMultilanguage LanguageFileWriter.
	Smalltalk = platform blackMarket Smalltalk.

	mirrors = platform mirrors.
	compilation = mirrors compilation.
	Compiler = compilation Compiler.

	NSObject = platform kernel Object.
	ns3Lang = NewspeakLanguage3 new.
	blackMarket = platform blackMarket.
	vmmirror = blackMarket VMMirror new.
|)
(
class Newspeak3CompilerAdaptor = LanguageCompiler ((* I'd rather subclass Newspeak2Compilation`Compiler but this fails because of a bug in NS2Compiler, which doesn't set the enclosingObject slots correctly. *)|
	language = ns3Lang.
	compiler = Compiler new.
|)
('as yet unclassified'
compileUnit: src <Stream> ^ <Class> = (
		(* Compile File *)
	| builder mixinMirror klass |
	builder:: mirrors ClassDeclarationBuilder fromUnitSource: src.
	Smalltalk at: builder simpleName ifPresent: [:it | builder prvtExistingMixin: it mixin].
	mixinMirror:: builder install.
	klass:: mixinMirror reflectee apply: NSObject withName: mixinMirror simpleName.
	Smalltalk at: klass name put: klass.
	klass category: mixinMirror reflectee definingClass category.
	blackMarket SystemOrganization classify: klass name under: klass category.
	^klass
)
evaluate: textOrStream in: aContext to: receiver notifying: aRequestor ifFail: failBlock logged: logFlag = (
	
	| string |
	string:: textOrStream readStream contents asString. (* Ugly coercion *)

	aContext ifNil: [
		(* Inspector DoIt *)
		^((mirrors ObjectMirror reflecting: receiver) evaluate: string) reflectee
	] ifNotNil: [
		(* Debugger DoIt *)
		^((mirrors ActivationMirror reflecting: aContext) evaluate: string) reflectee
	].
)
wrapClassSource: src for: aClass = (
	| cat <String> |
	cat:: aClass category.
	cat isNil ifTrue:[cat:: 'Uncategorized NS3'].
	^ 'Newspeak3 ''', cat,''' ',src
)) : ('as yet unclassified'
evaluate: textOrString for: anObject logged: logFlag = (
	^self evaluate: textOrString for: anObject notifying: nil logged: logFlag
)
evaluate: textOrString for: anObject notifying: aController logged: logFlag = (
	(* Compile and execute the argument, textOrString with respect to the class 
	of anObject. If a compilation error occurs, notify aController. If both 
	compilation and execution are successful then, if logFlag is true, log 
	(write) the text onto a system changes file so that it can be replayed if 
	necessary. *)

	^ self new
				evaluate: textOrString
				in: nil
				to: anObject
				notifying: aController
				ifFail: [^nil]
				logged: logFlag.
))
class NewspeakLanguage3 = Language (|
	parserClass = compilation Parser.
	parser = parserClass.
	parserInstance = parser new.
|)
('as yet unclassified'
= other = (
	^ self name = other name
)
activationMirrorFor: context using: activationMirrors = (
	^activationMirrors ActivationMirrorCompiledByNewspeak onContext: context
)
classSubjectFor: aClass using: ide = (
	(* Note we use the ClassDeclarationMirror from the IDE instance, rather the one from the mirror system imported by this module. When there are multiple IDEs and mirror systems in an image, this ensures the mirrors listening for changes and the mirrors that will make changes in a given IDE belong to the same mirror system. *)
	^ide browsingNS3 ClassSubject onModel: 
		(ide browsing ClassDeclarationMirror reflecting: aClass mixin)
)
compiler = (
	^Newspeak3CompilerAdaptor
)
fileExtension = (
	^ 'ns3'
)
isNestedClassAccessorSelector: sel forMixin: mxn = (
	| ts <OrderedCollection[String]> |
	ts:: sel findTokens: syntheticNameSeparator.
	^ (ts size = 1 and: [mxn classes includesMirrorNamed: ts anyOne])
		or: [ ts size > 2 
			and: [(ts last = 'slot' or: [ts last = 'slot:']) 
				and: [mxn classes includesMirrorNamed: (ts at: ts size - 1)]]]
)
isNewspeakLanguage3 = (
	^ true.
)
name = (
	^ #'Newspeak3'
)
syntheticNameSeparator = (
	^ Language syntheticNameSeparator.
)
syntheticNameSeparatorCharacter = (
	^ Language syntheticNameSeparatorCharacter.
)
writer = (
	self halt.
)) : ()) : ()