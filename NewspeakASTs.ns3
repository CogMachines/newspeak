Newspeak3
'Newspeak'
class NewspeakASTs usingLib: platform = ((* Abstract syntax tree node classes for Newspeak.

Issues:
The abbreviations in class and slot names should be replaced with proper identifiers.
Possibly ASTs for self/super/outer/implicitReceiver should be defined here.
The factory selector should be changed to #usingPlatform:.

Copyright 2008 Cadence Design Systems, Inc.
Copyright 2010 Felix Geller and Ryan Macnak
   
Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0 *)| 
        private OrderedCollection = platform collections OrderedCollection. 
|)
(
public class AST = ((* An abstract syntax tree. An AST knows where in the source code the corresponding construct is. The slots start and end are indices into the source code marking that position.

In some cases, the corresponding construct may be associated with tokens that are not strictly part of the abstract syntax. For example, in

(foo)

the parentheses are not part of the abstract syntax but foo is. Nonetheless, it may be useful to know where the parens are, since they are strongly associated with the AST. We use the slots concStart and concEnd for that purpose. *)|
public start <Integer> ::= 0. (* Note that 0 is out-of-bounds in a Newspeak stream/string. *)
public end <Integer> ::= 0.
protected _concreteStart <Integer>
protected _concreteEnd <Integer>
|)
('as yet unclassified'
assert: block = (
	self assert: block message: 'Assert failed'
)
public copyPositionFrom: other <AST> = (
	self start: other start.
	self end: other end.
)'source positioning'
public concreteEnd ^<Integer> = (
	(* To be used by leaf nodes; they will typically only have a stored concrete end if it was set by the parser (usually due to surrounding parens), though the AST copier might set it regardless *)
	^self _concreteEnd isNil ifTrue: [self end] ifFalse: [self _concreteEnd]
 )
public concreteEnd: position <Integer> = (
	self _concreteEnd: position
)
public concreteStart ^<Integer> = (
(* To be used by leaf nodes; they will typically only have a stored concrete start if it was set by the parser (usually due to surrounding parens), though the AST copier might set it regardless *)
	^self _concreteStart isNil ifTrue: [self start] ifFalse: [self _concreteStart]
)
public concreteStart: position <Integer> = (
	self _concreteStart: position
)
public left: leftmostSubtree <AST>  = (
(*
For any non-leaf AST, its concrete start is either the stored concrete
start value (if there is one, that is, it isn't nil) or else the concrete start of its leftmost subtree.

The start of an AST is  the concrete start of its leftmost subtree
unless it has no subtrees; then it is the stored value. 
 
Only the parser knows which subtree is  the leftmost, as this depends on the concrete syntax. The parser may this routine, which sets the indices in the tree.
*)
	self _concreteStart isNil ifTrue: [_concreteStart: leftmostSubtree concreteStart].
	self start = 0 ifTrue: [self start: _concreteStart].
)
public right: rightmostSubtree <AST> = (
(*
For any non-leaf AST, its concrete end is either the stored concrete
end value (if there is one, that is, it isn't nil) or else the concrete end of its rightmost subtree.
 
The end of an AST is the concrete end of its rightmost subtree,
unless it has no subtrees; then it is the stored value. 

Only the parser knows which subtree is the rightmost, as this depends on the concrete syntax. The parser calls this routine, which sets the indices in the tree.
*)
	self _concreteEnd isNil ifTrue: [_concreteEnd: rightmostSubtree concreteEnd].
	self end = 0 ifTrue: [self end: _concreteEnd].
)'testing'
public isAST ^<Boolean> = (
	^true
)'visiting'
public apply: visitor <ASTVisitor> = (
	^self subclassResponsibility
)) : ()
public class ASTCopier = ASTTool ((* A visitor that copies an NS2 AST. Subclasses can override selected methods to produce altered copies. *))
('node traversal'
public assignmentNode: aNode  <AssignmentAST> ^ <AssignmentNode> = (
	^AssignmentAST new to: (aNode var apply: self) send: (aNode expr apply: self); 
		start: aNode start; end: aNode end; 
		concreteStart: aNode concreteStart; concreteEnd: aNode concreteEnd
)
public binaryTypeOpNode: aNode = (
	^BinaryTypeOpAST new
		lOperand: (aNode lOperand apply: self);
		operator: aNode operator;
		rOperand: (aNode rOperand apply: self);
		start: aNode start; end: aNode end; 
		concreteStart: aNode concreteStart; 
		concreteEnd: aNode concreteEnd
)
public blockNode: aNode <BlockAST> ^ <BlockAST> = (
	^BlockAST new body: (aNode body apply: self);  
		start: aNode start; end: aNode end; 
		concreteStart: aNode concreteStart;
		concreteEnd: aNode concreteEnd
)
public blockTypeNode: aNode = (
	^(BlockTypeAST 
		formals: ( aNode formals collect:[:f | f apply: self])
		return: (aNode return ifNotNil: [:it | it apply: self]))
		start: aNode start; end: aNode end; 
		concreteStart: aNode concreteStart;
		concreteEnd: aNode concreteEnd
)
public cascadedSendNode: aNode <CascadedSendAST> ^  <CascadedSendAST> = (
	^CascadedSendAST new
		to: (aNode prevSend apply: self) cascade: (aNode msg apply: self);
		start: aNode start; end: aNode end; 
		concreteStart: aNode concreteStart; 
		concreteEnd: aNode concreteEnd
)
public categoryNode: node = (
	^CategoryAST new
		name: node name;
		methods: (node methods collect: [:m | m apply: self])
)
public charNode: aNode <CharAST> = (
	^self literalNode: aNode
)
public classHeaderNode: node = (
	^ClassHeaderAST new
		name: node name;
		constructor: (node constructor apply: self);
		superclassName: node superclassName;
		superclassCall: node superclassCall;
		superConstructorCall: (node superConstructorCall apply: self);
		slots: (node slots collect: [ :slt | slt apply: self ]);
		isSeq: node isSeq;
		classComment: node classComment;
		category: node category;
		inheritanceChain: (node inheritanceChain collect:[:send | send apply: self]);
		initExprs: (node initExprs collect: [ :ie | ie apply: self ])
)
public classNode: aNode = (
	^ClassDeclarationAST new
		hdr: (aNode hdr apply: self);
		instanceSide: (aNode instanceSide apply: self);
		classSide: (aNode classSide apply: self);
		start: aNode start; end: aNode end; 
		concreteStart: aNode concreteStart; 
		concreteEnd: aNode concreteEnd
)
public classPrefix: node <ClassPrefixNode> = (
	^ClassPrefixAST
		name: (node name apply: self) 
		constructor: (node constructor apply: self) 
		superclassName: (node superclassName apply: self)  
		superclassCall: (node superclassCall apply: self)      
		superConstructorCall: (node superConstructorCall apply: self) 		
)
public codeBodyNode: aNode = (
 	^CodeBodyAST new
		parameters: (aNode parameters collect:[:p | p apply: self])
		temporaries: (aNode temporaries collect:[:t | t apply: self])
		statements:(aNode statements collect:[:s | s apply: self]);
		isSeq: aNode isSeq;
		start: aNode start; end: aNode end; 
		concreteStart: aNode concreteStart; 
		concreteEnd: aNode concreteEnd
)
public genericInvocationNode: aNode = (
	^ParameterizedTypeAST new
		generic: (aNode generic apply: self);
		arguments: (aNode arguments collect:[:a | a apply: self]);
		start: aNode start; end: aNode end;
		concreteStart: aNode concreteStart; 
		concreteEnd: aNode concreteEnd
)
public messageNode: aNode  <MessageAST> ^  <MessageAST> = (
	^MessageAST new
		send: aNode sel with: (aNode args collect:[:a | a apply: self]);
		start: aNode start; end: aNode end; 
		concreteStart: aNode concreteStart; 
		concreteEnd: aNode concreteEnd
)
public messagePatternNode: aNode  <MessagePatternAST> ^ <MessagePatternAST> = (
	^MessagePatternAST new
		selector: aNode selector
		parameters: (aNode parameters collect: [:p | p apply: self])
		returnType: (aNode returnType isNil ifTrue: [nil] ifFalse: [aNode returnType apply: self])
		typePattern: (aNode typePattern isNil ifTrue: [nil] ifFalse: [aNode typePattern apply: self]);
		start: aNode start; end: aNode end;
		concreteStart: aNode concreteStart; 
		concreteEnd: aNode concreteEnd
)
public methodNode: aNode  <MethodAST> = (
	^MethodAST new
		pattern: (aNode pattern apply: self)
		body: (aNode body apply: self)
		accessModifier: aNode accessModifier;
		start: aNode start; end: aNode end; 
		concreteStart: aNode concreteStart; 
		concreteEnd: aNode concreteEnd
)
public mixinApplication: node <MixinApplicationAST> = (
	^MixinApplicationAST new
		mixinExpr: (node mixinExpr apply: self);
		superclassExpr: (node superclassExpr apply: self);
		classPrefix: (node classPrefix ifNotNil: [:cp | cp apply: self]); 
		(*check for nil prefix during transition *)
		start: node start; end: node end; 
		concreteStart: node concreteStart;
		concreteEnd: node concreteEnd
)
public mixinApplicationClass: node <MixinApplicationClassAST> = (
	^(MixinApplicationClassAST 
		named: node name 
		factoryMsg: (node constructor apply: self) 
		inheriting: (node inheritanceChain collect: [:ic | ic apply: self]))
		start: node start; end: node end; 
		concreteStart: node concreteStart;
		concreteEnd: node concreteEnd
)
public mixinClassNode: aNode = (
	#Bogus yourself.
	^aNode class new
)
public normalSendNode: aNode <NormalSendAST> ^ <NormalSendAST>= (
	^NormalSendAST new
		to: (aNode recv apply: self) send: (aNode msg apply: self); 
		start: aNode start; end: aNode end; 
		concreteStart: aNode concreteStart;
		concreteEnd: aNode concreteEnd
)
public numberNode: aNode = (
 	^self literalNode: aNode
)
public returnStatNode: aNode <ReturnStatAST> ^ <ReturnStatAST> = (
	^ReturnStatAST new
		expr: (aNode expr apply: self); 
		start: aNode start; end: aNode end; 
		concreteStart: aNode concreteStart;
		concreteEnd: aNode concreteEnd
)
public setterSendNode: aNode <SetterSendAST> ^ <SetterSendAST>= (
	^(SetterSendAST
		to: (aNode recv apply: self) send: (aNode msg apply: self)
		start: aNode start end: aNode end)
		concreteStart: aNode concreteStart;
		concreteEnd: aNode concreteEnd
)
public sideNode: aNode <SideAST> ^ <SideAST> = (
 	^NSSideAST new 
		vars: (aNode vars collect: [:v | v apply: self])
            cats:  (aNode categories collect: [:c | c apply: self]);
		nestedClasses: (aNode nestedClasses collect: [:nc | nc apply: self]);
            start: aNode start; end: aNode end; 
		concreteStart: aNode concreteStart; 
		concreteEnd: aNode concreteEnd
)
public slotDefNode: aNode = (
	| slotDefClass |
	slotDefClass:: aNode isMutable 
						ifTrue: [ MutableSlotDefAST ] 
						ifFalse: [ ImmutableSlotDefAST ].
	^slotDefClass new
		slotDecl: (aNode slotDecl apply: self);
		initializer: (aNode initializer ifNotNil: [aNode initializer apply: self]);
		start: aNode start; end: aNode end; 
		concreteStart: aNode concreteStart; 
		concreteEnd: aNode concreteEnd
)
public stringNode: aNode <StringAST> ^ <StringAST> = (
	^self literalNode: aNode
)
public symbolNode: aNode = (
	^self literalNode: aNode
)
public tupleNode: aNode <TupleAST> ^  <TupleAST> = (
	^TupleAST new
		elements: (aNode elements collect: [:e | e apply: self]); 
		start: aNode start; end: aNode end; 
		concreteStart: aNode concreteStart;
		concreteEnd: aNode concreteEnd
)
public typeIdNode: aNode = (
	^TypeIdAST new
		name: aNode getName; 
		start: aNode start; end: aNode end; 
		concreteStart: aNode concreteStart;
		concreteEnd: aNode concreteEnd
)
public typePatternNode: aNode = (
	^TypePatternAST new
		formals: ( aNode formals collect:[:f | f apply: self]); 
		start: aNode start; end: aNode end; 
		concreteStart: aNode concreteStart;
		concreteEnd: aNode concreteEnd
)
public unaryTypeOpNode: aNode = (
	^UnaryTypeOpAST new
		operand: (aNode operand apply: self);
		operator: aNode operator;
		start: aNode start; end: aNode end; 
		concreteStart: aNode concreteStart; 
		concreteEnd: aNode concreteEnd
)
public varDeclNode: aNode<VarDeclAST> ^ <VarDeclAST> = (
	^VarDeclAST
		name: aNode name
		type: (aNode type isNil ifTrue: [nil] ifFalse: [aNode type apply: self])
)
public variableNode: aNode <VariableAST> ^ <VariableAST> = (
	^VariableAST new
		name: aNode name;
		start: aNode start; end: aNode end; 
		concreteStart: aNode concreteStart;
		concreteEnd: aNode concreteEnd              
)'private'
private literalNode: aNode = (
	^aNode class new
		val: aNode val;
		start: aNode start; end: aNode end; 
		concreteStart: aNode concreteStart;
		concreteEnd: aNode concreteEnd
)) : ()
public class ASTTool = ()
('node traversal'
public blockNode: aNode <BlockAST> = (
	self subclassResponsibility
)
public cascadedSendNode: aNode <CascadedSendAST> = (
	self subclassResponsibility
)
public charNode: aNode <CharAST> = (
	self subclassResponsibility
)
public classNode: aNode <ClassAST> = (
	self subclassResponsibility
)
public codeBodyNode: aNode <CodeBodyAST> = (
	self subclassResponsibility
)
public messageNode: aNode <MessageAST> = (
	self subclassResponsibility
)
public messagePatternNode: aNode <MessagePatternAST> = (
	self subclassResponsibility
)
public methodNode: aNode <MethodAST> = (
	self subclassResponsibility
)
public mixinApplication: node <MixinApplicationAST> = (
	self subclassResponsibility
)
public mixinApplicationClass: node <MixinApplicationClassAST> = (
	self subclassResponsibility
)
public normalSendNode: aNode <NormalSendAST> = (
	self subclassResponsibility
)
public numberNode: aNode <NumberAST> = (
	self subclassResponsibility
)
public returnStatNode: aNode <ReturnStatAST> = (
	self subclassResponsibility
)
public setterSendNode: aNode <SetterSendAST> = (
	self subclassResponsibility
)
public sideNode: aNode <SideAST> = (
	self subclassResponsibility
)
public stringNode: aNode <StringAST> = (
	self subclassResponsibility
)
public symbolNode: aNode <SymbolAST> = (
	self subclassResponsibility
)
public tupleNode: aNode <TupleAST> = (
	self subclassResponsibility
)
public varDeclNode: aNode <VarDeclAST> = (
	self subclassResponsibility
)
public variableNode: aNode <VariableAST> = (
	(* can only be a pseudo variable : self or _here *)
	self subclassResponsibility
)) : ()
public class ASTTraverser = ASTTool ()
('node traversal'
public blockNode: node <BlockAST> = (
	node body apply: self
)
public cascadedSendNode: node <CascadedSendAST> = (
	node prevSend apply: self.
	node msg apply: self.
)
public charNode: node <CharAST> = (
	(* Leaf *)
)
public keywordPatternNode: aNode <KeywordPatternAST> = (
	#BOGUS yourself.
	(* Leaf? *)
)
public literalPatternNode: node <LiteralPatternAST> = (
	node literal apply: self
)
public messageNode: node <MessageAST> = (
	node args do: [:each | each apply: self].
)
public mixinClassNode: node <MixinClassNode> = (
	(* Leaf? *)
)
public normalSendNode: node <NormalSendAST> = (
	node recv apply: self.
	node msg apply: self.
)
public numberNode: node <NumberAST> = (
	(* Leaf *)
)
public returnStatNode: node <ReturnStatAST> = (
	node expr apply: self.
)
public setterSendNode: node <SetterSendAST> = (
	node recv apply: self.
	node msg apply: self.
)
public stringNode: node <StringAST> = (
	(* Leaf *)
)
public symbolNode: node <SymbolAST> = (
	(* Leaf *)
)
public tupleNode: node <TupleAST> = (
	node elements do: [:each | each apply: self]
)
public variablePatternNode: node <VariablePatternAST> = (
	#BOGUS yourself.
	(* Leaf? *)
)
public wildcardPatternNode: aNode <WildcardPatternAST> = (
	(* Leaf *)
)) : ()
public class AssignmentAST = AST (| var <VariableAST> expr <AST> |)
('initialization'
to: aVar <VariableAST> assign: anExpr <AST> = (
  self assert:[aVar isVariableNode].
  self assert:[anExpr isExpressionNode].
  self var: aVar; expr: anExpr.
  start: var start.
  end: anExpr end.
)'testing'
public isAssignmentNode = (^true)
public isExpressionNode = (^true)'visiting'
public apply: aTool = (
	^aTool assignmentNode: self
)) : ()
public class BinaryTypeOpAST = AST (| lOperand <TypeAST> rOperand <TypeAST> operator <Symbol> |)
('as yet unclassified'
public apply: aTool <ASTVisitor>  = (
	^aTool binaryTypeOpNode: self
)) : ()
public class BlockAST = AST (|
	public body <CodeBodyAST>
|)
('accessing'
public parameters ^ <List[ParameterAST]> = (
	^body parameters
)'testing'
public isBlockNode = ( ^true)
public isExpressionNode = (^true)'visiting'
public apply: aTool = (
	^aTool blockNode: self.
)) : ()
public class BlockTypeAST formals: f return: r = AST (|
	formals = f.
	return = r.
|)
('as yet unclassified'
public apply: aTool = (
	^aTool blockTypeNode: self
)
isTypeNode ^<Boolean> = (
	^true
)) : ()
public class CascadedSendAST = SendAST (| prevSend <SendAST> |)
('accessing'
recv ^ <ExpressionAST> = (
^self prevSend recv
)'as yet unclassified'
end = (
	(* Currently the parser doesn't set start or end positions for
	cascades, so compute from the receiver's elements.  But
	if the parser ever does set the position, take it directly. *)
	^super end = 0
		ifFalse: [super end]
		ifTrue: [msg end]
)
start = (
	(* Currently the parser doesn't set start or end positions for
	cascades, so compute from the receiver's elements.  But
	if the parser ever does set the position, take it directly. *)
	^super start = 0
		ifFalse: [super start]
		ifTrue: [prevSend start]
)'initialization'
to: aSend <SendAST> cascade: aMessage <MessageAST>  = (
  self assert:[aSend isSendNode].
  self assert:[aMessage isMessageNode].
  self prevSend: aSend; msg: aMessage
)'testing'
isCascadedSendNode = (^true)'visiting'
public apply: aTool = (
	^aTool cascadedSendNode: self.
)) : ()
public class CategoryAST = AST (| name <String> methods <List[MethodAST]> |)
('as yet unclassified'
public apply: aTool <ASTTool> = (
	^aTool categoryNode: self
)) : ()
public class CharAST = LiteralAST ()
('testing'
isCharNode = (^true)'visiting'
public apply: tool = (
	^tool charNode: self
)) : ()
public class ClassBodyAST initializer: init <InitializerAST> instanceSide: iSide <SideAST> classSide: cSide <SideAST> = AST (
(* AST for a class body. *)|
	instanceInitializer <InitializerAST> = init.
	instanceSide <SideAST> = iSide.
	classSide <SideAST> = cSide.
|start:: instanceInitializer start.
end:: classSide end max: instanceSide end)
() : ()
public class ClassDeclarationAST = AST (|
	accessModifier <Symbol>
	hdr <ClassHeaderAST>
	instanceSide <SideAST>
	classSide <SideAST>
|)
('as yet unclassified'
public apply: aTool  <ASTTool >  = (
	^aTool classNode: self
)
category: cat  <CategoryAST> = (
	hdr category: cat
)
isClassDeclarationNode = (
	^ true.
)'header emulation'
category ^ <CategoryAST> = (

^hdr category
)
classComment ^ <String> = (

^hdr classComment
)
name ^ <Symbol> = (

^hdr name
)
superclassName ^ <Symbol> = (

^hdr superclassName
)) : ('as yet unclassified'
public makeMixinNamed: klassName <Token> factoryMsg: cons <MessagePatternAST> inheriting: iList <List[SendAST]> body: body <ClassBodyAST> 
	^ <ClassDeclarationAST> = (
(* adaptor factory method for transition. Using this method, we can create an AST compatible with the unmodified compiler based on the revised parser. *)
	| 
	superCall <SendAST> = iList first. 
	instanceInitializer <InitializerAST> = body instanceInitializer.
	header = ClassHeaderAST new 
				name: klassName token; 
				constructor: cons;
				superclassName: superCall recv msg sel;
				superclassCall: superCall recv;
				superConstructorCall: superCall msg;
				slots: instanceInitializer slots; 
				isSeq: instanceInitializer isSeq; 
				initExprs: instanceInitializer initializationExpressions; 
				inheritanceChain: iList;
				classComment: body instanceInitializer classComment;
				start: klassName start; end:  instanceInitializer end.
	|
	^new 
		hdr: header;
		instanceSide: body instanceSide;
		classSide: body classSide
)
public named: klassName <Token> factoryMsg: cons <MessagePatternAST> inheriting: iList <List[SendAST]> body: body <ClassBodyAST> 
	^ <ClassDeclarationAST> = (
	^body isNil
		ifTrue:[MixinApplicationClassAST named: klassName token factoryMsg: cons inheriting: iList]
		ifFalse:[makeMixinNamed: klassName factoryMsg: cons inheriting: iList body: body]
))
public class ClassHeaderAST = AST (| 
name <Symbol>
constructor <MessagePatternAST>
superclassName <Symbol>
superclassCall <NormalSendAST>
superConstructorCall <MessageAST>
slots <List[SlotDefAST]>
isSeq <Boolean>
classComment <String>
category <CategoryAST>
initExprs <List[ExpressionAST]>
inheritanceChain <List[SendAST]>
 |)
('as yet unclassified'
superCall ^ <SendAST> = (
	^inheritanceChain first
)'testing'
headerDeclarationEndsWithClosingParenthesis = (^true)'visiting'
public apply: visitor = (^visitor classHeaderNode: self)) : ()
public class ClassPrefixAST name: n 
	constructor: k
	superclassName: sn 
	superclassCall: scc 					                         	
	superConstructorCall: sk = AST ((* A class prefix defines everything about a class except for its mixin. 
It is intended to serve as a common component between ordinary class declarations and mixin applications.

For Squeak compatibility, we maintain a category as well (ugh).
*)|
name <Symbol> = n.
constructor <MessagePatternAST> = k.
superclassName <Symbol> = sn.
superclassCall <NormalSendAST> = scc.
superConstructorCall <MessageAST> = sk.
category <CategoryAST>
|)
('as yet unclassified'
public apply: visitor = (
	^visitor classPrefix: self
)) : ()
public class CodeBodyAST = AST (|
	public parameters <List[ParameterAST]>
	public temporaries <List[TemporaryAST]>
	public statements <List[StatementAST]>
	public isSeq <Boolean> ::=true.
	public literalMessages <List[MessageAST]>
|)
('as yet unclassified'
public isExpressionNode = (
	#BOGUS. (* Added for expansion of setter::exp to (t:=exp. setter:exp. t).  This might not play well with expectations in the rest of the compiler?  --Ryan *)
	^true
)'initialization'
public parameters: pars <List[ParameterAST]> temporaries: temps <List[TemporaryAST]> statements: stats <List[StatementAST]> = ( 
	self parameters: pars; temporaries: temps; statements: stats
)
public temporaries: temps <List[TemporaryAST]> statements: stats <List[StatementAST]> = (
	self parameters: OrderedCollection new; temporaries: temps; statements: stats
)'testing'
public isCodeBodyNode = (^true)'visiting'
public apply: aTool = (
	^aTool codeBodyNode: self.
)) : ()
public class ImmutableSlotDefAST = SlotDefAST ()
('testing'
public isMutable ^<Boolean> = (
	^false
)
public isMutableSlot ^<Boolean> = (
	^false
)) : ()
public class InitializerAST slots: s initializerExpressions: es comment: c slotsAreSequential: seq = AST (
(* AST for  an instance initializer clause. *)|
	slots = s.
	initializationExpressions <List[ExpressionAST]> = es.
	classComment = c.
	isSeq <Boolean> = seq.
|)
() : ()
public class KeywordPatternAST = PatternAST (|
	keywords <TupleAST>
	patterns <TupleAST>
|)
('as yet unclassified'
public apply: tool = (
	^tool keywordPatternNode: self.
)
isKeywordPatternNode = (
	^ true
)) : ()
public class KeywordPatternPairAST = AST (|
	keyword <Symbol>
	pattern
|)
('as yet unclassified'
isKeywordPatternPairNode = (
	^ true
)) : ()
public class LiteralAST = AST (| public val <Object> |)
('testing'
public isExpressionNode = (^true)
public isLiteralNode = (^true)) : ()
public class LiteralPatternAST = PatternAST (|
	literal <LiteralAST>
|)
('as yet unclassified'
public apply: tool = (
	^ tool literalPatternNode: self.
)
isLiteralPatternNode = (
	^ true
)) : ()
public class MessageAST = AST (| 
	public sel <Symbol>
	public args <List[ExpressionAST]>
	public isEventual <Boolean> ::= false.
|)
('as yet unclassified'
public arguments = (
	^self args	
)
public selector = (
	^self sel
)'initialization'
public send: aSelector <Symbol> with: arguments <List[ExpressionAST]> = (
    self sel: aSelector; args: arguments
)'testing'
public isMessageNode = (^true)'visiting'
public apply: aTool = (
	^aTool messageNode: self.
)) : ()
public class MessagePatternAST = AST (| 
	public selector <Symbol>
	public parameters <List[ParameterAST]>
	public returnType <TypeAST>
	public typePattern <TypePatternAST>
	public accessModifier
|)
('initialization'
public selector: s <Symbol> parameters: p <List[ParameterAST]> = (
  self selector: s; parameters: p
)
public selector: s <Symbol> parameters: p <List[ParameterAST]> returnType: t <TypeAST> = (
  self selector: s; parameters: p; returnType: t
)
public selector: s <Symbol> parameters: p <List[ParameterAST]> returnType: t  <TypeAST> typePattern: tp <TypePatternAST> = (
  self selector: s; parameters: p; returnType: t; typePattern: tp
)
public selector: s <Symbol> returnType: t <TypeAST> = (
  self selector: s; returnType: t
)'source positioning'
public concreteEnd = (
     self typePattern isNil ifFalse: [^self typePattern concreteEnd].
     self returnType isNil ifFalse: [^self returnType concreteEnd].
     self parameters isEmpty ifFalse: [^self parameters last concreteEnd].
     ^super concreteEnd
)'testing'
public isMessagePatternNode = (^true)'visiting'
public apply: aTool = (
	^aTool messagePatternNode: self.
)) : ()
public class MethodAST = AST (| 
	public pattern <MessagePatternAST>
	public body <CodeBodyAST>
	public accessModifier <Symbol>
|)
('accessing'
public selector ^ <Symbol> = (
	^ self pattern selector
)'as yet unclassified'
public printOn: stream = (
	stream nextPutAll: 'MethodAST: '; nextPutAll: pattern selector
)'initialization'
public pattern: p <MessagePatternAST> body: b <CodeBodyAST> accessModifier: am <Symbol> = (
  self assert:[p isMessagePatternNode].
  self assert:[b isCodeBodyNode].
  self pattern: p; body: b;   accessModifier: am
)'testing'
public isMethodNode = (^true)'visiting'
public apply: aTool = (
    ^aTool methodNode: self.
)) : ()
public class MixinApplicationAST = AST ((* Represents a literal mixin application. *)| 
mixinExpr <NormalSendAST> 
superclassExpr <NormalSendAST> (* should eventually go away *)
classPrefix <ClassPrefixAST>
 |)
('testing'
isExpressionNode = (^true)'visiting'
public apply: visitor = (
	^visitor mixinApplication: self
)) : ('as yet unclassified'
prefix: cp mixin: me = (
(* ultimately should be a primary factory *)
	^new classPrefix: cp; mixinExpr: me; superclassExpr: cp superclassCall; yourself
))
public class MixinApplicationClassAST named: klassName factoryMsg: cons inheriting: iList = AST (
(* This class represents a class defined via a mixin application - that is, a class that does not provide a class body.
 *)|
	accessModifier <Symbol>
	name <Symbol> = klassName asSymbol.
	constructor <MessagePatternAST> = cons.
	inheritanceChain <List[SendAST]> = iList.
	category  <CategoryAST>
|)
('as yet unclassified'
public apply: visitor = (
	^visitor mixinApplicationClass: self
)
public isMixinApplicationClassAST = (
	^true
)) : ()
public class MutableSlotDefAST = SlotDefAST ()
('accessing'
public isMutable ^ <Boolean> = (^true)
public isMutableSlot ^ <Boolean> = (^true)) : ()
public class NSSideAST = SideAST (| nestedClasses <List[ClassDeclarationAST]> |)
() : ()
public class NormalSendAST = SendAST (|
	public recv <ExpressionAST>
|)
('as yet unclassified'
public to: receiver send: selector with: arguments = (
	to: receiver send: (MessageAST new send: selector with: arguments)
)'initialization'
public to: anExpression <ExpressionAST> send: aMessage <MessageAST>= (
	self recv: anExpression; msg: aMessage
)'testing'
public isNormalSendNode = (^true)'visiting'
public apply: aTool = (
	^aTool normalSendNode: self
)) : ()
public class NumberAST = LiteralAST ()
('testing'
public isNumberNode = (^true)'visiting'
public apply: aTool = (
    ^ aTool numberNode: self
)) : ()
public class ParameterizedTypeAST = AST (| generic <TypeIdAST> arguments <List[TypeAST]> |)
('as yet unclassified'
public apply: aTool  = (
	^aTool genericInvocationNode: self
)
isTypeNode = (
	^ true
)) : ()
public class PatternAST = LiteralAST (|
|)
('as yet unclassified'
public isPatternNode = (
	^ true
)) : ()
public class ReturnStatAST = AST (| 
	public expr <ExpressionAST>
|)
('testing'
public isReturnStatNode = (^true)'visiting'
public apply: aTool = (
	^aTool returnStatNode: self.
)) : ()
public class SendAST send: aMsg = AST (|
	public msg <MessageAST> ::= aMsg.
|)
('as yet unclassified'
public message = (
	^self msg
)
public receiver = (
	^self recv
)'testing'
public isExpressionNode = (^true)
public isSendNode = (^true)
public recv ^ <ExpressionAST> = (
  ^self subclassResponsibility
)) : ()
public class SetterSendAST to: r <ExpressionAST> send: m <MessageAST> start: s <integer> end: e <Integer> = SendAST send: m (|
recv  <ExpressionAST> ::= r.
|assert:[r isExpressionNode] 
  message: 'Receiver of setter send should be an expression' .
  start: s.
  end: e)
('as yet unclassified'
public apply: aTool = (
	^aTool setterSendNode: self.
)
isSetterSendNode = (^true)) : ()
public class SideAST = AST ((* An AST for one side of a class *)| vars <Collection[Symbol]> categories <Collection[String]> classComment <String> |)
('accessing'
nestedClasses ^ <Collection[ClassDeclarationAST]> = (
	(* Answer the nested classes for this AST.  This default answers an
	 empty set since it serves for languages without nested classes. *)
	^{}
)
varNames ^ <Collection[Symbol]> = (
	^vars collect: [:var | var name]
)'initialize'
vars: vs <Collection[Symbol]> cats: cs <Collection[String]> = (
  self vars: vs; categories: cs
)'testing'
isSideNode = (^true)'visiting'
public apply: aTool = (
	^aTool sideNode: self.
)) : ()
public class SlotDefAST = AST (| 
	public slotDecl <SlotDeclarationAST>
	public initializer <ExpressionAST>
	public accessModifier
|)
('accessing'
public isMutable ^ <Boolean> = (self subclassResponsibility)
public isMutableSlot ^ <Boolean> = (self subclassResponsibility)
public name ^ <Symbol> = (
	^slotDecl name
)'as yet unclassified'
public isSlotDefNode = ( ^ true )
public type ^ <TypeAST> = (
	^slotDecl type
)'visiting'
public apply: visitor = (^visitor slotDefNode: self)) : ()
public class StringAST = LiteralAST ()
('testing'
public isStringNode = (^true)'visiting'
public apply: aTool = (^aTool stringNode: self
)) : ()
public class SymbolAST = LiteralAST ()
('testing'
public isSymbolNode = (^true)'visiting'
public apply: aTool = (^aTool symbolNode: self)) : ()
public class TupleAST = AST (| 
	public elements <List[ExpressionAST]>
|)
('as yet unclassified'
public isExpressionNode = (^true)'testing'
public isArrayNode = (^false)
public isTupleNode = ( ^ true)'visiting'
public apply: aTool = (^aTool tupleNode: self)) : ()
public class TypeIdAST = AST (| name <Symbol> |)
('accessing'
getName ^ <Symbol> = (
	^ name

  )'as yet unclassified'
isTypeNode = (
	^ true
)'visiting'
public apply: visitor = (
	^visitor typeIdNode: self
)) : ()
public class TypePatternAST = AST (| formals |)
('as yet unclassified'
public apply: aTool  = (
	^aTool typePatternNode: self
)
public isTypeNode = (
	^ true
)) : ()
public class UnaryTypeOpAST = AST (| operand <TypeAST> operator <Symbol>  |)
('as yet unclassified'
public apply: aTool  = (
	^aTool unaryTypeOpNode: self
)) : ()
public class VarDeclAST name: aName type: aType = AST (| 
	public name  <Symbol> = aName.
	public type <TypeAST> = aType.
|)
('as yet unclassified'
public isTemporaryAST ^ <Boolean> = (
	^false
)'source positioning'
public concreteEnd ^ <Integer> = (
  self type isNil ifFalse:[^self type concreteEnd].
  ^super concreteEnd.
)'testing'
public isVarDeclNode = (^true)'visiting'
public apply: aTool = (
	^aTool varDeclNode: self
)) : ()
public class VariableAST = AST (| 
	public name <Symbol>
|)
('testing'
public isExpressionNode = (^true)
public isVariableNode = (^true)'visiting'
public apply: aTool = (
	^aTool variableNode: self.
)) : ()
public class VariablePatternAST = PatternAST (|
	variableName <Symbol>
|)
('as yet unclassified'
public apply: aTool = (
	^ aTool variablePatternNode: self.
)
public isVariablePatternNode = (
	^ true
)) : ()
public class WildcardPatternAST = PatternAST (|
|)
('as yet unclassified'
public apply: tool = (
	^ tool wildcardPatternNode: self
)
public isWildcardPatternNode = (
	^ true
)) : ()) : ()