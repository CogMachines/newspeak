Newspeak3
'StructuredVCS'
class VCSSubversionBackendProvider usingPlatform: platform vcs: vcs = NewspeakObject (

"Back-end for accessing subversion repositories"|

	private AbstractBackend = vcs AbstractBackend.
	
	private logger = vcs logger.

	private FileDirectory = platform Files FileDirectory.
|)
(
class Backend = AbstractBackend (|

|)
(
class LocalRepository onRepositoryId: repositoryId = AbstractLocalRepository onRepositoryId: repositoryId (|
	private svnAdmin = SvnAdminCommand new.
	private remoteRepositoryDirectory = FileDirectory on: repositoryDirectory pathName, '_svnrepo'.
	|)
(
class Command = AbstractCommand (|
	commandLine = 'svn'.
|)
('as yet unclassified'
addStream: stream asFileNamed: filename = (

	writeStream: stream toFileNamed: filename.
	launcher run: {'add'. (repository repositoryDirectory / filename) pathName}
)
createEmptyWorkingCopy = (

	launcher run: {'checkout'. remoteRepositoryDirectory url. repository repositoryDirectory pathName}.
	addStream: '' readStream asFileNamed: ignoredFilename.
	launcher run: {'commit'.  '-m'. 'Initial Commit'. workingCopyPath}.
)
defaultArguments = (

	^ {}
)
topLevelDirectoryNames = (

	halt.
	^ launcher runLines: {'ls'. workingCopyPath}
)
workingCopyPath = (

	^ repository repositoryDirectory pathName
))
class Historian named: historianName version: v = AbstractLocalHistorian named: historianName version: v (|

|)
()
class RepositoryVersionAccessing = AbstractRepositoryVersionAccessing ()
(
class RepositoryVersion = AbstractRepositoryVersion (|
|)
())
class SvnAdminCommand = AbstractCommand (|
	commandLine = 'svnadmin'.
|)
('as yet unclassified'
createEmptyRepository = (

	launcher noDefaultArgumentsRun: {'create'. remoteRepositoryDirectory pathName}.
))'as yet unclassified'
clone: location = (

	logger warn: 'Cloning repositories is not supported'
)
create = (

	svnAdmin createEmptyRepository.
	command createEmptyWorkingCopy
)
historians = (

	^ command topLevelDirectoryNames collect: [:each | Historian named: each version: nil]
)
repository = (

	^ self
))'as yet unclassified'
Repository = (

	^ AbstractRepository
)))