Newspeak3
'Newspeak'
class KernelTests usingPlatform: p minitest: m = (|
private TestContext = m TestContext.
private MessageNotUnderstood = p kernel MessageNotUnderstood.
|) (
public class ArrayTests = TestContext () (
'as yet unclassified'
public testArrayAsArray = (
	| array = Array new: 3. |	
	assert: array asArray equals: array.
)
public testArrayAt = (
	| array = Array new: 2. empty = Array new: 0. |
	array at: 1 put: 'apple'.
	array at: 2 put: 'banana'.
	
	assert: (array at: 1) equals: 'apple'.
	assert: (array at: 2) equals: 'banana'.
	should: [array at: 0] signal: Error.
	should: [array at: 3] signal: Error.
	should: [array at: -3] signal: Error.
	should: [array at: nil] signal: Error.
	
	should: [empty at: 1] signal: Error.
)
public testArrayAtPut = (
	| array = Array new: 2. empty = Array new: 0. |
	assert: (array at: 1 put: 'apple') equals: 'apple'.
	assert: (array at: 2 put: 'banana') equals: 'banana'.
	should: [array at: 0 put: 'orange'] signal: Error.
	should: [array at: 3 put: 'orange'] signal: Error.
	should: [array at: -3 put: 'orange'] signal: Error.
	should: [array at: nil put: 'orange'] signal: Error.
	
	should: [empty at: 1 put: 'orange'] signal: Error.
)
public testArrayIsEmpty = (
	assert: (Array new: 0) isEmpty.
	deny: (Array new: 1) isEmpty.
)
public testArrayNew = (
	assert: (Array new: 0) size equals: 0.
	assert: (Array new: 500) size equals: 500.	

	should: [Array new: -1] signal: Error.
	should: [Array new: '10'] signal: Error.
	should: [Array new: nil] signal: Error.
	should: [Array new] signal: MessageNotUnderstood.
)
public testIsArray = (
	assert: (Array new: 0) isArray.
	deny: (ByteArray new: 0) isArray.
	deny: 0 isArray.
	deny: 1.5 isArray.
	deny: 'Array new' isArray.
	deny: nil isArray.
)
) : (
'as yet unclassified'
TEST_CONTEXT = ()
)
public class ByteArrayTests = TestContext () (
'as yet unclassified'
public testByteArrayAt = (
	| array = ByteArray new: 2. empty = ByteArray new: 0. |
	array at: 1 put: 3.
	array at: 2 put: 4.
	
	assert: (array at: 1) equals: 3.
	assert: (array at: 2) equals: 4.
	should: [array at: 0] signal: Error.
	should: [array at: 3] signal: Error.
	should: [array at: -3] signal: Error.
	should: [array at: nil] signal: Error.
	
	should: [empty at: 1] signal: Error.
)
public testByteArrayAtPut = (
	| array = ByteArray new: 2. empty = ByteArray new: 0. |
	assert: (array at: 1 put: 3) equals: 3.
	assert: (array at: 2 put: 4) equals: 4.
	should: [array at: 0 put: 5] signal: Error.
	should: [array at: 3 put: 6] signal: Error.
	should: [array at: -3 put: 7] signal: Error.
	should: [array at: nil put: 8] signal: Error.

	assert: (array at: 1 put: 0) equals: 0.
	assert: (array at: 2 put: 255) equals: 255.
	should: [array at: 1 put: -1] signal: Error.
	should: [array at: 1 put: 256] signal: Error.
	
	should: [empty at: 1 put: 9] signal: Error.
)
public testByteArrayIsEmpty = (
	assert: (ByteArray new: 0) isEmpty.
	deny: (ByteArray new: 1) isEmpty.
)
public testByteArrayNew = (
	assert: (ByteArray new: 0) size equals: 0.
	assert: (ByteArray new: 500) size equals: 500.	

	should: [ByteArray new: -1] signal: Error.
	should: [ByteArray new: '10'] signal: Error.
	should: [ByteArray new: nil] signal: Error.
	should: [ByteArray new] signal: MessageNotUnderstood.
)
public testIsByteArray = (
	assert: (ByteArray new: 0) isByteArray.
	deny: (Array new: 0) isByteArray.
	deny: 0 isByteArray.
	deny: 1.5 isByteArray.
	deny: 'Array new' isByteArray.
	deny: nil isByteArray.
)
) : (
'as yet unclassified'
TEST_CONTEXT = ()
)
public class ClosureTests = TestContext () (
'as yet unclassified'
cannotReturn = (
	^[^42]
)
ensure1 = (
	[^'try-block'] ensure: [^'ensure-block'].
	^'afterward'
)
ensure2 = (
	^['try-block'] ensure: ['ensure-block'].
)
ensure3 = (
	[^'try-block'] ensure: ['ensure-block'].
	^'afterward'
)
public testCannotReturn = (
	should: [cannotReturn value] signal: Error.
)
public testEnsure = (
	assert: ensure1 equals: 'ensure-block'.
	assert: ensure2 equals: 'try-block'.
	assert: ensure3 equals: 'try-block'.
	
)
public testIsClosure = (
	assert: [3 + 4] isClosure.
	deny: (3 + 4) isClosure.
	deny: {3 + 4} isClosure.
)
public testNumArgs = (
	assert: [3 + 4] numArgs equals: 0.
	assert: [:x | x + 4] numArgs equals: 1.
	assert: [:x :y | x + y] numArgs equals: 2.
)
public testValue = (
	assert: [3 - 4] value equals: -1.
	assert: ([:x | x - 4] value: 14) equals: 10.
	assert: ([:x :y | x - y] value: 42 value: 24) equals: 18.
	assert: ([:x :y :z | x - y + z] value: 13 value: 3 value: 1) equals: 11.
)
public testValueTooFew = (
	should: [[:x | x - 4] value] signal: Error.
	should: [[:x :y | x - y] value: 1] signal: Error.
	should: [[:x :y :z | 3 - 4] value: 1 value: 2] signal: Error.
)
public testValueTooMany = (
	should: [[3 - 4] value: 1] signal: Error.
	should: [[:x | x - 4] value: 1 value: 2] signal: Error.
	should: [[:x :y | x - y] value: 1 value: 2 value: 3] signal: Error.
)
public testValueWithArguments = (
	assert: ([3 - 4] valueWithArguments: {}) equals: -1.
	assert: ([:x | x - 4] valueWithArguments: {14}) equals: 10.
	assert: ([:x :y | x - y] valueWithArguments: {42. 24}) equals: 18.
	assert: ([:x :y :z | x - y + z] valueWithArguments: {13. 3. 1}) equals: 11.
)
public testValueWithArgumentsTooFew = (
	should: [[:x | x - 4] valueWithArguments: {}] signal: Error.
	should: [[:x :y | x - y] valueWithArguments: {1}] signal: Error.
	should: [[:x :y :z | x - y + z] valueWithArguments: {1. 2}] signal: Error.
)
public testValueWithArgumentsTooMany = (
	should: [[3 - 4] valueWithArguments: {1}] signal: Error.
	should: [[:x | x - 4] valueWithArguments: {1. 2}] signal: Error.
	should: [[:x :y | x - y] valueWithArguments: {1. 2. 3}] signal: Error.
	should: [[:x :y :z | x - y + z] valueWithArguments: {1. 2. 3. 4}] signal: Error.
)
) : (
'as yet unclassified'
TEST_CONTEXT = ()
)
class DnuAnswerMessage = () (
'as yet unclassified'
protected doesNotUnderstand: message = (
	^message
)
) : (
)
public class ExceptionTests = TestContext () (
) : (
'as yet unclassified'
TEST_CONTEXT = ()
)
public class FloatTests = TestContext () (
'as yet unclassified'
public testFloatAdd = (
	assert: 3 + 4 asFloat equals: 7.
	assert: 3 asFloat + 4 equals: 7.
	assert: 3 asFloat + 4 asFloat equals: 7.
	
	assert: 3.5 asFloat + 4.5 asFloat equals: 8.
)
public testFloatAsString = (
	assert: 3 asFloat asString equals: '3.0'.
	assert: (3 asFloat / 2 asFloat) asString equals: '1.5'.
)
) : (
'as yet unclassified'
TEST_CONTEXT = ()
)
public class IntegerTests = TestContext () (
'as yet unclassified'
public testIntegerAdd = (
	(* smi + smi, mint + mint, smi + mint, mint + smi *)
	assert: minInt31 + maxInt31 equals: -1.
	assert: minInt32 + maxInt32 equals: -1.
	assert: minInt63 + maxInt63 equals: -1.
	assert: minInt64 + maxInt64 equals: -1.
	
	assert: maxInt31 + maxInt31 equals: 2147483646.
	assert: maxInt32 + maxInt32 equals: 4294967294.
	assert: maxInt63 + maxInt63 equals: 9223372036854775806.
	
	assert: minInt31 + minInt32 equals: -3221225472.
	assert: minInt32 + minInt31 equals: -3221225472.
	assert: minInt31 + minInt63 equals: -4611686019501129728.
	assert: minInt63 + minInt31 equals: -4611686019501129728.
	assert: minInt32 + minInt63 equals: -4611686020574871552.
	assert: minInt63 + minInt32 equals: -4611686020574871552.
	
	assert: maxInt31 + maxInt32 equals: 3221225470.
	assert: maxInt32 + maxInt31 equals: 3221225470.
	assert: maxInt31 + maxInt63 equals: 4611686019501129726.
	assert: maxInt63 + maxInt31 equals: 4611686019501129726.
	assert: maxInt32 + maxInt63 equals: 4611686020574871550.
	assert: maxInt63 + maxInt32 equals: 4611686020574871550.
	
	assert: minInt31 + maxInt32 equals: 1073741823.
	assert: maxInt32 + minInt31  equals: 1073741823.
	assert: minInt31 + maxInt63 equals: 4611686017353646079.
	assert: maxInt63 + minInt31 equals: 4611686017353646079.
	assert: minInt32 + maxInt63 equals: 4611686016279904255.
	assert: maxInt63 + minInt32 equals: 4611686016279904255.
	
	assert: maxInt31 + minInt32 equals: -1073741825.
	assert: minInt32 + maxInt31 equals: -1073741825.
	assert: maxInt31 + minInt63 equals: -4611686017353646081.
	assert: minInt63 + maxInt31 equals: -4611686017353646081.
	assert: maxInt32 + minInt63 equals: -4611686016279904257.
	assert: minInt63 + maxInt32 equals: -4611686016279904257.
)
public testIntegerSub = (
	(* smi + smi, mint + mint, smi + mint, mint + smi *)
	assert: maxInt31 - minInt31 equals: 2147483647.
	assert: maxInt32 - minInt32 equals: 4294967295.
	assert: maxInt63 - minInt63 equals: 9223372036854775807.
	(* big int assert: maxInt64 - minInt64 equals: 18446744073709551615. *)

	assert: maxInt31 - maxInt31 equals: 0.
	assert: maxInt32 - maxInt32 equals: 0.
	assert: maxInt63 - maxInt63 equals: 0.
	
	assert: minInt31 - minInt32 equals: 1073741824.
	assert: minInt32 - minInt31 equals: -1073741824.
	assert: minInt31 - minInt63 equals: 4611686017353646080.
	assert: minInt63 - minInt31 equals: -4611686017353646080.
	assert: minInt32 - minInt63 equals: 4611686016279904256.
	assert: minInt63 - minInt32 equals: -4611686016279904256.
	
	assert: maxInt31 - maxInt32 equals: -1073741824.
	assert: maxInt32 - maxInt31 equals: 1073741824.
	assert: maxInt31 - maxInt63 equals: -4611686017353646080.
	assert: maxInt63 - maxInt31 equals: 4611686017353646080.
	assert: maxInt32 - maxInt63 equals: -4611686016279904256.
	assert: maxInt63 - maxInt32 equals: 4611686016279904256.
	
	assert: minInt31 - maxInt32 equals: -3221225471.
	assert: maxInt32 - minInt31 equals: 3221225471.
	assert: minInt31 - maxInt63 equals: -4611686019501129727.
	assert: maxInt63 - minInt31 equals: 4611686019501129727.
	assert: minInt32 - maxInt63 equals: -4611686020574871551.
	assert: maxInt63 - minInt32 equals: 4611686020574871551.
	
	assert: maxInt31 - minInt32 equals: 3221225471.
	assert: minInt32 - maxInt31 equals: -3221225471.
	assert: maxInt31 - minInt63 equals: 4611686019501129727.
	assert: minInt63 - maxInt31 equals: -4611686019501129727.
	assert: maxInt32 - minInt63 equals: 4611686020574871551.
	assert: minInt63 - maxInt32 equals: -4611686020574871551.
)
public testMediumIntegerAsString = (
	assert: maxInt64 asString equals: '9223372036854775807'.
	assert: minInt64 asString equals: '-9223372036854775808'.
)
public testMediumIntegerComparisons = (
	assert: minInt64 = minInt64.
	deny: minInt64 < minInt64.
	deny: minInt64 > minInt64.
	assert: minInt64 <= minInt64.
	assert: minInt64 >= minInt64.

	assert: maxInt64 = maxInt64.
	deny: maxInt64 < maxInt64.
	deny: maxInt64 > maxInt64.
	assert: maxInt64 <= maxInt64.
	assert: maxInt64 >= maxInt64.

	deny: maxInt64 = minInt64.
	deny: maxInt64 < minInt64.
	assert: maxInt64 > minInt64.
	deny: maxInt64 <= minInt64.
	assert: maxInt64 >= minInt64.

	deny: minInt64 = maxInt64.
	assert: minInt64 < maxInt64.
	deny: minInt64 > maxInt64.
	assert: minInt64 <= maxInt64.
	deny: minInt64 >= maxInt64.
)
public testSmallIntegerAsString = (
	assert: 3 asString equals: '3'.
	assert: -4 asString equals: '-4'.
	assert: 16rF asString equals: '15'.
	assert: maxInt31 asString equals: '1073741823'.
	assert: minInt31 asString equals: '-1073741824'.
)
public testSmallIntegerComparisons = (
	assert: 42 = 42.
	deny: 42 < 42.
	deny: 42 > 42.
	assert: 42 <= 42.
	assert: 42 >= 42.

	deny: 3 = 4.
	assert: 3 < 4.
	deny: 3 > 4.
	assert: 3 <= 4.
	deny: 3 >= 4.

	deny: 5 = 7.
	assert: 5 < 7.
	deny: 5 > 7.
	assert: 5 <= 7.
	deny: 5 >= 7.
	
	deny: -5 = 7.
	assert: -5 < 7.
	deny: -5 > 7.
	assert: -5 <= 7.
	deny: -5 >= 7.
	
	deny: 5 = -7.
	deny: 5 < -7.
	assert: 5 > -7.
	deny: 5 <= -7.
	assert: 5 >= -7.
	
	deny: -5 = -7.
	deny: -5 < -7.
	assert: -5 > -7.
	deny: -5 <= -7.
	assert: -5 >= -7.
	
	deny: 42 = '42'.
	should: [42 < '42'] signal: Error.
	should: [42 > '42'] signal: Error.
	should: [42 <= '42'] signal: Error.
	should: [42 >= '42'] signal: Error.
)
public testSmallIntegerDiv = (
	assert: -3 // 7 equals: -1.
	assert: 3 // -7 equals: -1.
	assert: -3 // -7 equals: 0.
	assert: 3 // 7 equals: 0.
	assert: -7 // 3 equals: -3.
	assert: 7 // -3 equals: -3.
	assert: -7 // -3 equals: 2.
	assert: 7 // 3  equals: 2.
)
public testSmallIntegerMod = (
	assert: -3 \\ 7 equals: 4.
	assert: 3 \\ -7 equals: -4.
	assert: -3 \\ -7 equals: -3.
	assert: 3 \\ 7 equals: 3.
	assert: -7 \\ 3 equals: 2.
	assert: 7 \\ -3 equals: -2.
	assert: -7 \\ -3 equals: -1.
	assert: 7 \\ 3 equals: 1.
)
public testSmallIntegerQuo = (
	assert: (-3 quo: 7) equals: 0.
	assert: (3 quo: -7) equals: 0.
	assert: (-3 quo: -7) equals: 0.
	assert: (3 quo: 7) equals: 0.
	assert: (-7 quo: 3) equals: -2.
	assert: (7 quo: -3) equals: -2.
	assert: (-7 quo: -3) equals: 2.
	assert: (7 quo: 3) equals: 2.
)
public testSmallIntegerRem = (
	assert: (-3 rem: 7) equals: -3.
	assert: (3 rem: -7) equals: 3.
	assert: (-3 rem: -7) equals: -3.
	assert: (3 rem: 7) equals: 3.
	assert: (-7 rem: 3) equals: -1.
	assert: (7 rem: -3) equals: 1.
	assert: (-7 rem: -3) equals: -1.
	assert: (7 rem: 3) equals: 1.
)
public testSmallIntegerShiftLeft = (
	assert: 1 << 2 equals: 4.
	assert: -1 << 2 equals: -4.

	assert: 0 << 2 equals: 0.

	assert: 1 << 0 equals: 1.
	assert: -1 << 0 equals: -1.
)
public testSmallIntegerShiftRight = (
	assert: 4 >> 2 equals: 1.
	assert: 4 >> 3 equals: 0. (* A bad implementation will put value bits into the tag bit. *)
	assert: 4 >> 32 equals: 0.
	assert: 4 >> 33 equals: 0.
	assert: 4 >> 64 equals: 0.
	assert: 4 >> 65 equals: 0.
	
	assert: -4 >> 2 equals: -1.
	assert: -4 >> 3 equals: -1.
	assert: -4 >> 32 equals: -1.
	assert: -4 >> 33 equals: -1.
	assert: -4 >> 64 equals: -1.
	assert: -4 >> 65 equals: -1.
	
	assert: 0 >> 2 equals: 0.
	
	assert: 4 >> 0 equals: 4.
	assert: -4 >> 0 equals: -4.
)
public testSmiMintComparisons = (
	deny: maxInt31 = maxInt64.
	assert: maxInt31 < maxInt64.
	deny: maxInt31 > maxInt64.
	assert: maxInt31 <= maxInt64.
	deny: maxInt31 >= maxInt64.

	deny: maxInt64 = maxInt31.
	deny: maxInt64 < maxInt31.
	assert: maxInt64 > maxInt31.
	deny: maxInt64 <= maxInt31.
	assert: maxInt64 >= maxInt31.
	
	deny: minInt31 = minInt64.
	deny: minInt31 < minInt64.
	assert: minInt31 > minInt64.
	deny: minInt31 <= minInt64.
	assert: minInt31 >= minInt64.

	deny: minInt64 = minInt31.
	assert: minInt64 < minInt31.
	deny: minInt64 > minInt31.
	assert: minInt64 <= minInt31.
	deny: minInt64 >= minInt31.
)
) : (
'as yet unclassified'
TEST_CONTEXT = ()
)
public class ObjectTests = TestContext () (
'as yet unclassified'
public testClassProtected = (
	| o = Object new. |
	should: [o class] signal: MessageNotUnderstood.
	shouldnt: [self class] signal: MessageNotUnderstood.
)
public testDoesNotUnderstand = (
	| o = Object new. p = DnuAnswerMessage new. |
	should: [o foobar] signal: MessageNotUnderstood.
	
	assert: p foobar selector equals: #foobar.
	assert: p foobar arguments isArray.
	assert: p foobar arguments size equals: 0.

	assert: (p + 42) selector equals: #+.
	assert: (p + 42) arguments isArray.
	assert: (p + 42) arguments size equals: 1.
	assert: ((p + 42) arguments at: 1) equals: 42.

	assert: (p with: 3 with: 4) selector equals: #with:with:.
	assert: (p with: 3 with: 4) arguments isArray.
	assert: (p with: 3 with: 4) arguments size equals: 2.
	assert: ((p with: 3 with: 4) arguments at: 1) equals: 3.
	assert: ((p with: 3 with: 4) arguments at: 2) equals: 4.
)
public testEquals = (
	| a b |
	a:: Object new.
	b:: Object new.

	assert: a = a.
	assert: b = b.
	deny: a = b.
	deny: b = a.
)
public testGlobalsProtected = (
	| o = Object new. |
	should: [o Array] signal: MessageNotUnderstood.
	should: [o ByteArray] signal: MessageNotUnderstood.
	should: [o Error] signal: MessageNotUnderstood.
	should: [o Exception] signal: MessageNotUnderstood.
	should: [o Float] signal: MessageNotUnderstood.
	should: [o Integer] signal: MessageNotUnderstood.
	should: [o Object] signal: MessageNotUnderstood.
	should: [o String] signal: MessageNotUnderstood.
	should: [o Symbol] signal: MessageNotUnderstood.
	should: [o Future] signal: MessageNotUnderstood.
	should: [o Delay] signal: MessageNotUnderstood.
	should: [o WeakArray] signal: MessageNotUnderstood.
)
public testHash = (
	| o = Object new. |
	assert: o hash isInteger.
	assert: o hash > 0.
)
public testPrintString = (
	| o = Object new. |
	assert: o printString isString.
	assert: o printString size > 0.
)
public testYourself = (
	| o = Object new. |
	assert: o yourself equals: o.
)
) : (
'as yet unclassified'
TEST_CONTEXT = ()
)
public class StringTests = TestContext () (
'as yet unclassified'
public testIsString = (
	assert: 'foo' isString.
	assert: #foo isString.
	assert: ('foo', 'bar') isString.
	deny: 1 isString.
	deny: 1.5 isString.
	deny: 1.5 asFloat isString.
	deny: true isString.
	deny: nil isString.
	deny: {} isString.
	deny: [] isString.
)
public testStringAdd = (
	should: ['foo' + 'bar'] signal: MessageNotUnderstood.
)
public testStringAsString = (
	assert: 'foo' asString equals: 'foo'.
	assert: #foo asString equals: 'foo'.
)
public testStringAt = (
	(* This is written so it works without and without string/character unification. *)
	assert: ('foo' at: 1) equals: $f.
	assert: ('foo' at: 2) equals: $o.
	assert: ('foo' at: 3) equals: $o.

	should: ['foo' at: 0] signal: Error.
	should: ['foo' at: 4] signal: Error.

	should: ['' at: 0] signal: Error.
	
	should: ['foo' at: -1] signal: Error.
	should: ['foo' at: nil] signal: Error.
	should: ['foo' at: 1 asFloat] signal: Error.
)
public testStringConcatenation = (
	assert: 'foo' , 'bar' equals: 'foobar'.
	assert: 'foo' , 'bar', '' equals: 'foobar'.
	assert: ('foo' , 'bar') size equals: 6.

	should: ['foo', 3] signal: Error.
	should: ['foo', true] signal: Error.
	should: ['foo', nil] signal: Error.
	should: [3, 'foo'] signal: MessageNotUnderstood.
	should: [true, 'foo'] signal: MessageNotUnderstood.
	should: [nil, 'foo'] signal: MessageNotUnderstood.
)
public testStringEndsWith = (
	assert: ('foo' endsWith: 'o').
	assert: ('foo' endsWith: 'foo').
	assert: ('foo' endsWith: '').
	assert: ('' endsWith: '').
	deny: ('foo' endsWith: 'toolongfoo').
	deny: ('foo' endsWith: 'boo').
	deny: ('foo' endsWith: 'bar').
	deny: ('' endsWith: 'foo').
	
	should: ['0' endsWith: 0] signal: Error.
	should: ['foo' endsWith: true] signal: Error.
	should: ['foo' endsWith: nil] signal: Error.
)
public testStringEquals = (
	assert: 'foo' equals: 'foo'.
	assert: #foo equals: 'foo'.
	assert: 'foo' equals: #foo.

	deny: 'foo' = 'bar'.
	deny: '3' = 3.
	deny: 3 = '3'.
)
public testStringHash = (
	assert: 'foo' hash isInteger.
	assert: 'foo' hash > 0.
	
	assert: 'foobar' hash equals: ('foo', 'bar') hash.
)
public testStringSize = (
	assert: 'foo' size equals: 3.
	assert: #foo size equals: 3.
	assert: '' size equals: 0.
)
public testStringStartsWith = (
	assert: ('foo' startsWith: 'f').
	assert: ('foo' startsWith: 'foo').
	assert: ('foo' startsWith: '').
	assert: ('' startsWith: '').
	deny: ('foo' startsWith: 'toolong').
	deny: ('foo' startsWith: 'fob').
	deny: ('foo' startsWith: 'bar').
	deny: ('' startsWith: 'foo').
	
	should: ['0' startsWith: 0] signal: Error.
	should: ['foo' startsWith: true] signal: Error.
	should: ['foo' startsWith: nil] signal: Error.
)
) : (
'as yet unclassified'
TEST_CONTEXT = ()
)
'as yet unclassified'
maxInt31 = (
	(* 1 << 30 - 1 *)
	^1073741823
)
maxInt32 = (
	(* 1 << 31 - 1 *)
	^2147483647
)
maxInt63 = (
	(* 1 << 62 - 1 *)
	^4611686018427387903
)
maxInt64 = (
	(* 1 << 63 - 1 *)
	^9223372036854775807
)
minInt31 = (
	(* -1 << 30 *)
	^-1073741824
)
minInt32 = (
	(* -1 << 31 *)
	^ -2147483648
)
minInt63 = (
	(* -1 << 62 *)
	^ -4611686018427387904
)
minInt64 = (
	(* -1 << 63 *)
	^ -9223372036854775808
)
) : (
)
