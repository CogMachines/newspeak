Newspeak3
'StructuredVCS'
class VCSPartialCompilation usingPlatform: platform = NewspeakObject (
"Some experiments on compiling/installing only the parts of a class that changed.


Currently, source control re-installs complete classes, even if only methods were changed. This is too expensive.


TODOs:
- test how we add single methods/classes/slots to existing classes.
"|
	
	private compiler = platform Language newspeak3 compiler new compiler.
	private newspeakMirrors = platform NewspeakMirrors usingLib: platform.

	private MixinMirrorBuilder = newspeakMirrors MixinMirrorBuilder.
	private MixinMirror = newspeakMirrors MixinMirror.
	private ClassDeclarationMirror = newspeakMirrors ClassDeclarationMirror.
	private ClassDeclarationBuilder = newspeakMirrors ClassDeclarationBuilder.
	
	private Dictionary = platform Collections Dictionary.
|)
('as yet unclassified'
emptyClass = (

	| lrep mixinRep namespace mixinLists |
	mixinRep:: compiler compileClassSource: emptyClassSource readStream within: nil.
	lrep::  reflection lowLevelMixinRep: mixinRep.
	namespace:: Dictionary new.
	mixinLists:: reflection atomicInstaller atomicallyInstallMixinReps: {lrep} namespace: namespace.
	^ mixinLists anyOne head
)
emptyClassDeclarationMirror = (

	^ ClassDeclarationMirror reflecting: emptyClass
)
emptyClassMixin = (

	^ emptyClass mixin
)
emptyClassMixinMirror = (

	^ MixinMirror reflecting: emptyClassMixin
)
emptyClassSource = (

	^ 'Newspeak3
''category''
class A = ()(class B = ()() ''no category'' foo = (^ 42))'
)
mirrorBuilder = (

	^ MixinMirrorBuilder reflecting: newClass mixin
)
newClass = (

	| lrep mixinRep namespace mixinLists |
	mixinRep:: compiler compileClassSource: 'Newspeak3
''category''
class A = ()(class B = ()() ''no category'' foo = (^ 42))' readStream within: nil.
	lrep::  reflection lowLevelMixinRep: mixinRep.
	namespace:: Dictionary new.
	mixinLists:: reflection atomicInstaller atomicallyInstallMixinReps: {lrep} namespace: namespace.
	^ mixinLists anyOne head
)
test = (

	| mixin |
	mixin:: compiler compileClassSource: 'Newspeak3
''category''
class A = ()()' readStream within: nil.
	^ MixinMirrorBuilder onMirror: mixin first lowLevelMirror
)
testAddMethod = (

	| classDeclarationMirror methodMirror builder |
	classDeclarationMirror:: emptyClassDeclarationMirror.
	methodMirror:: compiler compileMethodSource: 'foo = ()' within: classDeclarationMirror instanceSide mixin.
	
	builder:: ClassDeclarationBuilder onMirror: classDeclarationMirror.
	builder methods add: methodMirror.
	builder install.
	"how do we create a class from a mixin mirror without installing it into Smalltalk?.
	MirrorBuilder>>#install isn't parametrizable by namespace"
))