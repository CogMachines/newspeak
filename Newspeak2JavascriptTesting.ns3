Newspeak3
'NS2JS Tests'
class Newspeak2JavascriptTesting usingPlatform: platform  <Platform> testing:  compilerBuilder <AssembleCompiler> testFramework: utf <NSUnit> = ( 
(*
   Copyright 2012 SAP AG.
   
   Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
*)|
      (* imports *)
      private TestCase = utf TestCase.
	private TestResource = utf TestResource.
	private TestConfiguration = utf TestConfiguration.
	private MultiLanguageTestResource = platform blackMarket NsMultilanguage MultiLanguageTestResource.
      private Reflection = platform  Newspeak NS2Reflection.
      private Smalltalk = platform blackMarket Smalltalk.
	private BlockContext = platform blackMarket BlockContext.
	private CrLfFileStream = platform blackMarket Files CrLfFileStream.
	private compilerFactory = [compilerBuilder main2: platform].
	
	(* module variables *)
	private reflection
	private klass
	private ns2compiler 	
	|)
(
class CompilerTestResource setUp: sub <[]> tearDown: tdb  <[]> = TestResource setUp: sub tearDown: tdb ()
('as yet unclassified'
setUp = (
	reflection:: Reflection new.
	ns2compiler:: compilerFactory value.
)
sourceForTestClass ^<ReadStream> = (

^' Newsqueak2 
''NS2-tests''
class NS2CompilationTest =  Object  ( | testSlot | ) ()' readStream
)
tearDown = ( 
	klass:: nil.
	reflection:: nil.
	ns2compiler:: nil.
)) : ()
class NS2JavascriptTestCase selector: s <Symbol> = TestCase selector: s ((* Not a proper test case. A convenient way to run a number of tests. However, the results go into files whose correctness must be verified by hand. *))
(
class Config = TestConfiguration ()
('as yet unclassified'
configure: ideNamespace <Namespace> ^ <Class> = (
	|
	platform <Platform>
	unitTester <NSUnit>
	compilerBuilder <AssembleCompiler>
	|
	platform:: ideNamespace Platform new.
	unitTester:: ideNamespace NSUnit NSUnit usingPlatform: platform.
	compilerBuilder:: ideNamespace Newspeak2 AssembleCompiler new.
	   ^(ideNamespace Newspeak2JavascriptTesting 
			usingPlatform: ideNamespace 
			testing: compilerBuilder 
			testFramework: unitTester 
			) NS2JavascriptTestCase
)
testModuleName ^ <Symbol> = (
	       ^#'Newspeak2JavascriptTesting`NS2JavascriptTestCase'
)) : ()'as yet unclassified'
compileClassSource: src <String> = (
 
(* Compile a class *)
| rep <MixinRep>  file <CrLfFileStream> |

	rep:: ns2compiler compileClassSource: src readStream within: nil (* mirror mixin *).
	file:: CrLfFileStream forceNewFileNamed: rep first name , '.js'.
	ns2compiler outputTopLevelClass: rep to: file.
	file close.
)
resources = (
	^super resources, {MultiLanguageTestResource new. CompilerTestResource setUp:[] tearDown:[]}
)
setUp = (
	resources do:[:r | r setUp].
)
tearDown = (
	resources do:[:r | r tearDown].
)
testClassSide = (
	compileClassSource: '
	Newsqueak2
	''NS22JS testing''
	class Point2D_2  x: i y: j = ( 
		| x ::= i.  y ::= j. |
	)(
	'' dummy''
	rho = (^ x cos: theta)
	) : ( ''stuff''
		rho: r theta: t = (^x: rho cos: theta y: rho sin: theta)
	)'
)
testNestedClasses1 = (
	compileClassSource: '
	Newsqueak2
	''NS22JS testing''
	class Shapes = ( 
	)(
		class Shape = ()()
		
		class  Rectangle x: i y: j = Shape (
			| width = i. height = j. |
		)(
			'' nonsense ''
			area ^ <Integer> = (^ width * height)
		)
		
		class Square side: n <Integer> = Rectangle x: n y: n  ()(
			''foo''
			size ^ <Integer> = (^width)
		)
	)'
)
testNestedClasses2 = (
	compileClassSource: '
	Newsqueak2
	''NS22JS testing''
	class ColorShapes usingPlatform: platform = ( 
		| SuperShape = super Shape. Color = platform Graphics Color. |
	)(
		class Shape = SuperShape ( | color ::= defaultColor. |)(
			''whatever''
			isWhite = (^color = Color white)
		)
		'' dummy ''
		defaultColor = (^Color white)
	)'
)
testSimpleClass = (
	compileClassSource: '
	Newsqueak2
	''NS22JS testing''
	class Point2D = ( 
		| x y |
	)(
	'' dummy''
	rho = (^ x cos: (x/y cotan))
	)'
)) : ()) : ()