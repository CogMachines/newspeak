Newspeak3
'Time'
class TimeForSqueak usingPlatform: p vmMirror: vmm = ((* This module is named NSDateAndTime to avoid conflicts with Squeak's DateAndTime class
This code was derived by converting the Strongtalk Date and Time classes to Newspeak, which is why the Sun Microsystems copyright and BSD license below applies.

Copyright (c) 1995-2006 Sun Microsystems, Inc. ALL RIGHTS RESERVED.
Copyright 2008-2009 David Pennell, Gilad Bracha and other contributors.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, 
 this  list of conditions and the following disclaimer.

* Redistribution in binary form must reproduce the above copyright notice, 
this list of conditions and the following disclaimer in the documentation and/o other materials provided with the distribution.

Neither the name of Sun Microsystems or the names of contributors may 
be used to endorse or promote products derived from this software without 
specific prior written permission.

>>
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS 
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
DAMAGE.>> *)|
	private Magnitude = p kernel Magnitude.
	private Alien = p aliens Alien.
	private actors = p actors.
	private Delay = p squeak Delay.
	private vmMirror = vmm.

	protected daysOfWeek <SeqCltn[Symbol]> = 
		{#Monday. #Tuesday. #Wednesday. #Thursday. #Friday. #Saturday. #Sunday}.
	protected monthsOfYear <SeqCltn[Symbol]> = 
		{#January. #February. #March. #April. #May. #June. #July. #August. #September. #October. #November. #December}.
|) (
public class Date newDay: d <Int> monthIndex: m <Int> year: y <Int> ^<Instance> = Magnitude ((*
*)| monthIndex <Int> = m.
dayOfMonth <Int> = d.
year <Int> = y.
|) (
'accessing'
public asSeconds ^<Int> = (

	(* # of seconds since January 1, 1901 *)

	self unimplemented
)
public hash ^<Int> = (


	| hash <Int> |
	hash::  year.
	hash:: ((hash bitShift: 4) bitXor:  month) bitXor: hash.
	hash:: ((hash bitShift: 4) bitXor:  dayOfMonth) bitXor: hash.
	^hash
)
public julian ^<Int> = (

	(* Converting Gregorian calendar date to Julian Day Number *)
	(* The algorithm is valid for all Gregorian calendar dates after Nov 23, -4713 --Wikipedia *)

	|Y M D|

	#BOGUS yourself. (* Ryan is no time expert, this may be incorrect *)

	Y:: year.
	M:: monthIndex.
	D:: dayOfMonth.
	
	^(1461 * (Y + 4800 + ((M - 14)//12)))//4 
		+ ((367 * (M - 2 - (12 * ((M - 14)//12))))//12)
		- ((3 * ((Y + 4900 + ((M - 14)//12))//100))//4) + D - 32075
)
public month ^<Symbol> = (
	^monthsOfYear at: monthIndex
)
'as yet unclassified'
public dayOfWeek = (
	#BOGUS yourself. (* Ryan is no time expert, this may be incorrect *)
	^daysOfWeek at: (julian \\ 7) + 1
)
'comparing'
public < other <Date> ^<Boolean> = (
	^year < other year
		or: [ year = other year
				and: [ monthIndex < other monthIndex
							or: [ monthIndex = other monthIndex
									and: [ dayOfMonth < other dayOfMonth ]   ]]]
)
public = other <Object> ^<Boolean> = (


	^self == other or:
		[class = other class
			and: [
					year = other year
								and: [ month == other month
								and: [ dayOfMonth = other dayOfMonth ]]
					  ]
		]
)
'copying'
public copy ^<Instance> = (

	^self
)
'operations'
public addDays: days <Int> ^<Date> = (


	^class julian: self julian + days
)
public subtractDate: d <Date> ^<Int> = (
	^d julian -  julian
)
public subtractDays: days <Int> ^<Date> = (

	^class julian:  julian - days
)
'printing'
public printOn: strm <CharOutputStream>
 = (

	strm nextPutAll:  month;
			nextPut: Character space;
			print:  dayOfMonth;
			nextPutAll: ', ';
			print:  year.
)
) : (
'as yet unclassified'
macToday ^<Instance> = (

	|t tm|
	t:: Alien newC: 4.
	[(Alien lookup: 'time' inLibrary: 'libc')
		primFFICallResult: nil
		with: t address.
	tm:: (Alien lookup: 'localtime' inLibrary: 'libc')
		primFFICallResult: (Alien forPointer: 0)
		with: t address.
	
	^self
		newDay: (tm unsignedShortAt: 13)
		monthIndex: (tm unsignedShortAt: 17) + 1
		year: (tm unsignedShortAt: 21) + 1900
	] ensure: [t free]
)
unixToday ^<Instance> = (

	|t tm|
	t:: Alien newC: 4.
	[(Alien lookup: 'time' inLibrary: 'libc.so.6')
		primFFICallResult: nil
		with: t address.
	tm:: (Alien lookup: 'localtime' inLibrary: 'libc.so.6')
		primFFICallResult: (Alien forPointer: 0)
		with: t address.
	
	^self
		newDay: (tm unsignedShortAt: 13)
		monthIndex: (tm unsignedShortAt: 17) + 1
		year: (tm unsignedShortAt: 21) + 1900
	] ensure: [t free]
)
windowsToday ^<Instance> = (

	|r|
	r:: Alien newC: 8*2.
	(Alien lookup: 'GetLocalTime' inLibrary: 'Kernel32.dll')
		primFFICallResult: nil with: r address.

	^[self
		newDay: (r unsignedShortAt: 7)
		monthIndex: (r unsignedShortAt: 3)
		year: (r unsignedShortAt: 1)
	] ensure: [r free]

)
'inquiries'
dateAndTimeNow ^<Tuple[Date,Time]> = (


	^Time dateAndTimeNow
)
dayOfWeek: dayName <Symbol> ^<Int> = (

	(* return the index in the week, where #Monday is 1 *)

	^ daysOfWeek indexOf: dayName ifAbsent: [ error: 'invalid day name' ]
)
daysInMonth: m <Symbol> forYear: y <Int> ^<Int> = (


	self unimplemented
)
daysInYear: y <Int> ^<Int> = (


	self unimplemented
)
indexOfMonth: monthName <Symbol> ^<Int> = (

	(* return the index in the year of the given month, where #January is 1 *)

	^ monthsOfYear indexOf: monthName ifAbsent: [ error: 'invalid month name' ]
)
leapYear: y <Int> ^<Int> = (

	(* Answer 1 if y is a leap year, 0 otherwise *)

	self unimplemented
)
nameOfDay: dayIndex <Int> ^<Symbol> = (

	(* return the day of the week for the given index, where 1 -> #Monday *)

	^ daysOfWeek at: dayIndex
)
nameOfMonth: index <Int> ^<Symbol> = (

	(* return the month of the year for the given index, where 1 -> #January *)

	^ monthsOfYear at: index
)
'instance creation'
julian: JD <Int> ^<Instance> = (
	|J j g dg c dc b db a da y m d Y M D|

	(* Gregorian calendar from Julian day number --Wikipedia *)

	#BOGUS yourself. (* Ryan is no time expert, this may be incorrect *)

	J:: JD (* + 0.5 *).
	j:: J + 32044.
	g:: j // 146097.
	dg:: j \\ 146097.
	c:: (dg // 36524 + 1) * 3 // 4.
	dc:: dg - (c * 36524).
	b:: dc // 1461.
	db:: dc \\ 1461.
	a:: (db // 365 + 1) * 3 // 4.
	da:: db - (a * 365).
	y:: (g * 400) + (c * 100) + (b * 4) + a.
	m:: (da * 5 + 308) // 153 - 2.
	d:: da - ((m + 4) * 153 // 5) + 122.
	Y:: y - 4800 + ((m + 2) // 12).
	M:: (m + 2) \\ 12 + 1.
	D:: d + 1.
	^newDay: D monthIndex: M year: Y.

)
newDay: d <Int> month: m <Symbol> year: y <Int> ^<Instance> = (


	^ newDay: d monthIndex: (self indexOfMonth: m) year: y
)
newDay: d <Int> year: y <Int> ^<Instance> = (


	self unimplemented
)
public today ^<Instance> = (
	vmMirror isWindows ifTrue:[^windowsToday].
	vmMirror isUnixMac ifTrue:[^macToday].
	vmMirror isUnix ifTrue:[^unixToday].
	shouldntHappen
)
)
public class Time fromSeconds: s = Magnitude ((*  *)| 
seconds <Int> = s.  (* seconds since midnight *)
|) (
'accessing'
public asSeconds ^ <Integer> = (
	^seconds
)
public hash ^ <Integer> = (
	^ asSeconds hash
)
public hour ^ <Integer> = (
	^(asSeconds // 3600) \\ 24
)
public minute ^ <Integer> = (
	(* The minute of the hour *)
	^( asSeconds \\ (60*60)) // 60
)
public minutes ^ <Integer> = (
	^ asSeconds // 60
)
public second ^ <Integer> = (
	(* The second of the minute.  Use asSeconds to get the total seconds *)
	^asSeconds \\ 60
)
'arithmetic'
public addTime: amt <Date|Time> ^ <Instance> = (
	^ class fromSeconds:  asSeconds + amt asSeconds
)
'comparing'
public < other <Time> ^ <Boolean> = (
	^asSeconds < other asSeconds
)
public = other <Object> ^ <Boolean> = (
	^self == other or:
		[ class = other class and: [asSeconds = other asSeconds]]
)
'copying'
public copy ^ <Instance> = (
	^self
)
'printing'
public printOn: stream <CharOutputStream>
 = (
	hour > 12
		ifTrue: [stream print: hour - 12]
		ifFalse: [hour < 1
			ifTrue: [stream print: 12]
			ifFalse: [stream print: hour]].	
	stream nextPut: ":".
	minute < 10 ifTrue: [stream print: 0].
	stream print: minute.
	stream nextPut: ":".
	second < 10 ifTrue: [stream print: 0].
	stream print: second.
	stream space.
	hour < 12 
		ifTrue: [stream nextPutAll: 'am']
		ifFalse: [stream nextPutAll: 'pm'].
)
) : (
'as yet unclassified'
unixMacNow ^ <Instance> = (

	|t tm|
	t:: Alien newC: 4.
	[(Alien lookup: 'time' inLibrary: Alien libcName)
		primFFICallResult: nil
		with: t address.
	tm:: (Alien lookup: 'localtime' inLibrary: Alien libcName)
		primFFICallResult: (Alien forPointer: 0)
		with: t address.
	
	^self fromSeconds:
		((tm signedLongAt: 9) * 3600) +
		((tm signedLongAt: 5) * 60) +
		((tm signedLongAt: 1))
	
	] ensure: [t free]
)
windowsNow ^ <Instance> = (

	|r|
	r:: Alien newC: 8*2.
	(Alien lookup: 'GetLocalTime' inLibrary: 'Kernel32.dll')
		primFFICallResult: nil with: r address.

	^[self
		fromSeconds: ((r unsignedShortAt: 9) * 3600) +
		 ((r unsignedShortAt: 11) * 60) +
		 (r unsignedShortAt: 13)
	] ensure: [r free]
)
'inquiries'
clockValue ^ <Float> = (

	(* return a double second clock value reflecting
		elapsed time since Smalltalk started *)

	^vmMirror primitiveElapsedTime
)
public dateAndTimeNow ^ <Tuple[Date,Time]> = (
	| t <SYSTEMTIME> time <Time> date <Date> |
	t:: Time localSYSTEMTIME.
	^[	time:: fromSeconds: (t wHour * 3600) + (t wMinute * 60) + t wSecond.
		date:: Date newDay: t wDay monthIndex: t wMonth year: t wYear.
		date,,time
	 ] ensure: [ t free ]

)
microsecondClockValue ^ <Integer> = (
	^vmMirror microsecondClock
)
public millisecondClockValue ^ <Integer> = (
	^vmMirror millisecondClock
)
public millisecondsToRun: f <[]> ^<Int> = (

	(* Return the number of elapsed milliseconds to run f.  Note that this is NOT
		user CPU seconds; for that use userMillisecondsToRun: *)

	| t <Int> |
	t:: self millisecondClockValue.
	f value.
	^self millisecondClockValue - t
)
totalSeconds ^ <Integer> = (
	self unimplemented
)
'instance creation'
public now ^ <Instance> = (
	vmMirror isWindows ifTrue:[^windowsNow].
	vmMirror isUnixMac ifTrue:[^unixMacNow].
	vmMirror isUnix ifTrue:[^unixMacNow].
	halt.
)
)
public class Timer time: ms callback: c for: a = ((* With this implementation, a repeating timer will keep its actor alive. Should that be the case? *)|
	_delay = Delay forMilliseconds: ms.
	_callback = c.
	_actor = a.
	_process
|) (
'as yet unclassified'
_fire = (
	(actors dispatcher FarReference to: _callback inActor: _actor) <-: value.
)
public _once = (
	#ACCESSBOGUS.
	_process:: [_delay wait. _fire] newProcess.
	_process name: 'One-shot timer for ', _callback printString.
	_process priority: 41.
	_process resume.
)
public _repeat = (
	#ACCESSBOGUS.
	_process:: [[_delay wait. _fire] repeat] newProcess.
	_process name: 'Repeating timer for ', _callback printString.
	_process priority: 41.
	_process resume.
)
public cancel = (
	_process == nil ifFalse: [_process terminate].
)
) : (
'as yet unclassified'
public after: milliseconds do: callback = (
	^(Timer time: milliseconds callback: callback for: actors dispatcher currentActor) _once
)
public every: milliseconds do: callback = (
	^(Timer time: milliseconds callback: callback for: actors dispatcher currentActor) _repeat
)
)
) : (
)
