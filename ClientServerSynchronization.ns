Newspeak3
'OrthogonalSynchronization'
class ClientServerSynchronization = (
|
|
) (
public class ClientToServerChangeLog withChanges: aChangeRecordsCollection withNewObjects: aNewObjectsCollection = (
|
	public changeRecords = aChangeRecordsCollection.
	public newObjectsDefinitions = aNewObjectsCollection.
|
) (
public hasNoChanges = (
	^ changeRecords isEmpty and: [ newObjectsDefinitions isEmpty].
)
public hasNoNewObjectsDefinitions = (
	^ newObjectsDefinitions isEmpty. 
)
) : (
)
public class NewObjectReference toObjectIdentifiedWith: anIdentifier  = (
|
	public identifier = anIdentifier.
|
) (
public existsReferencedObjectIn: aStore = (
	^ aStore containsObjectWithLocalId: identifier
)
public isKindOfNewObjectReference = (
	^ true
)
public referencedObjectFrom: anObjectStore = (
	^ anObjectStore objectWithLocalId: identifier.
)
) : (
)
public class ObjectChangeRecord for: anObjectReference withChanges: valuesBySlot  = (
|
	public objectReference =anObjectReference.
	public changes = valuesBySlot.
|) (
public applyChangesIn: aContext usingMirror: objectMirrorClass = (
	| objectToModify objectToModifyMirror |
	objectToModify:: objectReference referencedObjectFrom: aContext.
	objectToModifyMirror:: objectMirrorClass reflecting: objectToModify.
	changes keysAndValuesDo: [ :slot :reference |
		| referencedObject  |
		referencedObject:: reference referencedObjectFrom: aContext.
		objectToModifyMirror setSlot: slot to: referencedObject.
	].
)
public refersTo: anObject in: aContext = (
	^ objectReference refersTo: anObject inContext: aContext.
)
) : (
)
public class ObjectDefinition classNamed: aClassName enclosingObjectReference: anObjectReference withContents: contents  = (
|
	public className = aClassName.
	public enclosingObjectReference = anObjectReference.
	slotsContents = contents.

|
) (
public createEmptyInstanceUsingEnclosingObjectMirror: anEnclosingObjectMirror  = (
	| klassMirror | 
	klassMirror:: anEnclosingObjectMirror evaluate: ('^self ', className) ifCompilerError: [] ifError: [ :error | error signal ].
	^ klassMirror reflectee basicNew .
)
public fill: anObjectMirror resolvingReferencesWith: anObjectStore = (
	slotsContents keysAndValuesDo: [ :slotName :reference |
		 anObjectMirror setSlot: slotName to: (reference referencedObjectFrom: anObjectStore).
	].

)
public slotNamed: aSlotName hasValue: anObject = (
	^ (slotsContents at: aSlotName) refersTo: anObject.
)
) : (
)
public class ObjectDefinitionWithIdentification id: anId definition: aDefinition = (
|
	public id = anId.
	public definition = aDefinition. 
|
) (
) : (
)
public class ObjectReference toObjectIdentifiedWith: anIdentifier = (
|
	public identifier = anIdentifier.
|
) (
public existsReferencedObjectIn: aStore = (
	^ aStore containsObjectWithGuid: identifier
)
public isKindOfObjectReference = (
	^ true
)
public referencedObjectFrom: anObjectStore = (
	^ anObjectStore objectWithGuid: identifier.
)
public refersTo: anObject  inContext: aContext  = (
	^( aContext isIdentifiable: anObject) and: 
		  [ (aContext isTracked: anObject) and:		
			[identifier = (aContext idForObject: anObject)] ]. 
)
) : (
)
public class ObjectStore = (
|

|
) (
public objectWithGuid: anIdentifier = (
	subclassResponsibility
)
public objectWithLocalId: anIdentifier = (
	subclassResponsibility
)
) : (
)
public class ServerToClientChangeLog  mappingIdsWith: idsMap changeRecords: changes newObjects: newObjectsCollection   = (
|
	public localToGlobalIds = idsMap.
	public changeRecords = changes.
	public newObjects = newObjectsCollection.
|
) (
) : (
)
public class UnidentifiableObject for: aValue = (
|
	value = aValue.
|
) (
public referencedObjectFrom: anObjectStore = (
	^ value.
)
public refersTo: anObject = (
^ refersTo: anObject inContext: nil.
)
public refersTo: anObject inContext: aContext = (
	^ value = anObject.
)
) : (
)
) : (
)
