Newspeak3
'OrthogonalSynchronization'
class ClientServerSynchronization = (
|
|
) (
public class ClientToServerChangeLog withChanges: aChangeRecordsCollection withNewObjects: aNewObjectsCollection = (
|
	public changeRecords = aChangeRecordsCollection.
	public newObjectsDefinitions = aNewObjectsCollection.
|
) (
public hasNoChanges = (
	^ changeRecords isEmpty and: [ newObjectsDefinitions isEmpty].
)
public hasNoNewObjectsDefinitions = (
	^ newObjectsDefinitions isEmpty. 
)
) : (
)
public class ObjectDefinition classNamed: aClassName enclosingObjectReference: anObjectReference withContents: contents  = (
|
	public className = aClassName.
	public enclosingObjectReference = anObjectReference.
	slotsContents = contents.

|
) (
public createEmptyInstanceUsingEnclosingObjectMirror: anEnclosingObjectMirror  = (
	| klass | 
	klass:: anEnclosingObjectMirror perform: className.
	^ klass basicNew .
)
public fill: anObjectMirror resolvingReferencesWith: aReferenceResolver = (
	slotsContents keysAndValuesDo: [ :slotName :reference |
		 anObjectMirror setSlot: slotName to: (aReferenceResolver resolve:  reference).
	].

)
public slotNamed: aSlotName hasValue: anObject = (
	^ (slotsContents at: aSlotName) refersTo: anObject.
)
) : (
)
public class ObjectDefinitionWithIdentification id: anId definition: aDefinition = (
|
	public id = anId.
	public definition = aDefinition. 
|
) (
) : (
)
public class ObjectStore = (
|

|
) (
public objectWithGuid: anIdentifier = (
	subclassResponsibility
)
public objectWithLocalId: anIdentifier = (
	subclassResponsibility
)
) : (
)
public class ServerToClientChangeLog  mappingIdsWith: idsMap changeRecords: changes newObjects: newObjectsCollection   = (
|
	public localToGlobalIds = idsMap.
	changeRecords = changes.
	public newObjects = newObjectsCollection.
|
) (
) : (
)
class TransientObjectStore fromContext: aTrackingContext = ObjectStore (
|
	changeTrackingContext = aTrackingContext.
	definitionsWithId
	objectMaterializer
|
) (
public objectWithGuid: anIdentifier = (
	^ changeTrackingContext objectById: anIdentifier ifNotFound: [
		| definitionWithId |
		definitionWithId:: definitionsWithId detect: [ :each | each id = anIdentifier].
		objectMaterializer  materializeObjectFrom: definitionWithId definition.
	]. 
)
public objectWithLocalId: anIdentifier = (
	subclassResponsibility
)
) : (
)
) : (
)
