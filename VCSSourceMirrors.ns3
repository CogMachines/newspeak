Newspeak3
'StructuredVCS'
class VCSSourceMirrors usingPlatform: p vcs: vcs ide: ide = (
(* Newspeak Source Mirrors for version control

Copyright (c) 2010-2011 Matthias Kleine

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ''Software''), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ''AS IS'', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*)||
private Differencer = vcs diffing Differencer.
private imageMirrorCache = vcs imageMirrorCache.

private PackageInfo = p squeak PackageInfo.
private Dictionary = p squeak Dictionary.
private OrderedCollection = p squeak OrderedCollection.
MultiByteBinaryOrTextStream = p squeak MultiByteBinaryOrTextStream.
PNGReadWriter = p squeak PNGReadWriter.

private newspeakSourceMirrors = vcs newspeakSourceMirrors.
private smalltalkSourceMirrors = vcs smalltalkSourceMirrors.
private Root = ide namespacing Root.

(* Other fields *)
public mirrorLoader = MirrorLoader new.
||) (
class ImageSourceMirror = SourceMirror (|
	public name
	public form
|) (
'as yet unclassified'
public children = (
	^{}
)
public contents = (

	^ ByteArray streamContents: [:stream | streamTo: stream]
)
public contentsEquals: other = (
	form unhibernate.
	other form unhibernate.
	^form extent = other form extent
		and: [form bits = other form bits]
)
public filename = (
	^name, '.png'
)
public installAsToplevelClass = (
	Root at: name asSymbol put: form
)
public isImageMirror = (
	^true
)
public streamTo: stream <WriteStream> = (
	stream binary.
	PNGReadWriter putForm: form onStream: stream
)
) : (
'as yet unclassified'
public fromStream: s name: n = (
	^self new name: n; form: (PNGReadWriter formFromStream: s contents asByteArray readStream)
)
)
class MirrorLoader = () (
'as yet unclassified'
imageMirrorsNotCorrespondingTo: mirrors = (

	| classes packages images texts |
	
	#BOGUS yourself. (* Please refactor me! *)

	classes:: topLevelClasses select: [:each |
		mirrors noneSatisfy: [:mirror | 
			mirror isClassDeclarationMirror and: [mirror name = each name]]].
	classes:: classes collect: [:each |
		NameOnlySourceMirror 
			named: each name , ' [module]'
			actualMirror: (Future computing: [imageMirrorCache at: each name , '.ns3' ifAbsentPut: [mirrorForClass: each]])].

	packages:: PackageInfo allPackages select: [:each |
		mirrors noneSatisfy: [:mirror | mirror isPackageMirror and: [mirror name = each name]]].
	packages:: packages collect: [:each |
		NameOnlySourceMirror
			named: each name , ' [package]'
			actualMirror: (Future computing: [imageMirrorCache at: each name , '.st' ifAbsentPut: [mirrorForPackage: each]])].
	
	images:: OrderedCollection new.
	Root keysAndValuesDo: [:name :each |
		(each isForm and: [name ~= #Display] and: [
			mirrors noneSatisfy: [:mirror | 
				mirror isImageMirror and: [mirror name = name]]]) ifTrue: [
					images add: (ImageSourceMirror new name: name; form: each)]].
	images:: images collect: [:ea | NameOnlySourceMirror named: ea name , ' [image]' actualMirror: ea].
	
	texts:: OrderedCollection new.
	Root keysAndValuesDo: [:name :each |
		(each isString and: [mirrors noneSatisfy: [:mirror | 
			mirror isTextMirror and: [mirror name = name]]]) ifTrue: [
					texts add: (TextSourceMirror new name: name; contents: each)]].
	texts:: texts collect: [:ea | NameOnlySourceMirror named: ea name , ' [text]' actualMirror: ea].
	
	
	^classes , packages , images , texts
)
installMirrorsAsToplevelClasses: newMirrors = (

	| changedMirrors |
	
	#BOGUS yourself. (* Why is the argument a dictionary? *)
	
	changedMirrors:: newMirrors values select: [:each |
		self
			mirrorForClassInImageCorrespondingTo: each
			ifPresent: [:it | (Differencer allEqual: {each. it}) not]
			ifAbsent: [true]].
		
	(* This installation is not atomic *)
	smalltalkSourceMirrors installMirrors: 
		(changedMirrors select: [:ea | ea isPackageMirror]).
	newMirrors do: [:ea |
		ea isImageMirror ifTrue: [Root at: ea name asSymbol put: ea form].
		ea isTextMirror ifTrue: [Root at: ea name asSymbol put: ea contents]].

	(* This installation is atomic *)
	newspeakSourceMirrors installMirrors:
		(changedMirrors select: [:ea | ea isClassDeclarationMirror]).
)
methodMirrorForStream: stream ifError: errorBlock = (

	#BOGUS yourself. (* Used by merging UI; consider refactoring. *)

	^newspeakSourceMirrors methodDeclCache mirrorForStream: stream ifError: errorBlock
)
mirrorForClass: aClass = (

	^newspeakSourceMirrors mirrorForClass: aClass
)
mirrorForClassInImageCorrespondingTo: mirror ifPresent: presentBlock ifAbsent: absentBlock = (

        | correspondingMirror |

	mirror isPackageMirror ifTrue: [
		correspondingMirror:: imageMirrorCache
			at: mirror filename
			ifAbsentPut: [ 
				|pkgInfo|
				pkgInfo:: PackageInfo allPackages 
					detect: [:e | e name = mirror name]
					ifNone: [^absentBlock value].
				mirrorForPackage: pkgInfo].
		^presentBlock value: correspondingMirror.
	].

	mirror isClassDeclarationMirror ifTrue: [
        correspondingMirror:: imageMirrorCache
                at: mirror filename
                ifAbsentPut: [ | existingClass |
                        existingClass:: Root
                                at: mirror name asSymbol
                                ifAbsent: [^ absentBlock value].
				existingClass isBehavior ifFalse: [^ absentBlock value].
                        mirrorForClass: existingClass].
        ^ presentBlock value: correspondingMirror].

	mirror isImageMirror ifTrue: [
		| form = Root at: mirror name asSymbol ifAbsent: [^absentBlock value]. |
		form isForm ifFalse: [^absentBlock value].
		^presentBlock value: (ImageSourceMirror new name: mirror name; form: form)].

	mirror isTextMirror ifTrue: [
		| text = Root at: mirror name asSymbol ifAbsent: [^absentBlock value]. |
		text isString ifFalse: [^absentBlock value].
		^presentBlock value: (TextSourceMirror new name: mirror name; contents: text)].
	
	halt.
)
mirrorForPackage: pkgInfo = (

	^smalltalkSourceMirrors mirrorForPackage: pkgInfo
)
mirrorForStream: stream name: name = (
	(name endsWith: '.png')
		ifTrue: [^ImageSourceMirror fromStream: stream name: (name allButLast: 4)].
	(name endsWith: '.txt')
		ifTrue: [^TextSourceMirror new
			contents: (streamContentsForTextResource: stream); name: (name allButLast: 4)].
	stream reset.
	(stream next: 'Smalltalk' size) = 'Smalltalk' asByteArray
		ifTrue: [^smalltalkSourceMirrors mirrorForStream: (transformStreamForSource: stream)].
	stream reset.
	(stream next: 'Newspeak' size) = 'Newspeak' asByteArray
		ifTrue: [^newspeakSourceMirrors mirrorForStream: (transformStreamForSource: stream)].
	^nil
)
streamContentsForTextResource: stream = (
	^(MultiByteBinaryOrTextStream 
		with: stream contents asString
		encoding: 'utf8') reset contents
)
topLevelClasses = (
	^Root values select:
		[:each | each isBehavior
			and: [each language isNewspeakLanguage3]
			and: [each enclosingClass isNil]]
)
transformStreamForSource: stream = (
	#BOGUS. (* We should preserve source line endings, but doing so will require fixing many part of the system that assume CR line endings. *)
	^(MultiByteBinaryOrTextStream 
		with: stream contents asString
		encoding: 'utf8') reset contents withSqueakLineEndings readStream
)
) : (
)
class NameOnlySourceMirror named: n actualMirror: m = (
(* A way to put off actually constructing a source mirror, which might involve expensive parsing. *)|
	name = n.
	actualMirror <Delay[SourceMirror]> = m.
|) (
) : (
)
class SourceMirror = (|
|) (
'as yet unclassified'
public contents = (

	^ String streamContents: [:stream | streamTo: stream]
)
public contentsEquals: other= (
	
	^ contents = other contents
)
public correspondsHash = (

	^ name hash
)
public correspondsTo: other = (

	^ name = other name
)
end = (
	
	^ yield end
)
source = (

	^ contents
)
start = (

	^ yield start
)
) : (
)
class StringMirror = (
(* Encapsulates functionality for some leaf elements, e.g. category or class comment *)|
	public string
|) (
'as yet unclassified'
public children = (

	^ {}
)
public contentsEquals: other = (

	^ string = other string
)
public correspondsHash = (

	^ 42
)
public correspondsTo: other = (

	^ true
)
) : (
)
class TextSourceMirror = SourceMirror (|
	public name
	public contents
|) (
'as yet unclassified'
public children = (
	^{}
)
public contentsEquals: other = (
	^contents = other contents
)
public filename = (
	^name, '.txt'
)
public installAsToplevelClass = (
	Root at: name asSymbol put: contents
)
public isTextMirror = (
	^true
)
) : (
)
'as yet unclassified'
flatten: collection = (

	| result |
	result:: OrderedCollection new.
	collection do: [:each | result addAll: each].
	^ result
)
imageMirrorsNotCorrespondingTo: mirrors = (

	^ mirrorLoader imageMirrorsNotCorrespondingTo: mirrors
)
installMirrorsAsToplevelClasses: newMirrors = (

	mirrorLoader installMirrorsAsToplevelClasses: newMirrors
)
methodMirrorForStream: stream ifError: errorBlock = (

	^ mirrorLoader methodMirrorForStream: stream ifError: errorBlock
)
mirrorForClassInImageCorrespondingTo: mirror ifPresent: presentBlock ifAbsent: absentBlock = (

	^ mirrorLoader mirrorForClassInImageCorrespondingTo: mirror ifPresent: presentBlock ifAbsent: absentBlock
)
mirrorForStream: stream name: name = (

	^ mirrorLoader mirrorForStream: stream name: name
)
) : (
)
