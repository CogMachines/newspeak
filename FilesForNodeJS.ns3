Newspeak3
'NS2JS'
class FilesForNodeJS usingPlatform: platform = (
(*

   Copyright 2012 SAP AG.
   
   Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
*)|
	private Alien = platform aliens Alien.
	private ReadStream = platform streams CharacterReadStream.
	private WriteStream = platform streams CharacterReadWriteStream.
	private JavascriptEvaluator = platform aliens JavascriptEvaluator.
	private MutableString = platform kernel MutableString.
|)
(
class FileDescriptor path: filePath mode: fileMode = (
(*File descriptor, as understood by NSStreams, i.e. not just an OS integer but an object that holds onto a buffer.*)|
	public path = filePath.
	public mode = fileMode.
	public bufferS
	public fd

	private cachedFs
|)
('as yet unclassified'
buffer = (
	bufferS isNil ifTrue:
		[bufferS:: Alien onJavascriptObject: (JavascriptEvaluator eval: 'new Buffer(512)')].
	^bufferS
)
bufferSize = (
	^buffer length
)
flushIfFail = (
	(*Implement me*)
)
fs = (
	cachedFs isNil ifTrue:
		[cachedFs:: Alien onJavascriptObject: (JavascriptEvaluator eval: 'require("fs")')].
	^cachedFs
)
getBufferSize = (
	halt.
	(*is this even being used?*)
)
openIfFail: errorBlock = (
	fd:: fs openSync: {path. 'r'}
)
readAt: pos <Integer> ifFail: errorBlock = (
	| byteCount |
	byteCount:: fs readSync: {fd. buffer. 0. bufferSize}.
	^byteCount
)
severExternalConnections = (
	buffer:: nil
)
write: nBytes <Integer> at: pos <Integer> ifFail: errorBlock = (
	(*Implement me*)
)
| bytfs = (
	cachedFs isNil ifTrue:
		[cachedFs:: Alien onJavascriptObject: (JavascriptEvaluator eval: 'require("fs")')].
	^cachedFs
)) : ()
class FileReader path: fp = (
(*Reads and returns the contents of a file as a string.*)|
	filePath = fp.
	readData = WriteStream on: (MutableString new: 100).
	fs
	fd
	buffer
	bufferAlien
|)
('as yet unclassified'
bufferSize = (
	^1024
)
contents = (
	| count |
	fs:: Alien onJavascriptObject: (JavascriptEvaluator eval: 'require("fs")').
	buffer:: JavascriptEvaluator eval: 'new Buffer(1024)'.
	bufferAlien:: Alien onJavascriptObject: buffer.
	fd:: fs openSync: {filePath. 'r'. 666}.
	[readChunk = bufferSize] whileTrue.
	^readData contents
)
readChunk = (
	| count |
	count:: fs readSync: {fd. buffer. 0. bufferSize}.
	readData nextPutAll: (bufferAlien toString: {'utf8'. 0. count}).
	^count
)) : ()
class FileWriter path: fp = (
(*Writes a string to a file.*)|
	filePath = fp.
	fs
	fd
|)
('as yet unclassified'
write: aString = (
	fs:: Alien onJavascriptObject: (JavascriptEvaluator eval: 'require("fs")').
	fs writeFileSync: {filePath. aString}
)) : ()) : ()