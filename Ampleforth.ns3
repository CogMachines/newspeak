Newspeak3
'Samples'
class Ampleforth packageUsing: manifest = (| 
  BrowsingForHTML = manifest BrowsingForHTML. 
|) (
class Embedder usingPlatform: p browsing: b = (|
	Subject = p hopscotch core Subject.
	Presenter = p hopscotch core Presenter.
	ObjectSubject = b ObjectSubject.
	TextEditorFragment = p hopscotch fragments TextEditorFragment.
	Color = p graphics Color.
	Gradient = p hopscotch Gradient.
	List = p collections OrderedCollection.
	ObjectMirror = p mirrors ObjectMirror.
	MixinBuilder = p mirrors MixinBuilder.
	EmbeddedHopscotchWindow = p hopscotch core EmbeddedHopscotchWindow.
	
	browsing = b.
	document = p aliens global at: 'document'.
	platformMirror = ObjectMirror reflecting: p.
|) (
class SnippetPresenter onSubject: s = Presenter onSubject: s (| resultHolder = holder: [nothing]. |) (
'as yet unclassified'
definition = (
	| result |
	^column: {
		TextEditorFragment new
			text: subject snippet;
			changeResponse: [:editor | result content: (evaluate: editor textBeingAccepted asString)].
		result:: holder: [evaluate: subject snippet].
	}
)
evaluate: expression = (
	| s |
	s:: platformMirror
		evaluate: (withoutNbsp: expression)
		ifCompilerError: [:e | ^label: 'compile-time error: ', e printString]
		ifError: [:e | ^label: 'runtime error: ', e printString].
		^resultHolder content: 
		  (link: s reflectee printString
		   action: [enterSubject: (ObjectSubject onModel: s) fromSnippet: subject]).
)
withoutNbsp: string = (
	|
	nonbreakingSpace = [String fromCharCode: 160] on: Error do: [String value: 160].
	space = [String fromCharCode: 32] on: Error do: [String value: 32].
	|
	^string replaceAll: nonbreakingSpace with: space.
)
) : (
)
public class SnippetSubject onModel: m = Subject onModel: m () (
'as yet unclassified'
createPresenter = (
	^SnippetPresenter onSubject: self
)
public snippet = (
	^model
)
) : (
)
'as yet unclassified'
public processEvaluators = (
	| elements = document getElementsByClassName: 'evaluator'. |
	
	1 to: (elements at: 'length') do: [:i |
		|
		element = elements at: i - 1.
		expression = element getAttribute: 'expression'.
		|
		EmbeddedHopscotchWindow
			into: element
			openSubject: (SnippetSubject onModel: expression)
	].
)
public processMinibrowsers = (
	| elements = document getElementsByClassName: 'minibrowser'. |
	1 to: (elements at: 'length')  do: [:i |
		|
		element = elements at: i - 1.
		|
		EmbeddedHopscotchWindow
			into: element
			openSubject: (browsing ObjectSubject onModel: platformMirror)
	].	
)
) : (
)
'as yet unclassified'
public main: platform args: args = (
	| embedder elements browsing |
	browsing:: BrowsingForHTML usingPlatform: platform.
	embedder:: Embedder usingPlatform: platform browsing: browsing.
      embedder processEvaluators; processMinibrowsers.
)
) : (
)
