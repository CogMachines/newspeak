Newspeak3
'NSCollections'
class CollectionsTesting usingCollections: c minitest: m = (|
private TestContext = m TestContext.

private ArrayList = c OrderedCollection.
private HashSet = c Set.
private HashMap = c Dictionary.
private IdentityHashSet = c IdentitySet.
private IdentityHashMap = c IdentityDictionary.
|) (
public class CollectionTests = TestContext () (
'as yet unclassified'
rangeError = (
	^Error
)
public testArrayList = (
	| list = ArrayList new. |
	assert: list size equals: 0.
	assert: list isEmpty.
	should: [list at: 0] signal: rangeError.
	should: [list at: -1] signal: rangeError.

	list addLast: 10.
	assert: list size equals: 1.
	deny: list isEmpty.
	should: [list at: 0] signal: rangeError.
	assert: (list at: 1) equals: 10.
	should: [list at: 2] signal: rangeError.

	list addFirst: 20.
	assert: list size equals: 2.
	should: [list at: 0] signal: rangeError.
	assert: (list at: 1) equals: 20.
	assert: (list at: 2) equals: 10.
	should: [list at: 3] signal: rangeError.

	list include: 20.
	assert: list size equals: 2.
	should: [list at: 0] signal: rangeError.
	assert: (list at: 1) equals: 20.
	assert: (list at: 2) equals: 10.
	should: [list at: 3] signal: rangeError.
	
	assert: (list at: 2 put: 30) equals: 30.
	should: [list at: 0 put: nil] signal: rangeError.
	should: [list at: 3 put: nil] signal: rangeError.
	
	assert: (list includes: 30).
	deny: (list includes: 10).
	
	assert: list removeLast equals: 30.
	assert: list size equals: 1.
	should: [list at: 0] signal: rangeError.
	assert: (list at: 1) equals: 20.
	should: [list at: 2] signal: rangeError.
)
public testArrayListEnumeration = (
	| list evens odds sum |
	list:: ArrayList withAll: {1. 2. 3. 4. 5. 6. 7. 8. 9}.

	evens:: list select: [:e | e \\ 2 = 0].
	assert: evens size equals: 4.

	odds:: list reject: [:e | e \\ 2 = 0].
	assert: odds size equals: 5.
	
	sum:: list inject: 0 into: [:a :b | a + b].
	assert: sum equals: 45.
	
	sum:: list reduce: [:a :b | a + b] ifEmpty: [fail].
	assert: sum equals: 45.

	sum:: list reduce: [:a :b | a + b].
	assert: sum equals: 45.

	assert: (list anySatisfy: [:e | e > 0]).
	assert: (list allSatisfy: [:e | e > 0]).
	deny: (list noneSatisfy: [:e | e > 0]).

	deny: (list anySatisfy: [:e | e < 0]).
	deny: (list allSatisfy: [:e | e < 0]).
	assert: (list noneSatisfy: [:e | e < 0]).

	assert: (list detect: [:e | e > 5]) equals: 6.
	assert: (list detect: [:e | e > 55] ifNone: ['None']) equals: 'None'.
)
public testHashMap = (
	| map = HashMap new. |
	assert: map size equals: 0.
	assert: map isEmpty.
	should: [map at: 'A'] signal: rangeError.
	
	assert: (map at: 'A' put: 'AA') equals: 'AA'.
	assert: (map at: 'B' put: 'BB') equals: 'BB'.
	assert: (map at: 'C' put: 'CC') equals: 'CC'.
	assert: map size equals: 3.
	deny: map isEmpty.
	assert: (map at: 'A') equals: 'AA'.
	assert: (map at: 'B') equals: 'BB'.
	assert: (map at: 'C') equals: 'CC'.
	should: [map at: 'D'] signal: rangeError.
	assert: (map at: 'D' ifAbsent: ['None']) equals: 'None'.

	deny: (map includesKey: 'D').
	assert: (map at: 'D' ifAbsentPut: ['DD']) equals: 'DD'.
	assert: (map at: 'D' ifAbsentPut: [fail]) equals: 'DD'.
	assert: (map includesKey: 'D').
	
	assert: (map removeKey: 'B') equals: 'BB'.
	should: [map removeKey: 'B'] signal: rangeError.
	assert: (map removeKey: 'B' ifAbsent: ['None']) equals: 'None'.

	assert: (map at: 'A' put: 'newAA') equals: 'newAA'.
	assert: (map at: 'A') equals: 'newAA'.
	
	assert: map size equals: 3.
)
public testHashSet = (
	| set = HashSet new. |
	assert: set size equals: 0.
	assert: set isEmpty.
	should: [set at: 0] signal: rangeError.
	
	assert: (set add: 2) equals: 2.
	assert: set size equals: 1.
	deny: set isEmpty.
	
	assert: (set add: 2) equals: 2.
	assert: set size equals: 1.

	set add: 4; include: 6; add: 8.
	set addAll: {1. 2. 3. 4}.
	assert: set size equals: 6.
	
	assert: (set remove: 3) equals: 3.
	assert: set size equals: 5.

	set removeAllSuchThat: [:e | e \\ 2 = 0].
	assert: set size equals: 1.
)
public testIdentityHashMap = (
	| map = IdentityHashMap new. |
	assert: map size equals: 0.
	assert: map isEmpty.
	should: [map at: 'A'] signal: rangeError.
	
	assert: (map at: 'A' put: 'AA') equals: 'AA'.
	assert: (map at: 'B' put: 'BB') equals: 'BB'.
	assert: (map at: 'C' put: 'CC') equals: 'CC'.
	assert: map size equals: 3.
	deny: map isEmpty.
	assert: (map at: 'A') equals: 'AA'.
	assert: (map at: 'B') equals: 'BB'.
	assert: (map at: 'C') equals: 'CC'.
	should: [map at: 'D'] signal: rangeError.
	assert: (map at: 'D' ifAbsent: ['None']) equals: 'None'.

	deny: (map includesKey: 'D').
	assert: (map at: 'D' ifAbsentPut: ['DD']) equals: 'DD'.
	assert: (map at: 'D' ifAbsentPut: [fail]) equals: 'DD'.
	assert: (map includesKey: 'D').
	
	assert: (map removeKey: 'B') equals: 'BB'.
	should: [map removeKey: 'B'] signal: rangeError.
	assert: (map removeKey: 'B' ifAbsent: ['None']) equals: 'None'.

	assert: (map at: 'A' put: 'newAA') equals: 'newAA'.
	assert: (map at: 'A') equals: 'newAA'.
	
	assert: map size equals: 3.
)
public testIdentityHashSet = (
	| set = IdentityHashSet new. |
	assert: set size equals: 0.
	assert: set isEmpty.
	should: [set at: 0] signal: rangeError.
	
	assert: (set add: 2) equals: 2.
	assert: set size equals: 1.
	deny: set isEmpty.
	
	assert: (set add: 2) equals: 2.
	assert: set size equals: 1.

	set add: 4; include: 6; add: 8.
	set addAll: {1. 2. 3. 4}.
	assert: set size equals: 6.
	
	assert: (set remove: 3) equals: 3.
	assert: set size equals: 5.

	set removeAllSuchThat: [:e | e \\ 2 = 0].
	assert: set size equals: 1.
)
) : (
'as yet unclassified'
TEST_CONTEXT = ()
)
) : (
)
