Newspeak3
'Actors'
class ActorSystem usingPlatform: p withDispatcher: D <Dispatcher class> withPastime: P <Pastime class> withMirrors: M <ActorMirrors class> = (
(*An actor system is a composition of an actor dispatcher and an actor future module (Pastime).

(ActorSystem 
	usingPlatform: platform
	withDispatcher: ProcessPoolDispatcherForSqueak 
	withPastime: Pastime
	withMirrors: ActorMirrors) install.
*)||
	private platform = p.

	private dispatcher = D usingPlatform: p usingPastime: pastime.
	private pastime = P usingPlatform: p usingDispatcher: dispatcher.

	public mirrors = M usingPastime: pastime usingDispatcher: dispatcher.

	public ActorFuture = pastime Bender.
||dispatcher startDispatcher)
('as yet unclassified'
createActor: mixin <Mixin> ^ <EventualReference[Class]> = (
	^dispatcher createActor: mixin.
)
createActorFromValue: v <Value> ^ <EventualReference[Class]> = (
	^dispatcher createActorFromValue: v.
)
eventualSendProxyFor: target = (
	^mirrors EventualSendProxy for: target.
)) : ()