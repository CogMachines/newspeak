Newspeak3
'Mirrors'
class MirrorsForDart usingPlatform: p = (
(* Mirrors for Newspeak on Dart. Just enough to get the parser library working.

Derived from NewspeakMirrors[ForSqueak]

Copyright 2008 Cadence Design Systems, Inc.
Copyright (c) 2009-2010 Gilad Bracha
Copyright 2011 Gilad Bracha, Ryan Macnak and Cadence Design Systems
Copyright 2012 Google Inc.

Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0 *)|
private List = p collections List.
|) (
class ClassMirror reflecting: klass = Mirror reflecting: klass (
(*  *)) (
'as yet unclassified'
name ^<Symbol> = (
	^reflectee name
)
public slots ^<MirrorGroup[SlotMirror]> = (
	| vars k |
	vars:: List new.
	k:: reflectee.
	[k == nil] whileFalse:
		[(* This vmmirror call does not include inherited members in the result. *)
		vars addAll: (vmmirror slotNamesOf: k).
		k:: k superclass].

	^ImmutableMirrorGroup group: (vars collect: [:ea | SlotMirror reflecting: ea])
)
superclass ^<ClassMirror> = (
	^reflectee superclass ifNotNil: [:it | ClassMirror reflecting: it]
)
) : (
)
class ImmutableMirrorGroup group: ms <Collection[Mirror]> = (
(* Immutable mirror groups do not support adding or removing mirrors. They are created from an initial set of mirrors passed to the factory method.

However, the API does include mutators, which all fail if called.  This allows them to provide good error messages when used in a context that might attempt to mutate them. An example would be a mutable mixin mirror that does not allow changes to its representation; it includes immutable mirror groups for its slots and classes, and a mutable mirror group for its methods. *)|
	protected mirrors <Collection[Mirror]> = List withAll: ms. (* Preserve order.  Keep source code order if applicable.  Shape is important for many classes known to the VM. *)
|) (
'as yet unclassified'
addFromSource: s <String> = (
	^Error signal: 'Adding mirrors not allowed on an immutable mirror group!'
)
addMirror: m <Mirror> = (
	^Error signal: 'Adding mirrors not allowed on an immutable mirror group!'
)
collect: blk <[:Mirror | T def]> ^ <Collection[T]> = (
(* It may be that this class should mix in or otherwise inherit from Collection - but only when we have a small, clean Collection class. For the time being, it is expedient to support key parts of the Collection protocol *)
	^mirrors collect: blk
)
detect: blk  <[:Mirror | Boolean]> ^ <Mirror> = (
(* See comments in collect: *)
	^mirrors detect: blk
)
do: blk <[:Mirror]> = (
	mirrors do: blk
)
findMirrorNamed: n <Symbol> ^ <Mirror> = (
	mirrors do: [:mirror | mirror name = n ifTrue: [^mirror]].
	^nil
)
includesMirrorNamed: n <Symbol>  = (
	mirrors do: [:mirror | mirror name = n ifTrue: [^true]].
	^false
)
removeMirror: m <Mirror> = (
	^Error signal: 'Removng mirrors not allowed on an immutable mirror group!'
)
removeMirrorNamed: m <Symbol | String> = (
	^Error signal: 'Removng mirrors not allowed on an immutable mirror group!'
)
select: blk  <[:Mirror | Boolean]> ^ <Collection[Mirror]> = (
(* See comments in collect: *)
	^mirrors select: blk
)
size ^ <Integer> = (
	^mirrors size
)
) : (
)
class Mirror reflecting: r = (|
	reflectee = r.
|) (
'as yet unclassified'
printString = (
	^class name, ' reflecting: ', reflectee printString.
)
) : (
)
class ObjectMirror reflecting: obj = Mirror reflecting: obj () (
'as yet unclassified'
public getClassIfFail: blk = (
	^ClassMirror reflecting: (dart memberOf: reflectee at: 'klass_').
)
public getSlot: slotName ifFail: blk = (
	^ObjectMirror reflecting: 
		(vmmirror for: reflectee getSlot: slotName dartString)
)
reflecteeIfFail: failBlk = (
	^self reflectee
)
public setSlot: slotName to: obj ifFail: blk = (
	vmmirror for: reflectee setSlot: slotName dartString to: obj
)
) : (
)
class SlotMirror reflecting: slot = Mirror reflecting: slot (
(* Really a slot declaration, but we retain the name for consistency with the other implementations. *)) (
'as yet unclassified'
name ^<String> = (
	^reflectee
)
) : (
)
) : (
)
