Newspeak3
'NSGraphics'
class GraphicsForHTML5 usingPlatform: p = (|
document = p aliens global at: 'document'.
body = document at: 'body'.
|)
(
class Canvas width: w height: h = (|
private alien ::= document createElement: 'canvas'.
|alien at: 'width' put: w.
alien at: 'height' put: h.
(alien at: 'style') at: 'position' put: 'relative')
('as yet unclassified'
appendToBody = (
	body appendChild: alien.
)
context = (
	^Context on: (alien getContext: '2d')
)
keyDownAction: onKeyPressed <[:String]> = (
	(* The canvas element itself doesn't seem to get key events. *)
	body
		addEventListener: 'keydown'
		with: [:e | onKeyPressed value: (String fromCharCode: (e at: 'keyCode'))]
)
mouseDownAction: onMouseDown <[:Point]> = (
	alien
		addEventListener: 'mousedown'
		with: [:e | onMouseDown value: (Point x: (e at: 'offsetX') y: (e at: 'offsetY'))].
)
mouseMovedAction: onMouseMoved <[:Point]> = (
	alien
		addEventListener: 'mousemove'
		with: [:e | onMouseMoved value: (Point x: (e at: 'offsetX') y: (e at: 'offsetY'))].
)) : ()
class Color scaledR: r g: g b: b a: a = (|
red <Integer> = r.
green <Integer> = g.
blue <Integer> = b.
alpha <Integer> = a.
|)
('as yet unclassified'
applyToStyle: style = (
	style setProperty: 'background-color' to: self asCSSString
)
asCSSString = (
	^'rgba(', red printString, ',', green printString, ',', blue printString, ',', alpha printString, ')'
)) : ('as yet unclassified'
black = (
	^self scaledR: 0 g: 0 b: 0 a: 255
)
gray: brightness = (
	^self r: brightness g: brightness b: brightness
)
h: hue s: saturation v: brightness = (
	| s v hf i f p q t | 
	s:: (saturation asFloat max: 0.0) min: 1.0.
	v:: (brightness asFloat max: 0.0) min: 1.0.

	(* zero saturation yields gray with the given brightness *)
	s = 0.0 ifTrue: [ ^ self r: v g: v b: v ].

	hf:: hue asFloat.
	(hf < 0.0 or: [hf >= 360.0])
		ifTrue: [hf:: hf \\ 360].
	hf:: hf / 60.0.
	i:: hf asInteger.  (* integer part of hue *)
	f:: hf - i. (* hf fractionPart. *)  (* fractional part of hue *)
	p:: (1.0 - s) * v.
	q:: (1.0 - (s * f)) * v.
	t:: (1.0 - (s * (1.0 - f))) * v.

	0 = i ifTrue: [ ^ self r: v g: t b: p ].
	1 = i ifTrue: [ ^ self r: q g: v b: p ].
	2 = i ifTrue: [ ^ self r: p g: v b: t ].
	3 = i ifTrue: [ ^ self r: p g: q b: v ].
	4 = i ifTrue: [ ^ self r: t g: p b: v ].
	5 = i ifTrue: [ ^ self r: v g: p b: q ].

	Error signal: 'implementation error'.
)
r: r g: g b: b = (
	^self scaledR: (r * 255) floor g: (g * 255) floor b: (b * 255) floor a: 255
)
r: r g: g b: b a: a = (
	^self scaledR: (r * 255) floor g: (g * 255) floor b: (b * 255) floor a: a
)
white = (
	^self scaledR: 255 g: 255 b: 255 a: 255
))
class Context on: a = (|
alien = a.
|)
('as yet unclassified'
arcAt: center radius: radius from: startAngle to: stopAngle = (
	alien arc: center x with: center y with: radius with: startAngle with: stopAngle
)
beginPath = (
	alien beginPath.
)
fill = (
	alien fill.
)
fillStyle: c <Color> = (
	alien at: 'fillStyle' put: c asCSSString.
)
fillText: string at: p  = (
	alien fillText: string with: p x with: p y
)
lineTo: p = (
	alien lineTo: p x with: p y
)
moveTo: p = (
	alien moveTo: p x with: p y
)
rectangle: r = (
	alien rect: r origin x with: r origin y with: r extent x with: r extent y
)
stroke = (
	alien stroke.
)
strokeStyle: c <Color> = (
	alien at: 'strokeStyle' put: c asCSSString
)) : ()
class Point x: xCoord y: yCoord = (|
x <Number> = xCoord.
y <Number> = yCoord.
|)
('as yet unclassified'
= other <Object> ^<Boolean> = (
	^other isPoint and: [x = other x and: [y = other y]]
)
corner: corner <Point> ^<Rectangle> = (
	^Rectangle origin: self corner: corner
)
extent: extent <Point> ^<Rectangle> = (
	^Rectangle origin: self extent: extent
)
hash ^<Integer> = (
	^x hash bitXor: y hash
)
isPoint ^<Boolean> = (
	^true
)
printString ^<String> = (
	^x printString, ' @ ', y printString
)
r ^<Number> = (
	^((x*x) + (y*y)) sqrt
)
theta ^<Number> = (
	Error signal: 'Unimplemented'
)) : ('as yet unclassified'
r: r <Number> theta: theta <Number> ^<Point> = (
	^self x: r * theta cos y: r * theta sin
)
zero ^<Point> = (
	^self x: 0 y: 0
))
class Rectangle origin: o corner: c = (|
origin <Point> = o.
corner <Point> = c.
|)
('as yet unclassified'
= other ^<Boolean> = (
	^other isRectangle and: [origin = other origin and: [corner = other corner]]
)
center = (
	^Point x: origin x + ((corner x - origin x) / 2) y: origin y + ((corner y - origin y) / 2)
)
containsPoint: p = (
	^((origin x <= p x
		and: [origin y <= p y])
		and: [corner x >= p x])
		and: [corner y >= p y]
)
extent = (
	^Point x: corner x - origin x y: corner y - origin y 
)
hash ^<Integer> = (
	^origin hash bitXor: corner hash
)
insetBy: delta = (
	^Rectangle
		origin: (Point x: origin x + delta x y: origin y + delta y)
		corner: (Point x: corner x - delta x y: corner y - delta y)
)
isRectangle ^<Boolean> = (
	^true
)
printString ^<String> = (
	^'Rectangle origin: ', origin printString, ' corner: ', corner printString
)) : ('as yet unclassified'
origin: o <Point> extent: e <Point> ^<Rectangle> = (
	^self origin: o corner: (Point x: o x + e x y: o y + e y)
))'as yet unclassified'
openTestCanvas: extent = (
	| div canvas |
	canvas:: Canvas width: extent x height: extent y.
	div:: document createElement: 'div'.
	(div at: 'style')
		at: 'borderStyle' put: 'solid';
		at: 'borderWidth' put: '20px';
		at: 'borderRadius' put: '25px';
		at: 'borderColor' put: 'black';
		at: 'padding' put: '10px'.
	div appendChild: canvas alien.
	body appendChild: div.
	^canvas
)) : ()