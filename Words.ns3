Newspeak3
'Samples'
class Words packageUsing: manifest = (|
	wordsByFrequency ::= manifest wordsByFrequency.
|)
(
class WordsUI usingPlatform: p = (|
	Subject = p hopscotch core Subject.
	Presenter = p hopscotch core Presenter.
	Timer = p time Timer.
	randomFunc
|[| Math = p aliens global at: 'Math'. |
	randomFunc:: [Math random]] 
		on: Error 
		do: [ | random = p squeak Random new. | randomFunc:: [random next]])
(
class DictionaryPresenter onSubject: s = Presenter onSubject: s (| contentHolder refreshTimer |)
('as yet unclassified'
definition = (
	refreshTimer:: Timer every: 1000 do: [contentHolder refresh].
	^contentHolder:: holder: [label: subject nextWord]
)
noticeConcealment = (
	refreshTimer isNil ifFalse: [refreshTimer cancel. refreshTimer:: nil].
)
noticeExposure = (
	refreshTimer isNil ifFalse: [refreshTimer cancel. refreshTimer:: nil].
	refreshTimer:: Timer every: 1000 do: [refresh].
)) : ()
class DictionarySubject onModel: m = Subject onModel: m ()
('as yet unclassified'
createPresenter = (
	^DictionaryPresenter onSubject: self
)
nextWord = (
	^wordsByFrequency at: (randomFunc value * wordsByFrequency size) floor.
)
title = (
	^'Words'
)) : ()) : ()'as yet unclassified'
main: p args: a = (
	wordsByFrequency:: wordsByFrequency splitBy: ' '.
	p hopscotch core HopscotchWindow openSubject:
		((WordsUI usingPlatform: p) DictionarySubject onModel: wordsByFrequency).
)) : ()