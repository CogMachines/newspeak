Newspeak3
'NS2JS'
class JavascriptNamespaces usingPlatform: platform = NewspeakObject (
(* Provides directory and single-file namespaces for Javascript code generation.

A namespace is passed to the application packager/compiler. The packager can request access to a nested namespace using #/. It can request to write to a namespace element using #stream:.


   Copyright 2012 SAP AG.
   
   Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0

*)|
	private OrderedCollection = platform collections OrderedCollection.
|)
(
class DirectoryNamespace onFilePath: path = (|
	private filePath = path.
|)
('as yet unclassified'
/ name = (

	^ DirectoryNamespace onFilePath: filePath / name
)
ensureDirectoryExists: pattern = (

	pattern exists ifFalse: [
		ensureDirectoryExists: filePath containingDirectory.
		filePath createDirectoryIfFail: [:e | assert: false message: e]].
)
stream: block  = (

	| stream |
	ensureDirectoryExists: filePath containingDirectory.
	generatedFiles add: filePath.
	stream:: filePath charOutputStream.
	[block value: stream] ensure: [
		stream close]
)) : ()
class DirectoryWriter onFilePath: path = (|
	private generatedFiles = OrderedCollection new.
	private rootPath = path.
	private rootWriter = FileWriter for: path.
|)
(
class FileWriter onFilePath: path = (|
	private filePath = path.
|)
('accessing'
/ name = (

	^ FileWriter onFilePath: filePath / name
)'actions'
stream: block  = (

	onPath: filePath stream: block
)) : ()'actions'
bundle = (

	onPath: rootPath / 'node.js' stream: [:s |
		generatedFiles do: [:each |
			s
				nextPutAll: 'require("', each name, '");';
				cr]].
		
	onPath: rootPath / 'file_list.sh'  stream: [:s |
		generatedFiles do: [:each |
			s
				nextPutAll: 'echo ', each name, '';
				cr]]
)'private'
ensureDirectoryExists: path = (

	path exists ifFalse: [
		ensureDirectoryExists: path containingDirectory.
		path createDirectoryIfFail: [:e | assert: false message: e]].
)
onPath: filePath stream: block  = (

	| stream |
	ensureDirectoryExists: filePath containingDirectory.
	generatedFiles add: filePath.
	stream:: filePath charOutputStream.
	[block value: stream] ensure: [
		stream close]
)) : ()) : ()