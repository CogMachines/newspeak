Newspeak3
'OrthogonalSynchronization'
class ClientSynchronizationTesting usingPlatform: p model: clientSync minitest: m  = (
|
	ChangeTrackingContext = clientSync ChangeTrackingContext.
	ClientUpdater = clientSync ClientUpdater.
	List = p collections List.
	Map = p collections Map.
	ObjectMirror = p mirrors ObjectMirror.
	TestContext = m TestContext.
	public toDoListModel 
	public clientServerModule
		
|
) (
public class ClientSynchronizationTests = TestContext (
|
	cto
	server
	initialObjectsByName
|
	cto:: ChangeTrackingContext new.  
	server: createServer. 
	initialObjectsByName: createInitialObjectsForTestsByName. 

) (
class ServerMock withObjectsByName:  objectsByNameMap = (
|
	nextGuid ::=  1.
	objectsByName = objectsByNameMap.
	serverChangeTrackingContext = ChangeTrackingContext new.
|
	serverChangeTrackingContext installNewRoot: (objectNamed: 'root') identifiedBy: (createIdsMap: objectsByNameMap values). 

) (
createIdsMap: objects = (
	|   map    | 
	map::  Map new.
	objects do: [ :each | map at: each put:  generateNextGuid ].
	^ map.
)
public generateNextGuid = (
	nextGuid:: nextGuid + 1. 
	^ nextGuid.
	
)
public idForObject: anObject   = (
	^ serverChangeTrackingContext idForObject: anObject.
)
public idForObjectNamed: aName  = (
	^ serverChangeTrackingContext idForObject: (objectNamed: aName).
)
public objectNamed: aName = (
	^ objectsByName at: aName.
)
public synchronize: aChangeLogFromClient = (
	| updater | 
	updater:: ClientUpdater forContext: serverChangeTrackingContext endPoint: self.
	^ updater updateServerFrom: aChangeLogFromClient.
	
	
)
) : (
)
aa = (

	|  newTask anotherNewTask values   ids changes  internalTasksArray   | 


	anotherNewTask::  ToDoTask describedBy: 'another new task' dependsOn: task2.
	newTask::  ToDoTask describedBy: 'my new task' dependsOn: anotherNewTask.

	
	

	internalTasksArray::  contentForSlot: #contents in: tasks.

	
	ids::  Map new.
	ids at: task1 put: 1.
	ids at: task2 put: 2	.
	ids at: task3 put: 3.
	ids at: root put: 4.
	ids at: tasks put: 5.
	ids at: internalTasksArray put: 6.

	
	
	cto installNewRoot: root identifiedBy: ids.

(*	changes:: cto detectChanges.	*)
	(* no changes *)

	tasks at: 1 put: task2.
	tasks at: 2 put: anotherNewTask.

(*
	tasks add: task1.
	tasks add: task1.
	tasks add: task1.
	tasks add: task1.
	tasks add: task1.
	tasks add: task1.
	tasks add: task1.
*)	
	internalTasksArray:: nil. 

	changes:: cto detectChanges.	

(*	assert: exp equals:   *)
	


	 
)
contentForSlot: aSlotName in: anObject  = (
	| mirror |
	mirror:: ObjectMirror  reflecting: anObject.
	^  (mirror getSlot: aSlotName) reflectee.
)
createInitialObjectsForTestsByName = (
	| map internalTasksArray 	task1 	task2 	task3   	root	tasks  | 

	task3::  ToDoTask describedBy: 'my task 3' dependsOn: nil.
	task2::   ToDoTask describedBy: 'my task 2' dependsOn: task3.
	task1::  ToDoTask describedBy: 'my task 1' dependsOn: task2.

	root::  RootModel new.

	tasks:: List new.
	tasks add: task1.
	tasks add: task2.
	tasks add: task3.

	root task: task1.
	root elements: tasks.
	
	 internalTasksArray:: contentForSlot: #contents in: tasks.
	

	map:: Map new.
	map at: 'task1' put:  task1.
	map at: 'task2' put:  task2.	
	map at: 'task3' put:  task3.
	map at: 'tasks' put:  tasks.
	map at: 'internalTasksArray' put:  internalTasksArray.
	map at: 'root' put:  root.
	map at: 'toDoListModel' put: toDoListModel. 
	
	^ map.

)
createServer = (
	^ ServerMock withObjectsByName: createInitialObjectsForTestsByName.
)
installContextFromServer   = (
	| map | 
	map:: Map new.
	
	initialObjectsByName keysAndValuesDo: [ :name :obj |  map at: obj put: (server idForObjectNamed: name )  ]. 
	cto installNewRoot: (initialObjectsByName at: 'root' ) identifiedBy: map.
)
objectNamed: aName  = (
	^ initialObjectsByName at: aName.
)
synchronize = (
	| contextResult serverResponse clientUpdater |
	contextResult:: cto detectChanges.
	
	serverResponse:: server synchronize: contextResult changeLog.
	
	clientUpdater::  ClientUpdater forContext: cto endPoint: nil.
	clientUpdater updateFrom: contextResult to: serverResponse.
)
public   testBasicRequestResponseSync = (
	|  newTask task1 task1OnServer  | 
	installContextFromServer.
	newTask:: ToDoTask describedBy: 'new task' dependsOn: nil .
	
	task1:: objectNamed: 'task1'.  
	task1 dependsOn: newTask.

	synchronize.
	assert: (cto isTracked: newTask) description: 'New task is not tracked' .
	task1OnServer:: (server objectNamed: 'task1').
	assert: (cto idForObject: newTask) equals:  (server idForObject: task1OnServer  dependsOn) .
	 
)
public   testChangesAreDetectedWhenModifyingBasicValueForSlot = (
	|   task1 changeLog newTextForTask changeRecord| 

	installContextFromServer.

	newTextForTask::  'modified task1' .
	task1:: objectNamed:  'task1' .
	 task1 text: newTextForTask.

	changeLog:: cto detectChanges changeLog.

	assert: changeLog changeRecords size equals: 1.

	changeRecord:: changeLog changeRecords first.
	assert:  (changeRecord  refersTo: task1 in: cto).
	
	assert:  changeRecord changes  size equals: 1.
	assert:  (changeRecord changes includesKey: #text).
	assert:  ((changeRecord changes at: #text) refersTo: newTextForTask inContext: cto).
	
		
	assert:  changeLog  hasNoNewObjectsDefinitions.
	 
)
public   testClientUpdateWithNewObjectFromServer = (
	|    task1 serverToClientResponse   updater changesMap  newGuid changeRecordForTask1 newTaskContentsMap emptyResult  newTask newTaskText newTaskDefinitionWithId newTaskDefinition|  

	installContextFromServer.
	emptyResult::  cto detectChanges.
	
	task1:: objectNamed: 'task1'.
	
	newGuid:: server generateNextGuid .
	changesMap:: Map new.
	changesMap at: #dependsOn put: (clientServerModule ObjectReference toObjectIdentifiedWith: newGuid ).

	newTaskText::  'new task from server'.

	newTaskContentsMap:: Map new.
	newTaskContentsMap at: #text put:  (clientServerModule UnidentifiableObject for: newTaskText).
		
	changeRecordForTask1:: clientServerModule ObjectChangeRecord for: (clientServerModule ObjectReference toObjectIdentifiedWith: (cto idForObject: task1)) withChanges: changesMap.
	newTaskDefinition::  clientServerModule ObjectDefinition 
							classNamed: #ToDoTask
							enclosingObjectReference:  (clientServerModule ObjectReference toObjectIdentifiedWith: (cto idForObject: toDoListModel) )
							withContents: newTaskContentsMap.
	
	newTaskDefinitionWithId:: clientServerModule ObjectDefinitionWithIdentification id: newGuid definition: newTaskDefinition. 
	
	serverToClientResponse:: ServerToClientChangeLog
									 mappingIdsWith: Map new 
									changeRecords: { changeRecordForTask1} 
									newObjects: { newTaskDefinitionWithId} .
	
	updater:: ClientUpdater forContext: cto endPoint: nil.
	updater updateFrom: emptyResult to: serverToClientResponse.
	
	newTask:: cto objectById: newGuid ifNotFound: [ failWithMessage: ' New task is not tracked'    ].
	assert: newTask text equals: newTaskText.

	assert: ( task1 dependsOn == newTask).

	 
)
public   testNewObjectsAreDetectedOnClient = (
	|   task1 changeLog newTask changeRecord newReference newTaskDefinition| 

	installContextFromServer.

	task1:: objectNamed: 'task1' .

	newTask:: ToDoTask describedBy: 'new task' dependsOn: nil .
	task1 dependsOn: newTask.

	changeLog:: cto detectChanges changeLog.

	assert: changeLog changeRecords size equals: 1.

	changeRecord:: changeLog changeRecords first.
	assert:  (changeRecord  refersTo: task1 in: cto).
	
	assert:  changeRecord changes  size equals: 1.
	assert:  (changeRecord changes includesKey: #dependsOn).

	newReference:: changeRecord changes at: #dependsOn.

	assert:  newReference isKindOfNewObjectReference.
	
	assert:  changeLog newObjectsDefinitions size equals: 1.
	newTaskDefinition:: changeLog newObjectsDefinitions first.
	
	assert:  newReference identifier  equals: newTaskDefinition id.
	
	assert: (newTaskDefinition definition slotNamed: #text hasValue: newTask text).
	assert: (newTaskDefinition definition slotNamed: #dependsOn hasValue: newTask dependsOn).
	 
)
public   testNoChangesAreDetectedWhenNothingHasChanged = (
	|   changeLog  | 
	installContextFromServer.
	changeLog:: cto detectChanges changeLog.	
	assert:  changeLog hasNoChanges.
	 
)
) : (
TEST_CONTEXT = ()
)
RootModel = (
	^ toDoListModel RootModel.
)
ServerToClientChangeLog  = (
	^clientServerModule ServerToClientChangeLog.
)
ToDoTask = (
	^ toDoListModel ToDoTask.
)
) : (
)
