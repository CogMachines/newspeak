Newspeak3
'OrthogonalSynchronization'
class ClientSynchronizationTesting usingPlatform: p model: clientSync minitest: m  = (
|
	ChangeTrackingContext = clientSync ChangeTrackingContext.
	List = p collections List.
	Map = p collections Map.
	ObjectMirror = p mirrors ObjectMirror.
	TestContext = m TestContext.
	public	ToDoListModel 
|
) (
public class ClientSynchronizationTests = TestContext (
|
|
) (
contentForSlot: aSlotName in: anObject  = (
	| mirror |
	mirror:: ObjectMirror  reflecting: anObject.
	^  (mirror getSlot: aSlotName) reflectee.
)
public   test1 = (

	| todoModel cto task1 task2 task3  newTask anotherNewTask values toDoListModel root  ids changes tasks internalTasksArray   | 
	todoModel:: ToDoListModel new.


	cto::  ChangeTrackingContext new. 

	task3:: todoModel ToDoTask describedBy: 'my task 3' dependsOn: nil.
	task2::  todoModel ToDoTask describedBy: 'my task 2' dependsOn: task3.
	task1:: todoModel ToDoTask describedBy: 'my task 1' dependsOn: task2.

	anotherNewTask:: todoModel ToDoTask describedBy: 'another new task' dependsOn: task2.
	newTask:: todoModel ToDoTask describedBy: 'my new task' dependsOn: anotherNewTask.

	
	root:: todoModel RootModel new.

	tasks:: List new.
	tasks add: task1.
	tasks add: task2.
	tasks add: task3.

	internalTasksArray::  contentForSlot: #contents in: tasks.

	
	ids::  Map new.
	ids at: task1 put: 1.
	ids at: task2 put: 2	.
	ids at: task3 put: 3.
	ids at: root put: 4.
	ids at: tasks put: 5.
	ids at: internalTasksArray put: 6.

	
	root task: task1.
	root elements: tasks.

	cto installNewRoot: root identifiedBy: ids.

(*	changes:: cto detectChanges.	*)
	(* no changes *)

	tasks at: 1 put: task2.
	tasks at: 2 put: anotherNewTask.

(*
	tasks add: task1.
	tasks add: task1.
	tasks add: task1.
	tasks add: task1.
	tasks add: task1.
	tasks add: task1.
	tasks add: task1.
*)	
	internalTasksArray:: nil. 

	changes:: cto detectChanges.	

(*	assert: exp equals:   *)
	


	 
)
) : (
TEST_CONTEXT = ()
)
) : (
)
