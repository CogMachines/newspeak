Newspeak3
'Actors'
class Actors2Testing usingPlatform: p actors: a testActor: ta minitest: m = (|
	private TestActor = ta.
	private TestContext = m TestContext.
	private Semaphore = p squeak Semaphore.
	private MessageNotUnderstood = p kernel MessageNotUnderstood.
	private Resolver = a Resolver.
	private Timer = a Timer.
	private actors = a.
|) (
public class MultiActorTests = TestBase () (
'as yet unclassified'
public testMultiPass = (
	| a1 a2 a3 p |
	a1:: (actors createActor: TestActor name: 'A1') <-: new.
	a2:: (actors createActor: TestActor name: 'A2') <-: new.
	a3:: (actors createActor: TestActor name: 'A3') <-: new.
	a1 <-: link: a2.
	a3 <-: link: a3.
	
	p:: a1 <-: pass: #token.
	
	assert: p resolvesTo: #token.
)
) : (
'as yet unclassified'
TEST_CONTEXT = ()
)
public class SingleActorTests = TestBase () (
'as yet unclassified'
public factorial: n = (
	^n > 1 
		ifTrue: [(self <-: factorial: n - 1) <-: * n]
		ifFalse: [1]
)
public returnBrokenPromise = (
	^self <-: doesNotExist
)
public returnPromise = (
	^self <-: yourself
)
public returnPromise: n = (
	^n == 0
		ifTrue: [self]
		ifFalse: [self <-: returnPromise: n - 1].
)
public run: block = (
	^block value
)
public signalError = (
	Error signal: 'some error'.
)
public testBrokenPromiseContagion1 = (
	| p |
	p:: (self <-: signalError) <-: doesNotExist.
	assert: [p isPromise].
	
	assert: p smashedWith: Error.  (* Not MessageNotUnderstood *)
)
public testBrokenPromiseContagion2 = (
	| p |
	p:: (self <-: signalError) <-: yourself.
	assert: [p isPromise].
	
	assert: p smashedWith: Error.
)
public testBrokenPromiseContagion3 = (
	| p |
	p:: (self <-: signalError) whenResolved: [halt].
	assert: [p isPromise].
	
	assert: p smashedWith: Error.
)
public testChainAfterBroken = (
	| r p r2 p2 |
	r:: Resolver new.
	p:: r promise.
	r2:: Resolver new.
	p2:: r2 promise.
	p whenResolved: [halt] whenBroken: [p whenResolved: [halt] whenBroken: [r2 resolve: 42]].
	r break: 21.
	
	assert: p2 resolvesTo: 42.
)
public testChainAfterForwarded = (
	| r p r2 p2 p3 |
	r:: Resolver new.
	p:: r promise.
	r2:: Resolver new.
	p2:: r2 promise.
	p whenResolved: [:res | deny: res isPromise].
	p3:: [(*A*) [ p (*B*)whenResolved: [r2 resolve: 42]] <-: value. 21] <-: value.
	assert: [p3 isPromise].
	r resolve: p3.
	
	(* No way to guarentee B happens after p is resolved to p3, but this happens in the current implementation. *)
	
	assert: p2 resolvesTo: 42.
)
public testChainAfterResolved = (
	| r p r2 p2 |
	r:: Resolver new.
	p:: r promise.
	r2:: Resolver new.
	p2:: r2 promise.
	p whenResolved: [p whenResolved: [r2 resolve: 42]].
	r resolve: 21.
	
	assert: p2 resolvesTo: 42.
)
public testChainPromiseToError = (
	| p |
	p:: self <-: returnBrokenPromise.
	assert: [p isPromise].
	
	assert: p smashedWith: MessageNotUnderstood.
)
public testChainPromiseToValue = (
	| p |
	p:: self <-: returnPromise.
	assert: [p isPromise].
	
	assert: p resolvesTo: self.
)
public testDatalock = (
	| flag epimenides p |
	flag:: true.
	epimenides:: [flag <-: not].
	flag:: epimenides <-: value.
	
	assertTimesOut: flag.
)
public testDeeplyChainedPromise = (
	| p |
	p:: self <-: returnPromise: 2.
	assert: [p isPromise].
	
	assert: p resolvesTo: self.
)
public testDoubleResolution = (
	| r |
	r:: Resolver new.
	r resolve: 1.
	should: [r resolve: 1] signal: Error.

	r:: Resolver new.
	r resolve: 1.
	should: [r break: 1] signal: Error.

	r:: Resolver new.
	r break: 1.
	should: [r resolve: 1] signal: Error.
	
	r:: Resolver new.
	r break: 1.
	should: [r break: 1] signal: Error.
)
public testEventualSendToNearPromiseError = (
	| p |
	p:: (self <-: yourself) <-: doesNotExist.
	assert: [p isPromise].
	
	assert: p smashedWith: MessageNotUnderstood.
)
public testEventualSendToNearPromiseValue = (
	| p |
	p:: (self <-: yourself) <-: yourself.
	assert: [p isPromise].
	
	assert: p resolvesTo: self.
)
public testEventualSendToNearRefError = (
	| p |
	p:: self <-: doesNotExist.
	assert: [p isPromise].
	
	assert: p smashedWith: MessageNotUnderstood.
)
public testEventualSendToNearRefValue = (
	| p |
	p:: self <-: yourself.
	assert: [p isPromise].
	
	assert: p resolvesTo: self.
)
public testFactorial = (
	assert: (factorial: 10) resolvesTo: 3628800.
)
public testImmediateResolution = (
	| p p2 |
	p:: self <-: run: [3].
	p2:: self <-: run: [p + 4].

	assert: p2 resolvesTo: 7.
)
public testMissingWhenBroken = (
	| r p |
	r:: Resolver new.
	p:: r promise
		whenResolved: [:v | halt].
	assert: [p isPromise].
	r break: Error new.
	
	assert: p smashedWith: Error.
)
public testPromiseStopContagion = (
	| p |
	p:: (self <-: signalError)
		whenResolved: [halt]
		whenBroken: [:e | assert: e class equals: Error. 'Return without exception'].		
	assert: [p isPromise].
	
	assert: p resolvesTo:  'Return without exception'.
)
public testResolveAfterWhen = (
	| r p |
	r:: Resolver new.
	p:: r promise.
	p:: p whenResolved: [:v | assert: v equals: #foo. 1].
	r resolve: #foo.
		
	assert: p resolvesTo: 1.
)
public testResolveBeforeWhen = (
	| r p |
	r:: Resolver new.
	p:: r promise.
	r resolve: #foo.
	p:: p whenResolved: [:v | assert: v equals: #foo. 1].
		
	assert: p resolvesTo: 1.
)
public testUnresolved = (
	| r p |
	r:: Resolver new.
	p:: r promise.
	
	deny: [p isResolved].
)
public testWhenBrokenError = (
	| r p |
	r:: Resolver new.
	p:: r promise
		whenResolved: [:v | halt]
		whenBroken: [:e | doesNotExist].
	assert: [p isPromise].
	r break: Error new.
	
	assert: p smashedWith: MessageNotUnderstood.
)
public testWhenBrokenValue = (
	| r p |
	r:: Resolver new.
	p:: r promise
		whenResolved: [:v | halt]
		whenBroken: [:e | 42].
	assert: [p isPromise].
	r break: Error new.
	
	assert: p resolvesTo: 42.
)
public testWhenResolvedError = (
	| r p |
	r:: Resolver new.
	p:: r promise
		whenResolved: [:v | Error signal: 'Something']
		whenBroken: [:e | fail].
	assert: [p isPromise].
	r resolve: 21.
	
	assert: p smashedWith: Error.
)
public testWhenResolvedValue = (
	| r p |
	r:: Resolver new.
	p:: r promise
		whenResolved: [:v | v * 2]
		whenBroken: [:e | fail].
	assert: [p isPromise].
	r resolve: 21.
	
	assert: p resolvesTo: 42.
)
) : (
'as yet unclassified'
TEST_CONTEXT = ()
)
class TestBase = TestContext () (
'as yet unclassified'
assert: promise resolvesTo: expectedValue = (
	|
	state ::= #unresolved.
	resolution
	sem = Semaphore new.
	|
	promise
		whenResolved: 
			[:value |
			resolution:: value.
			state:: #resolved.
			sem signal]
		whenBroken:
			[:error |
			resolution:: error.
			state:: #broken.
			sem signal].
	sem waitTimeoutMSecs: 200.

	state = #unresolved ifTrue:
		[^failWithMessage: 'Timed out'].
	state = #broken ifTrue:
		[^failWithMessage: 'Expected resolution of ', expectedValue printString, ' but broken with ', resolution printString].
	assert: resolution equals: expectedValue.
)
assert: promise smashedWith: expectedErrorClass = (
	|
	state ::= #unresolved.
	resolution
	sem = Semaphore new.
	|
	promise
		whenResolved: 
			[:value |
			resolution:: value.
			state:: #resolved.
			sem signal]
		whenBroken:
			[:error |
			resolution:: error.
			state:: #broken.
			sem signal].
	sem waitTimeoutMSecs: 200.

	state = #unresolved ifTrue:
		[^failWithMessage: 'Timed out'].
	state = #resolved ifTrue:
		[^failWithMessage: 'Expected broken with ', expectedErrorClass printString, ' but resolved with ', resolution printString].
	assert: resolution class equals: expectedErrorClass.
)
assertTimesOut: promise = (
	|
	state ::= #unresolved.
	resolution
	sem = Semaphore new.
	|
	promise
		whenResolved: 
			[:value |
			resolution:: value.
			state:: #resolved.
			sem signal]
		whenBroken:
			[:error |
			resolution:: error.
			state:: #broken.
			sem signal].
	sem waitTimeoutMSecs: 200.

	state = #resolved ifTrue:
		[^failWithMessage: 'Expected timeout but resolved with ', resolution printString].
	state = #broken ifTrue:
		[^failWithMessage: 'Expected timeout but broken with ', resolution printString].
)
) : (
)
public class TimerTests = TestBase () (
'as yet unclassified'
public testCoTimers = (
	| r ticks t1 t2 |
	r:: Resolver new.
	ticks:: 0.
	t1:: Timer every: 20 do: [:t | ticks:: ticks + 1].
	t2:: Timer after: 50 do: [t1 cancel. r resolve: ticks].

	[[assert: r promise resolvesTo: 2] ensure: [t1 cancel]] ensure: [t2 cancel].
)
public testOneShotTimer = (
	| r t |
	r:: Resolver new.
	t:: Timer after: 100 do: [deny: [t isActive]. r resolve: 42].
	assert: [t isActive].
	
	[assert: r promise resolvesTo: 42] ensure: [t cancel].
)
public testRepeatingTimer = (
	| count ::= 0. r t |
	r:: Resolver new.
	t:: Timer every: 10 do:
		[:timer |
		assert: timer equals: t.
		count:: count + 1.
		assert: [timer isActive].
		count = 5 ifTrue: [timer cancel. deny: [timer isActive]. r resolve: 42].
		count > 5 ifTrue: [failWithMessage: 'Cancel failed']].
	
	[assert: r promise resolvesTo: 42] ensure: [t cancel].
)
) : (
'as yet unclassified'
TEST_CONTEXT = ()
)
public class TwoActorTests = TestBase () (
'as yet unclassified'
public testFarSendEcho = (
	| testActor p |
	testActor:: (actors createActor: TestActor name: 'other') <-: new.
	p:: testActor <-: echo: self.
	
	assert: p resolvesTo: self.
)
public testFarSendError1 = (
	| testActor p |
	testActor:: (actors createActor: TestActor name: 'other') <-: new.
	p:: testActor <-: signalError.
	
	p:: p whenResolved: [halt] whenBroken: [:e | e <-: class <-: name].
	assert: p resolvesTo: 'Error'.
)
public testFarSendError2 = (
	| testActor p |
	testActor:: (actors createActor: TestActor name: 'other') <-: new.
	p:: testActor <-: doesNotExist.
	
	p:: p whenResolved: [halt] whenBroken: [:e | e <-: class <-: name].
	assert: p resolvesTo: 'MessageNotUnderstood'.
)
public testFarSendPromiseValue = (
	| testActor p |
	testActor:: (actors createActor: TestActor name: 'other') <-: new.
	p:: testActor <-: returnPromise42.
	
	assert: p resolvesTo: 42.
)
public testFarSendPromiseValue2 = (
	| testActor p |
	testActor:: (actors createActor: TestActor name: 'other') <-: new.
	p:: testActor <-: returnPromiseYourself.
	
	assert: (p whenResolved: [:testActorRef | testActor <-: = testActorRef]) resolvesTo: true.
)
public testFarSendValue = (
	| testActor p |
	testActor:: (actors createActor: TestActor name: 'other') <-: new.
	p:: testActor <-: return42.
	
	assert: p resolvesTo: 42.
)
public testPipelining = (
	| testActor p |
	testActor:: (actors createActor: TestActor name: 'other') <-: new.
	
	(* add:and: should not be waiting on the 42 promises in this actor to be resolved. *)
	p:: testActor <-: waitAdd: (testActor <-: returnPromise42) and: (testActor <-: returnPromise42).
	
	assert: p resolvesTo: 84.
)
public testPipeliningImmediateLocalResolution = (
	| testActor p |
	testActor:: (actors createActor: TestActor name: 'other') <-: new.
	
	p:: testActor <-: noWaitAdd: (testActor <-: return42) and: (testActor <-: return42).
	
	assert: p resolvesTo: 84.
)
public testPipeliningImmediateLocalResolution2 = (
	| testActor r p1 p2 |
	testActor:: (actors createActor: TestActor name: 'other') <-: new.
	
	r:: Resolver new.
	p1:: 42 <-: yourself.
	p2:: 42 <-: yourself.
	[r resolve: (testActor <-: noWaitAdd: p1 and: p2)] <-: value.

	assert: r promise resolvesTo: 84.
)
) : (
'as yet unclassified'
TEST_CONTEXT = ()
)
) : (
)
