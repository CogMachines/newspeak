Newspeak3
'NSStreams'
class StreamsTesting usingPlatform: p testing: streams minitest: minitest = (
(* Test basic stream stuff.

This code was derived in part by converting code from the Strongtalk Stream classes to Newspeak, which is why the Sun Microsystems copyright and BSD license below applies.

Copyright (c) 1995-2006 Sun Microsystems, Inc. ALL RIGHTS RESERVED.
Copyright 2008-2009 Gilad Bracha and other contributors.
 
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, 
 this  list of conditions and the following disclaimer.

* Redistribution in binary form must reproduce the above copyright notice, 
this list of conditions and the following disclaimer in the documentation and/o other materials provided with the distribution.

Neither the name of Sun Microsystems or the names of contributors may 
be used to endorse or promote products derived from this software without 
specific prior written permission.

>>
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS 
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
DAMAGE.>> *)|
	TestContext = minitest TestContext.
	
	private BasicInputStream = streams BasicInputStream.
	private CharacterReadStream = streams CharacterReadStream.
	private CharacterReadWriteStream = streams CharacterReadWriteStream.
	private FilePath = p files FilePath.
	private OrderedCollection = p collections OrderedCollection.
	private Transcript = p squeak Transcript.
|) (
class StreamTests = TestContext (
(*  *)|
	|) (
'as yet unclassified'
test: i <Int> is: predicate <[Boolean]> = (
	predicate value ifFalse: [
		Transcript show: 'Test '; print: i; show: ' failed'; cr. 
		error: 'Test failed'.	]
)
testBasicInputStream: s <InputStream[E]> containing: els <SeqCltn[E]>
 = (

	| c <InputStream[E]> |
	c:: s copy.
	self test: 1 is: [ c contentsRemaining = els ].
	c:: s copy.
	1 to: els size - 1 do: [ :i <Int> |
		test: 2 is: [ c next = (els at: i) and: [ c atEnd not ] ].		].
		test: 3 is: [ c peek = (els at: els size) and: [ c atEnd not ] ].
		test: 4 is: [ c peek = (els at: els size) and: [ c atEnd not ] ].
		test: 5 is: [ c next = (els at: els size) and: [ c atEnd ] ].
	c:: s copy.
	test: 6 is: [ (c next: els size) = els ].
	test: 7 is: [ (s skipTo: nil) not ].
)
testBasicReadStream: s <ReadStream[E]> containing: els <SeqCltn[E]>
 = (

	testBasicInputStream: s copy containing: els.
	test: 0 is: [ (s copy position: 1) contentsRemaining
					= (els copyFrom: 2 to: els size) ].
	test: 1 is: [ s collection = els ].
	test: 2 is: [ s isEmpty not ].
	test: 3 is: [ s size = els size ].
	s next.
	test: 4 is: [ s position = 1 ].
	s position: els size - 1.
	test: 5 is: [ s atEnd not ].
	test: 6 is: [ s size = els size ].
	test: 7 is: [ s atEnd not ].
	test: 8 is: [ s next = (els at: els size) ].
	test: 9 is: [ s atEnd ].
	s position: 0.
	test: 10 is: [ s atEnd not ].
	s setToEnd.
	test: 11 is: [ s atEnd ].
	test: 12 is: [ s contentsRemaining size = 0 ].
)
testBasicReadWriteStream: s <ReadWriteStream[E]> use: els <SeqCltn[E]>
 = (

	s nextPut: (els at: 1).
	s nextPutAll: (els copyFrom: 2 to: els size).
	s position: 0.
	testBasicReadStream: s containing: els.
	s position: 2.
	test: 1 is: [ s contentsWritten = (els copyFrom: 1 to: 2) ].
	test: 2 is: [ s copy contentsRemaining = (els copyFrom: 3 to: els size) ].
	testBasicInputStream: s containing: (els copyFrom: 3 to: els size).
)
) : (
'as yet unclassified'
TEST_CONTEXT = ()
)
) : (
)
