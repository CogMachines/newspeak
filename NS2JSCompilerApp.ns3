Newspeak3
'NS2JS'
class NS2JSCompilerApp packageUsing: ns = (
"
An app designed to run on the Javascript version of Newspeak. It compiles the local file source.ns from Newspeak to Javascript.

   Copyright 2012 SAP AG.
   
   Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
"|
	CP = ns NS2CombinatorialParsing CombinatorialParsing.
	BCP = ns NS2CombinatorialParsing BlocklessCombinatorialParsing.
	BlocklessCombinatorialParsing = BCP mixin |> CP.
	Newspeak3AST = ns Newspeak3AST.
	Newspeak2JavascriptCompilation = ns Newspeak2JavascriptCompilation.
	JavascriptGeneration = ns JavascriptGeneration.
	Newspeak3Grammar = ns Newspeak3Grammar.
	NewspeakMirrors = ns NewspeakMirrorsForJavascript.
	Newspeak3Parsing = ns Newspeak3Parsing.
|)
('as yet unclassified'
main: platform args: args = (
	| parserLib ns3grammar astModule parsingModule compilationModule compiler reader source writer rep output |
	print: 'Creating compilationModule...'.
	parserLib:: BlocklessCombinatorialParsing usingLib: platform.
	ns3grammar:: Newspeak3Grammar parserLib: parserLib.
	astModule:: Newspeak3AST usingLib: platform.
	parsingModule:: Newspeak3Parsing usingLib: platform ast: astModule grammar: ns3grammar.
	compilationModule:: Newspeak2JavascriptCompilation
		usingPlatform: platform
		newspeakParser: parsingModule
		javascriptGeneration: (JavascriptGeneration usingPlatform: platform)
		mirrorLib: (NewspeakMirrors usingPlatform: platform).
	print: 'Creating compiler...'.
	compiler:: compilationModule Compiler2 new.
	reader:: platform files FileReader path: 'source.ns'.
	source:: reader contents asString.
	print: 'Compiling...'.
	rep:: compiler compileClassSource: (platform streams CharacterReadStream on: source) within: nil.
	output:: platform streams CharacterReadWriteStream on: platform kernel MutableString new.
	output nextPutAll: 'var MainClass = '.
	compiler outputTopLevelClass: rep to: output.
	print: 'Writing output...'.
	writer:: platform files FileWriter path: 'output.js'.
	writer write: output contents asString.
	print: 'Done.'.
)) : ()