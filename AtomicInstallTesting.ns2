Newspeak3'NS2-automated-tests'class AtomicInstallTesting usingPlatform: platform       testing: installer      compiler: c       mirrors: ms       testFramework: utf = NewspeakObject(      |      "imports"      private TestContext = utf TestContext.	private NS2Compiler = platform NS2Compiler.      private Reflection = platform Newspeak NS2Reflection.      private LowLevelMethodMirror = ms LowLevelMethodMirror.      private LowLevelMixinMirror = ms LowLevelMixinMirror.      private InstanceVariableMirror = ms InstanceVariableMirror.	private NewspeakLanguage2 = platform Newsqueak2  NewsqueakLanguage2.	private SystemMetadata = platform NewsqueakMixins SystemMetadata.	private DefiningClassMetadata = platform NewsqueakMixins DefiningClassMetadata.	private Smalltalk = platform Smalltalk.	private Map = platform Collections Dictionary.	private MessageNotUnderstood = platform MessageNotUnderstood.      "module variables"	private atomicInstaller = installer.      private newCompiler = c.      private lowLevelMirrors = ms.      reflection = Reflection new.      |)(class AtomicInstallTests = TestContext ("Tests of atomic installer.")('as yet unclassified'testAddSlotAndAccessors = (	| testClass <Class>  mirror <LowLevelMixinMirror> slot <InstanceVariableMirror> instance <TestAddSlot_oneClass> rep <MixinRep> outerMixin <Class> |	testClass:: makeClass:  'class TestAddSlotAndAccessors = ()()'.	outerMixin:: SystemMetadata mixinOf: testClass.	instance:: testClass new.	rep:: newCompiler compileClassSource: 'Newspeak3''NS2-examples''class TestAddSlotAndAccessors = ( | x | )()' readStream within: nil.	install: {lowLevelMixinRep: rep}.	assert:[instance x isNil].	instance x: 3.	assert: [instance x = 3].	instance:: nil.	testClass removeFromSystem.	outerMixin removeFromSystem.		)testChangeNestedClass = (	| testClass <Class>  mirror <LowLevelMixinMirror> method <LowLevelMethodMirror> instance <TestChangeNestedClass> instance1 <NestedClass> rep <MixinRep> nestedMixin <Class> outerMixin <Class> |	testClass:: makeClass:  'class TestChangeNestedClass = ()(	class Nested = () (	''unclassified'' 	bar = (^35)	))'.	outerMixin:: SystemMetadata mixinOf:testClass.	instance:: testClass new.	instance1:: instance Nested new.	rep:: newCompiler compileClassSource: 'Newspeak3''NS2-examples''class TestChangeNestedClass = ()(	class Nested = (| x y = 5. |) (	''unclassified'' 	bar = (x::7. ^x)	bam = (^bar*2)	))' readStream within: nil.		install: {lowLevelMixinRep: rep}.	assert:[instance1 y isNil].	assert:[instance1 x isNil].		assert:[ instance Nested new y = 5].	assert:[instance1 bar = 7].	assert:[instance1 x = 7].	assert:[instance1 bam = 14].		instance1:: nil.	nestedMixin:: SystemMetadata mixinOf: instance Nested.	instance Nested removeFromSystem.	instance:: nil.	nestedMixin removeFromSystem.	testClass removeFromSystem.	outerMixin removeFromSystem.	)testNestedMixinsSuperClassSubclassIsSetAfterDuplicateCompilation = (	"Addresses a bug in the AtomicInstaller that results in classes representing nested mixins not being registered as subclasses of ProtoObject after repeated compilation."	| classSource testClass mixinClass registered |	classSource:: 'class TestClassDuplicateCompilation = ()(class Inner = ()(''category''foo = ()))'.	testClass:: makeClass:  classSource.	mixinClass:: testClass new Inner mixin definingClass.	registered:: mixinClass superclass subclasses includes: mixinClass.	assert: registered description: 'Nested class not registered as subclass of its superclass'.	testClass:: makeClass:  classSource.	mixinClass:: testClass new Inner mixin definingClass.	registered:: mixinClass superclass subclasses includes: mixinClass.	"Ensure the class is removed from the system, in case of regression. Not needed once we come up with a proper way to clean up classes created by tests"	testClass removeFromSystem.	(SystemMetadata mixinOf: testClass) removeFromSystem.	assert: registered description: 'Regression: After being compiled twice, nested class is not registered as subclass of its superclass'.	)testNesting = (		| outerClass0 <Class> outerMixin0 <Class> instance0 <TestNesting> 	nestedClass1 <Class> nestedMixin1 <Class> nestedClass11 <Class> 	nestedMixin11 <Class>	instance1 <Nested1> instance11 <Nested11>	nestedClass111 <Class> nestedMixin111 <Class> instance111 <Nested111>	rep <MixinRep>	|		outerClass0:: makeClass:'	class TestNesting = () (      class Nested1 = ( | a b c | ) (      	    class Nested11 = () (	    	  class Nested111 = ( | x = a. |) (		  )	    )	    class Nested12 = Nested11 () (	    )      )      class Nested2 = () (      	          ))	'.	outerMixin0:: SystemMetadata mixinOf: outerClass0.	instance0:: outerClass0 new.	nestedClass1::  instance0 Nested1.	instance1:: nestedClass1 new.	nestedClass11:: instance1 Nested11.	instance11:: nestedClass11 new.	nestedClass111:: instance11 Nested111.	instance111:: nestedClass111 new.	rep:: newCompiler compileClassSource: 'Newspeak3''NS2-examples''	class TestNesting = () (      	class Nested1 = ( | d e = 5.  | ) (      	    class Nested11 = () (	    	  	class Nested111 = ( | z = e. |) (		 	 )			''unclassified'' 			bar = (^7)	   	 )	    class Nested12 = Nested11 () (	    )		class Nested13 = Nested12() ()      )	class Nested3 = Nested1 ()())' readStream within: nil.			install: {lowLevelMixinRep: rep}.		assert:[instance111 z isNil].	assert:[instance11 bar = 7].	assert:[instance1 d isNil].	assert:[instance1 e isNil].	assert:[instance1 Nested12 new bar = 7].	assert:[instance0 Nested3 new Nested12 new Nested111 new z  = 5].		instance0:: nil.	instance1:: nil.	instance11:: nil.	instance111:: nil.	outerClass0 removeFromSystem.	nestedClass1 removeFromSystem.	nestedClass11 removeFromSystem.		nestedClass111 removeFromSystem.	outerMixin0 removeFromSystem.)testRemoveNestedNestedClass2 = (	| testClass <Class>  mirror <LowLevelMixinMirror> method <LowLevelMethodMirror> instance <TestAddMethod_oneClass> rep <MixinRep> outerMixin <Class> nestedClass <Class> ns <Map[Symbol, Class]> |	testClass:: makeClass:  'class TestRemoveNestedNestedClass = ()(	class Nested = () (	  class NestedNested = ()()	''unclassified'' 	bar = (^35)	))'.	outerMixin:: SystemMetadata mixinOf: testClass.	rep:: newCompiler compileClassSource: 'Newspeak3''NS2-examples''	class TestRemoveNestedNestedClass = ()(	  class Nested = () (	  ''unclassified'' 	  bar = (^35)	 ))' readStream within: nil.	nestedClass::  testClass new Nested mixin definingClass.	ns:: Map new.	ns at: #'TestRemoveNestedNestedClass`Nested' put:  nestedClass.	atomicInstaller atomicallyInstallMixinReps: {lowLevelMixinRep: rep last first} namespace: ns.	mirror:: makeLowLevelMirrorFor: nestedClass.	assert:[(mirror methods includesMirrorNamed: #NestedNested) not].	testClass removeFromSystem.	outerMixin removeFromSystem.)testStressfulShapeChange = (	| testClass <Class>  mirror <LowLevelMixinMirror> method <LowLevelMethodMirror> rep <MixinRep> nestedMixin <Class> outerMixin <Class> testInstance |	testClass:: makeClass:  'class Shapeshifter = ()()'.	outerMixin:: SystemMetadata mixinOf: testClass.		rep:: newCompiler compileClassSource: 'Newspeak3''NS2-examples''class Shapeshifter = ( | one = 1. two = 2. three = 3. | )()' readStream within: nil.	install: {lowLevelMixinRep: rep}.		testInstance:: testClass new.		rep:: newCompiler compileClassSource: 'Newspeak3''NS2-examples''class Shapeshifter = ( | three = 3. four = 4. five = 5. two = 2. |)()' readStream within: nil.	install: {lowLevelMixinRep: rep}.		assert: [testInstance class == testClass].	assert: [testInstance three = 3].	assert: [testInstance two = 2].	assert: [testInstance four = nil].	assert: [testInstance five = nil].	should: [testInstance one] signal: MessageNotUnderstood.		rep:: newCompiler compileClassSource: 'Newspeak3''NS2-examples''class Shapeshifter = ( | six = 6. three = 3. |)()' readStream within: nil.	install: {lowLevelMixinRep: rep}.		assert: [testInstance class == testClass].	assert: [testInstance three = 3].	assert: [testInstance six = nil].	should: [testInstance one] signal: MessageNotUnderstood.	should: [testInstance two] signal: MessageNotUnderstood.	should: [testInstance four] signal: MessageNotUnderstood.	should: [testInstance five] signal: MessageNotUnderstood.					testClass removeFromSystem.	outerMixin removeFromSystem.)testSubclass = (	| testSuperMixin <Class>  testSubMixin <Class> testClass0 <Class> testClass1 <Class>  subClass <Class>   instance1 <TestSubclassSub>  instance2 <TestSubclassSub>  instance0 <TestSubclassSuper> reps <List[MixinRep]> lreps <List[LowLevelMixinRep]> outerMixin <Class>  	rep <MixinRep>  mirror <LowLevelMixinMirror> 	|	"test the effect of modifying a subclass of an unmodified but non-trivial superclass"	testClass0:: makeClass:  'class TestSubclassSuper = ( | z | )(''unclassified'' foo = (^91))'.	"create a superclass"	testSuperMixin:: SystemMetadata mixinOf: testClass0.	"create its mixin"	testClass1:: makeClass:  'class TestSubclassSub = ()(''unclassified'' bar = (^37))'.	testSubMixin:: SystemMetadata mixinOf: testClass1.	subClass:: testSubMixin mixin apply: testClass0.	"create subclass, its mixin etc."	instance0:: testClass0 new.	instance1::  testClass1 new.	instance2:: subClass new.	"create instances"	assert:[instance0 foo = 91].	assert:[instance2 foo = 91].	assert:[instance0 z isNil].	assert:[instance2 z isNil].		assert:[instance1 bar = 37].	assert:[instance2 bar = 37].	"test that all is as expected"	rep:: newCompiler compileClassSource: 'Newspeak3''NS2-examples''	class TestSubclassSub = ( | x =  2* bar. y = x + 2. | )(''unclassified'' bar = (^7) bam = (^x) )' readStream within: nil.		install: {lowLevelMixinRep: rep}.			"change mixin of subclass"	assert:[instance0 foo = 91].	assert:[instance2 foo = 91].	assert:[instance0 z isNil].	assert:[instance2 z isNil].	assert:[instance1 bar = 7].	assert:[instance2 bar = 7].	assert:[instance1 bam isNil].	instance1 x: 3.	assert:[instance1 bam = 3].	assert:[instance2 bam isNil].	instance2 x: 5.	assert:[instance2 bam = 5].	assert:[subClass new x = 14].	assert:[testClass1 new x = 14].	assert:[subClass new y = 16].	assert:[testClass1 new y = 16].	"test"	instance0:: nil.	instance1:: nil.	instance2:: nil.	subClass removeFromSystem.	testClass1 removeFromSystem.	testSubMixin removeFromSystem.	testClass0 removeFromSystem.	testSuperMixin removeFromSystem.	"cleanup")testSuperAndSubclass = (	| testSuperMixin <Class>  testSubMixin <Class> testClass0 <Class> testClass1 <Class>  subClass <Class>   instance1 <TestSuperclassSub>  instance2 <TestSuperclassSub>  instance0 <TestSuperclassSuper> reps <List[MixinRep]> lreps <List[LowLevelMixinRep]> outerMixin <Class>  	rep1 <MixinRep>  rep2 <MixinRep> mirror <LowLevelMixinMirror> 	|	"Test the effect of modifying the superclass of an umodified subclass"	testClass0:: makeClass:  'class TestSuperAndSubclassSuper = ( | z | )(''unclassified'' foo = (^91))'.	"create a superclass"	testSuperMixin:: SystemMetadata mixinOf: testClass0.	"create its mixin"	testClass1:: makeClass:  'class TestSuperAndSubclassSub = ()(''unclassified'' bar = (^37))'.	testSubMixin:: SystemMetadata mixinOf: testClass1.	subClass:: testSubMixin mixin apply: testClass0.	"create subclass, its mixin etc."	instance0:: testClass0 new.	instance1::  testClass1 new.	instance2:: subClass new.	"create instances"	assert:[instance0 foo = 91].	assert:[instance2 foo = 91].	assert:[instance0 z isNil].	assert:[instance2 z isNil].		assert:[instance1 bar = 37].	assert:[instance2 bar = 37].	"test that all is as expected"	rep1:: newCompiler compileClassSource: 'Newspeak3''NS2-examples''	class TestSuperAndSubclassSuper = ( | w = bar*3. | )(''unclassified'' bar = (^7) bam = (^w) )' readStream within: nil.	rep2:: newCompiler compileClassSource: 'Newspeak3''NS2-examples''	class TestSuperAndSubclassSub = ( | x =  2* bar. y = x + 2. | )(''unclassified'' bar = (^39) baz = (^x + y) )' readStream within: nil.			install: ({rep1. rep2} collect: [:r | lowLevelMixinRep: r]).			"change mixin of superclass"	assert:[instance0 bar = 7].	assert:[instance1 bar = 39].	assert:[instance2 bar = 39].	assert:[instance0 bam isNil].	instance0 w:3.	assert:[instance0 bam = 3].		assert:[instance2 bam isNil].	instance2 w: 5.	assert:[instance2 bam = 5].	assert:[testClass0 new w = 21].	assert:[subClass new x = 78].	assert:[subClass new w = 117].	assert:[testClass0 new bam = 21].	assert:[subClass new bam = 117].	assert:[testClass1 new baz = 158].	assert:[subClass new baz = 158].	assert:[testClass1 new y = 80].	assert:[subClass new y = 80].	"test"	instance0:: nil.	instance1:: nil.	instance2:: nil.	subClass removeFromSystem.	testClass1 removeFromSystem.	testSubMixin removeFromSystem.	testClass0 removeFromSystem.	testSuperMixin removeFromSystem.	"cleanup")testSuperclass = (	| testSuperMixin <Class>  testSubMixin <Class> testClass0 <Class> testClass1 <Class>  subClass <Class>   instance1 <TestSuperclassSub>  instance2 <TestSuperclassSub>  instance0 <TestSuperclassSuper> reps <List[MixinRep]> lreps <List[LowLevelMixinRep]> outerMixin <Class>  	rep <MixinRep>  mirror <LowLevelMixinMirror> 	|	"Test the effect of modifying the superclass of an umodified subclass"	testClass0:: makeClass:  'class TestSuperclassSuper = ( | z | )(''unclassified'' foo = (^91))'.	"create a superclass"	testSuperMixin:: SystemMetadata mixinOf: testClass0.	"create its mixin"	testClass1:: makeClass:  'class TestSuperclassSub = ()(''unclassified'' bar = (^37))'.	testSubMixin:: SystemMetadata mixinOf: testClass1.	subClass:: testSubMixin mixin apply: testClass0.	"create subclass, its mixin etc."	instance0:: testClass0 new.	instance1::  testClass1 new.	instance2:: subClass new.	"create instances"	assert:[instance0 foo = 91].	assert:[instance2 foo = 91].	assert:[instance0 z isNil].	assert:[instance2 z isNil].		assert:[instance1 bar = 37].	assert:[instance2 bar = 37].	"test that all is as expected"	rep:: newCompiler compileClassSource: 'Newspeak3''NS2-examples''	class TestSuperclassSuper = ( | x =  2* bar. y = x + 2. | )(''unclassified'' bar = (^7) bam = (^x) )' readStream within: nil.		install: {lowLevelMixinRep: rep}.			"change mixin of superclass"	assert:[instance0 bar = 7].	assert:[instance1 bar = 37].	assert:[instance2 bar = 37].	assert:[instance0 bam isNil].	assert:[instance2 bam isNil].	instance2 x: 5.	assert:[instance2 bam = 5].	assert:[testClass0 new x = 14].	assert:[subClass new x = 74].	assert:[testClass0 new y = 16].	assert:[subClass new y = 76].	"test"	instance0:: nil.	instance1:: nil.	instance2:: nil.	subClass removeFromSystem.	testClass1 removeFromSystem.	testSubMixin removeFromSystem.	testClass0 removeFromSystem.	testSuperMixin removeFromSystem.	"cleanup")'testing'testAddMethod = (	| testClass <Class>  mirror <CompiledMixinMirror> method <LowLevelMethodMirror> instance <TestAddMethod_oneClass> outerMixin <Class> |	testClass:: makeClass:  'class TestAddMethod = ()(''unclassified'' bar = (^35))'.	outerMixin:: SystemMetadata mixinOf: testClass.	instance:: testClass new.	mirror:: makeLowLevelMirrorFor: outerMixin.	mirror methods addMirror:(createMethod: 'foo = ( ^self bar + 7)' in: testClass).	install: {{mirror. {}}}.	assert:[ instance foo = (instance bar + 7)].	instance:: nil.	testClass removeFromSystem.	outerMixin removeFromSystem.	)testAddNestedClass = (	| testClass <Class>  mirror <LowLevelMixinMirror> method <LowLevelMethodMirror> instance <TestAddMethod_oneClass> rep <MixinRep> nestedMixin <Class> outerMixin <Class> |	testClass:: makeClass:  'class TestAddNestedClass = ()(''unclassified'' bar = (^35))'.	outerMixin:: SystemMetadata mixinOf:testClass.	instance:: testClass new.	rep:: newCompiler compileClassSource: 'Newspeak3''NS2-examples''class TestAddNestedClass = ()(	class Nested = () (	''unclassified'' 	bar = (^35)	))' readStream within: nil.		install: {lowLevelMixinRep: rep}.	assert:[ instance Nested new bar = 35].	nestedMixin:: SystemMetadata mixinOf: instance Nested.	instance Nested removeFromSystem.	instance:: nil.	nestedMixin removeFromSystem.	testClass removeFromSystem.	outerMixin removeFromSystem.	)testAddSlot = (	| testClass <Class>  mirror <LowLevelMixinMirror> slot <InstanceVariableMirror> instance <TestAddSlot_oneClass> outerMixin <Class> |	testClass:: makeClass:  'class TestAddSlot = ()()'.	outerMixin:: SystemMetadata mixinOf: testClass.	instance:: testClass new.	mirror:: makeLowLevelMirrorFor: outerMixin.	slot:: InstanceVariableMirror named: #x.	mirror instVars addMirror: slot.	install: {{mirror. {}}}.	mirror:: makeLowLevelMirrorFor: outerMixin.	assert:[mirror instVars includesMirrorNamed: #x].	instance:: nil.	testClass removeFromSystem.	outerMixin removeFromSystem.		)testChangeMethod = (	| testClass <Class>  mirror <CompiledMixinMirror> method <LowLevelMethodMirror> instance <TestAddMethod_oneClass> outerMixin <Class> |	testClass:: makeClass:  'class TestChangeMethod = ()(''unclassified'' bar = (^35))'.	outerMixin:: SystemMetadata mixinOf: testClass.	instance:: testClass new.	mirror:: makeLowLevelMirrorFor: outerMixin.	mirror methods addMirror:(createMethod: 'bar = ( ^7)' in: testClass).	install: {{mirror. {}}}.	assert:[ instance bar = 7].	instance:: nil.	testClass removeFromSystem.	outerMixin removeFromSystem.	)testCreateMultipleClasses = (	| testMixin <Class> testClass1 <Class>  testClass2 <Class>  testClass3 <Class>   instance1 <TestCreateMultipleClasses1>  instance2 <TestCreateMultipleClasses2>  instance3 <TestCreateMultipleClasses3> reps <List[MixinRep]> lreps <List[LowLevelMixinRep]> testMixins <List[MixinList]>  |		reps:: {createClass:  'class TestCreateMultipleClasses1 = ()(''unclassified'' bar = (^37))'.			createClass:  'class TestCreateMultipleClasses2 = ()(''unclassified'' baz = (^42))'.			createClass:  'class TestCreateMultipleClasses3 = ()(''unclassified'' foo = (^91))'}.		lreps:: reps collect:[:r <MixinRep> | lowLevelMixinRep: r].	testMixins:: install: lreps.		testClass1:: (testMixins at: 1) head mixin apply: Object.	instance1:: testClass1 new.	assert:[ instance1 bar = 37].	instance1:: nil.		testClass2:: (testMixins at: 2) head mixin apply: Object.	instance2:: testClass2 new.	assert:[ instance2 baz = 42].	instance2:: nil.		testClass3:: (testMixins at: 3) head mixin apply: Object.	instance3:: testClass3 new.	assert:[ instance3 foo = 91].	instance3:: nil.	testClass1 removeFromSystem.	testClass2 removeFromSystem.	testClass3 removeFromSystem.				testMixins do:[:m <Class> | m head removeFromSystem].)testCreateOneClass = (	|  testClass1 <Class>  instance1 <TestCreateMultipleClasses1>  reps <List[MixinRep]> lreps <List[LowLevelMixinRep]> testMixins <List[MixinList]>  |		reps:: {createClass:  'class TestCreateOneClass = ()(''unclassified'' bar = (^37))'}.		lreps:: reps collect:[:r <MixinRep> | lowLevelMixinRep: r].	testMixins:: install: lreps.		testClass1:: (testMixins at: 1) head mixin apply: Object.	instance1:: testClass1 new.	assert:[ instance1 bar = 37].	instance1:: nil.	testClass1 removeFromSystem.				testMixins do:[:m <Class> | m head removeFromSystem].)testHierarchyChanges = (	| testMixin <Class> testClass0 <Class> testClass1 <Class>  testClass2 <Class>  testClass3 <Class>   instance1 <TestHierarchyChanges2>  instance2 <TestHierarchyChanges1>  instance3 <TestHierarchyChanges3> instance12 <TestHierarchyChanges1> reps <List[MixinRep]> lreps <List[LowLevelMixinRep]> outerMixin <Class>  	rep1 <MixinRep> rep2 <MixinRep>  rep3 <MixinRep> mirror <LowLevelMixinMirror> subclass1 <Class> subclass2 <Class> subclass3 <Class> subclass12 <Class> testMixin1 <Class> testMixin2 <Class> testMixin3 <Class>	|	testClass0:: makeClass:  'class TestHierarchyChanges = ( | z | )(''unclassified'' foo = (^91))'.	testMixin:: SystemMetadata mixinOf: testClass0.	"create a mixin"	testClass1:: makeClass:  'class TestHierarchyChanges1 =  ()(''unclassified'' bar = (^37))'.			testClass2:: makeClass:  'class TestHierachyChanges2 = ()(''unclassified'' baz = (^42))'.	testClass3:: makeClass:  'class TestHierarchyChanges3 = ( | z | )(''unclassified'' foo = (^91))'.		subclass1:: testMixin mixin apply:  testClass1.	subclass2:: testMixin mixin apply:  testClass2.	subclass3:: testMixin mixin apply:  testClass3.		testMixin1:: SystemMetadata mixinOf: testClass1.	testMixin2:: SystemMetadata mixinOf: testClass2.	testMixin3:: SystemMetadata mixinOf: testClass3.	"create several invocations"		subclass12:: (SystemMetadata mixinOf: testClass1) mixin apply: subclass2.	"For each invocation, create several subclasses"		instance1:: subclass1 new.	instance2:: subclass2 new.	instance3:: subclass3 new.	instance12:: subclass12 new.	"For each class, create some instances"		rep1:: newCompiler compileClassSource: 'Newspeak3''NS2-examples''	class TestHierarchyChanges = ( | x =  2* bar. y = x + 2. | )(''unclassified'' bar = (^7) bam = (^x) )' readStream within: nil.		install: {lowLevelMixinRep: rep1}.		"change the mixin"		assert:[instance1 bar = 7].	assert:[instance2 bar = 7].	assert:[instance3 bar = 7].	assert:[instance12 bar = 37].		assert:[instance1 bam = nil].	assert:[instance2 bam = nil].	assert:[instance3 bam = nil].	assert:[subclass12 new y = 76].	"test effects on instances"		instance1:: nil.	instance2:: nil.	instance3:: nil.	instance12:: nil.	subclass1 removeFromSystem.	subclass2 removeFromSystem.	subclass3 removeFromSystem.	subclass12 removeFromSystem.	testClass1 removeFromSystem.	testClass2 removeFromSystem.	testClass3 removeFromSystem.	testMixin1 removeFromSystem.	testMixin2 removeFromSystem.	testMixin3 removeFromSystem.	testMixin removeFromSystem.)testMultipleChanges = (	| testMixin <Class> testClass1 <Class>  testClass2 <Class>  testClass3 <Class>   instance1 <TestCreateMultipleClasses1>  instance2 <TestCreateMultipleClasses2>  instance3 <TestCreateMultipleClasses3> reps <List[MixinRep]> lreps <List[LowLevelMixinRep]> testMixins <List[MixinList]>  	rep1 <MixinRep> rep2 <MixinRep>  rep3 <MixinRep> mirror <LowLevelMixinMirror>	|	testClass1:: makeClass:  'class TestMultipleChanges1 = ()(''unclassified'' bar = (^37))'.	testClass2:: makeClass:  'class TestMultipleChanges2 = ()(''unclassified'' baz = (^42))'.	testClass3:: makeClass:  'class TestMultipleChanges3 = ( | z | )(''unclassified'' foo = (^91))'.			testMixins:: {testClass1. testClass2 . testClass3} collect:[:c <Class> | SystemMetadata mixinOf: c].		instance1:: testClass1 new.	assert:[ instance1 bar = 37].	instance2:: testClass2 new.	assert:[ instance2 baz = 42].	instance3:: testClass3 new.	assert:[ instance3 foo = 91].	assert:[ instance3 z isNil].	rep1:: newCompiler compileClassSource: 'Newspeak3''NS2-examples''	class TestMultipleChanges1 = ()(''unclassified'' bar = (^7))' readStream within: nil.		rep2:: newCompiler compileClassSource: 'Newspeak3''NS2-examples''	class TestMultipleChanges2 = ()(''unclassified'' baz = (^91) bar = (^baz + 17))' readStream within: nil.		rep3:: newCompiler compileClassSource: 'Newspeak3''NS2-examples''	class TestMultipleChanges3 = ( | x =  2* bar. y = x + 2. | )(''unclassified'' bar = (^7) bam = (^x) )' readStream within: nil.		install: ({rep1. rep2. rep3} collect:[:r <MixinRep> | lowLevelMixinRep: r]).		assert:[ instance1 bar = 7].	assert:[ instance2 bar = 108].	assert:[ instance2 baz = 91].		assert:[ instance3 bam = nil].		assert:[testClass3 new	 bam = 14]. 	assert:[testClass3 new	 y = 16].	mirror:: makeLowLevelMirrorFor: (SystemMetadata mixinOf: testClass3).	assert:[(mirror instVars includesMirrorNamed: #z) not].			instance1:: nil.	instance2:: nil.		instance3:: nil.	testClass1 removeFromSystem.	testClass2 removeFromSystem.	testClass3 removeFromSystem.				testMixins do:[:m <Class> | m removeFromSystem].)testRemoveMethod = (	| testClass <Class>  mirror <LowLevelMixinMirror> method <LowLevelMethodMirror> rep <MixinRep> nestedMixin <Class> outerMixin <Class> |	testClass:: makeClass:  'class TestRemoveMethod = ()(''unclassified'' bar = (^35))'.	outerMixin:: SystemMetadata mixinOf: testClass.	rep:: newCompiler compileClassSource: 'Newspeak3''NS2-examples''class TestRemoveMethod = ()(	)' readStream within: nil.		install: {lowLevelMixinRep: rep}.	mirror:: makeLowLevelMirrorFor: outerMixin.	assert:[(mirror methods includesMirrorNamed: #bar) not].	testClass removeFromSystem.	outerMixin removeFromSystem.)testRemoveNestedClass = (	| testClass <Class>  mirror <LowLevelMixinMirror> method <LowLevelMethodMirror> instance <TestAddMethod_oneClass> rep <MixinRep> outerMixin <Class> |	testClass:: makeClass:  'class TestRemoveNestedClass = ()(	class Nested = () (	''unclassified'' 	bar = (^35)	))'.	outerMixin:: SystemMetadata mixinOf: testClass.	rep:: newCompiler compileClassSource: 'Newspeak3''NS2-examples''	class TestRemoveNestedClass = ()(	''unclassified'' 	bar = (^35))' readStream within: nil.		install: {lowLevelMixinRep: rep}.	mirror:: makeLowLevelMirrorFor: outerMixin.	assert:[(mirror methods includesMirrorNamed: #Nested) not].	testClass removeFromSystem.	outerMixin removeFromSystem.)testRemoveNestedNestedClass = (	| testClass <Class>  mirror <LowLevelMixinMirror> method <LowLevelMethodMirror> instance <TestAddMethod_oneClass> rep <MixinRep> outerMixin <Class> nestedClass <Class> |	testClass:: makeClass:  'class TestRemoveNestedNestedClass = ()(	class Nested = () (	  class NestedNested = ()()	''unclassified'' 	bar = (^35)	))'.	outerMixin:: SystemMetadata mixinOf: testClass.	rep:: newCompiler compileClassSource: 'Newspeak3''NS2-examples''	class TestRemoveNestedNestedClass = ()(	  class Nested = () (	  ''unclassified'' 	  bar = (^35)	 ))' readStream within: nil.		install: {lowLevelMixinRep: rep}.	nestedClass:: (SystemMetadata definingClassMetadataOf: testClass) nestedClasses detect:[:m | true].	mirror:: makeLowLevelMirrorFor: nestedClass.	assert:[(mirror methods includesMirrorNamed: #NestedNested) not].	testClass removeFromSystem.	outerMixin removeFromSystem.)testRemoveSlot = (	| testClass <Class>  mirror <LowLevelMixinMirror> method <LowLevelMethodMirror> rep <MixinRep> nestedMixin <Class> outerMixin <Class> |	testClass:: makeClass:  'class TestRemoveSlot = ( | aSlot | )()'.	outerMixin:: SystemMetadata mixinOf: testClass.	rep:: newCompiler compileClassSource: 'Newspeak3''NS2-examples''class TestRemoveSlot = ()(	)' readStream within: nil.		install: {lowLevelMixinRep: rep}.	mirror:: makeLowLevelMirrorFor: outerMixin.	assert:[(mirror instVars includesMirrorNamed: #aSlot) not].	testClass removeFromSystem.	outerMixin removeFromSystem.)'private'addMethod: src <String> within: m <LowLevelMixinMirror> = ( 	| compiledMethod <LowLevelMethodMirror> |	compiledMethod:: (newCompiler compileMethodSource: src readStream within: m).	m methods addMirror: compiledMethod.)createClass: src <String> ^  <MixinRep> = (	^newCompiler compileClassSource: ('Newsqueak2 ''NS2-tests'' ', src) readStream within: nil)createMethod: src <String> in: klass <Class> ^ <LowLevelMethodMirror> = ("Compile src in the context of klass and return a low level mirror on the method created  "	|  m <NS2ClassMirror> |	m:: reflection new reflectOnClass: (SystemMetadata mixinOf: klass).	^newCompiler compileMethodSource: src readStream within: m mixin.)install: reps <List[MixinRep]> ^ <List[MixinList]>  = (	^atomicInstaller atomicallyInstallMixinReps: reps namespace: Smalltalk)lowLevelMixinRep: rep <MixinRep>  = (	rep isEmpty ifTrue:[^rep].	^{rep first lowLevelMirror. rep last collect:[:r <MixinRep> | lowLevelMixinRep: r]})makeClass: src <String> ^ <Class> = (	| klass <Class> mxn <Class> mrep <MxinRep> |	mrep:: lowLevelMixinRep: (createClass: src).	mxn:: (install:{mrep}) first head.	(DefiningClassMetadata of: mxn) language: NewspeakLanguage2 new.	"Problem is that if language is not set it defaults to Smalltalk"	mxn environment: Smalltalk.	"set environment"	Smalltalk at:  mxn name asSymbol put: mxn. "install mixin in IDE namespace"	klass::  mxn mixin apply: Object.	"reflection new installClass: mixin intoIDEBasedOn: mrep first."	"hideSyntheticMethodsOf: mixin basedOn: m lowLevelMirror."	"fix organization to hide synthetic methods"	"(SystemMetadata systemMetadataOf: mixin) 		language: NewspeakLanguage2 new; "	"set language to NS2"		"languageData: mixin lowLevelMirror header. "		"set header in metadata based on source code in m"	^klass )makeLowLevelMirrorFor: klass <Class> ^ <LowLevelMixinMirror> = (	| llm <LowLevelMixinMirror> |	assert:[klass isMeta not].	llm:: LowLevelMixinMirror named: klass name isMeta: false.	klass instVarNames do:[: iv | llm instVars addMirror: (InstanceVariableMirror named: iv)].	klass methodDictionary do:[:method <CompiledMethod> | 		llm methods addMirror: (makeMethodMirrorFrom: method)		].	^llm)makeMethodMirrorFrom: c <CompiledMethod> ^ <LowLevelMethodMirror> = (	^LowLevelMethodMirror new method: c; yourself)makeMirrorFor: klass <Class> ^ <CompiledMixinMirror> = (	^newCompiler CompiledMixinMirror language: NewspeakLanguage2 new header: '' mirror: (makeLowLevelMirrorFor: klass))) : ('test framework'TEST_CONTEXT = ()))