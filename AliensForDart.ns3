Newspeak3
'Aliens'
class AliensForDart usingPlatform: p = (
"Aliens are Newspeak's capabilities for FFI. They allow Newspeak code to invoke Dart code and vice versa.

An Alien is the Newspeak representative of a Dart object. Upon receiving a message, an Alien expatriates the arguments, sends the message to the Dart object it wraps, and alienates the result.

An Expat is the Dart representative of a Newspeak object. Unpon receiving a message, an Expat alienates the arguments, sends the message to the Newspeak object it wraps, and expatriates the result.

A biligual object is one whose representation is the same in both languages: unwrapped basic types such as numbers, booleans. Note that even though Newspeak and Dart closures have the same representation, wrapping should occur because Newspeak closures expect Newspeak/Alien arguments and Dart closures expect Dart/Expat arguments.

alienate(o)
o is NS    => itself
o is Alien => itself
o is biligual => itself
o is Expat => unwrap
o is Dart  => wrap in alien

expatriate(o)
o is NS    => wrap in expat
o is Alien => unwrap
o is biligual => itself
o is Expat => itself
o is Dart  => itself

Copyright 2012 Google Inc.
   
Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0")
(
class Alien wrapping: o = (
"The Newspeak representative of a Dart object."|
private dartObject = o.
|)
('as yet unclassified'
doesNotUnderstand: message = (
	| result |
	result:: vmmirror 
		on: dartObject
		invoke: message selector
		with: (message arguments collect: [:arg | expatriate: arg]) dartList.
	^alienate: result
)) : ()
class Expat wrapping: o = (
"The Dart representative of a Newspeak object."|
newspeakObject = o.
|)
('as yet unclassified'
doesNotUnderstand: message = (
	| result |
	result:: vmmirror 
		on: newspeakObject
		invoke: message selector
		with: (message arguments collect: [:arg | alienate: arg]) dartList.
	^expatriate: result
)) : ()'as yet unclassified'
alienate: object = (
	"Bring a Dart object to Newspeak"
	(vmmirror isNewspeak: object) ifTrue: [
		"Only send isAlien/isExpat once we know it is Newspeak Object"
		object isAlien ifTrue: [^object "Shouldn't happen?"].
		object isExpat ifTrue: [^object newspeakObject].
		"Otherwise basic NS object"
		^object "Shouldn't happen?"].
	(vmmirror isBilingual: object) ifTrue: [^object].
	"Otherwise basic Dart object"
	^Alien wrapping: object
)
expatriate: object = (
	"Bring a Newspeak object to Dart"
	(vmmirror isNewspeak: object) ifTrue: [
		"Only send isAlien/isExpat once we know it is Newspeak Object"
		object isAlien ifTrue: [^object dartObject ].
		object isExpat ifTrue: [^object "Shouldn't happen?"].
		"Otherwise basic NS object"
		^Expat wrapping: object].
	(vmmirror isBilingual: object) ifTrue: [^object].
	"Otherwise basic Dart object"
	^object "Shouldn't happen?"
)) : ()