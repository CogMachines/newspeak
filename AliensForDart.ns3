Newspeak3
'Aliens'
class AliensForDart usingPlatform: p = (
(*Aliens are Newspeak's capabilities for FFI. They allow Newspeak code to invoke Dart code and vice versa.

An Alien is the Newspeak representative of a Dart object. Upon receiving a message, an Alien expatriates the arguments, sends the message to the Dart object it wraps, and alienates the result.

An Expat is the Dart representative of a Newspeak object. Unpon receiving a message, an Expat alienates the arguments, sends the message to the Newspeak object it wraps, and expatriates the result.

A bilingual object is one whose representation is the same in both languages: unwrapped basic types such as numbers and booleans. Note that even though Newspeak and Dart closures have the same representation, they are not bilingual and wrapping should occur because Newspeak closures expect Newspeak/Alien arguments and Dart closures expect Dart/Expat arguments.

alienate(o)
o is NS    => itself
o is Alien => itself
o is bilingual => itself
o is Expat => unwrap
o is Dart  => wrap in alien

expatriate(o)
o is NS    => wrap in expat
o is Alien => unwrap
o is bilingual => itself
o is Expat => itself
o is Dart  => itself

Copyright 2012 Google Inc.
   
Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0*))
(
class Alien wrapping: o = (
(*The Newspeak representative of a Dart object.*)|
private dartObject = o.
|)
('as yet unclassified'
protected doesNotUnderstand: message = (
	^self
		perform: message selector
		with: message arguments
)
isAlien = (
	^true
)
perform: dartSelector with: arguments = (
	| result |
	result:: vmmirror 
		on: dartObject
		invoke: dartSelector dartString
		with: (arguments collect: [:arg | expatriate: arg]) dartList.
	^alienate: result
)) : ()
class ClassAlien usingMirror: m = (|
	classMirror = m.
|)
('as yet unclassified'
constructor: constructorName with: args = (
	^Alien wrapping: (vmmirror 
		mirror: classMirror
		invokeConstructor: constructorName dartString
		with: (args collect: [:arg | expatriate: arg]) dartList)
)
protected doesNotUnderstand: message = (
	^self
		perform: message selector
		with: message arguments
)
isAlien = (
	^true
)
name = (
	^String wrapping: (vmmirror simpleNameOf: classMirror)
)
new: args = (
	^self constructor: '' with: args
)
perform: dartSelector with: arguments = (
	| result |
	result:: vmmirror 
		mirror: classMirror
		invoke: dartSelector dartString
		with: (arguments collect: [:arg | expatriate: arg]) dartList.
	^alienate: result
)) : ()
class ClosureAlien wrapping: o = (|
dartClosure = o.
|)
('as yet unclassified'
value = (
	^alienate: dartClosure value
)
value: a1 = (
	^alienate: (dartClosure value: (expatriate: a1))
)
value: a1 value: a2 = (
	^alienate: (dartClosure value: (expatriate: a1) value: (expatriate: a2))
)) : ()
class Expat wrapping: o = (
(*The Dart representative of a Newspeak object.*)|
newspeakObject = o.
|)
('as yet unclassified'
protected doesNotUnderstand: message = (
	^self
		perform: message selector dartString
		with: message arguments dartList
)
isExpat = (
	^true
)
perform: newspeakSelector with: arguments = (
	(*Note: invoked by Dart code, so the selector and argument list are already unwrapped*)
	| result |
	result:: vmmirror 
		on: newspeakObject
		invoke: newspeakSelector
		with: ((Array wrapping: arguments) collect: [:arg | alienate: arg]) dartList.
	^expatriate: result
)) : ()
class LibraryAlien usingMirror: m = (| libraryMirror = m. |)
('as yet unclassified'
classNamed: n = (
	^ClassAlien usingMirror:
		(vmmirror fromLibraryMirror: libraryMirror getClassNamed: n dartString)
)
protected doesNotUnderstand: message = (
	^self
		perform: message selector
		with: message arguments
)
name = (
	^String wrapping: (vmmirror simpleNameOf: libraryMirror)
)
perform: dartSelector with: arguments = (
	| result |
	result:: vmmirror 
		mirror: libraryMirror
		invoke: dartSelector dartString
		with: (arguments collect: [:arg | expatriate: arg]) dartList.
	^alienate: result
)) : ('as yet unclassified'
core = (
	^named: 'dart:core'
)
named: n = (
	^usingMirror: (vmmirror mirrorForLibraryNamed: n dartString)
))'as yet unclassified'
alienate: object = (
	(*Bring a Dart object to Newspeak*)
	(vmmirror isNewspeak: object) ifTrue: [
		(*Only send isAlien/isExpat once we know it is Newspeak Object*)
		object isAlien ifTrue: [halt. ^object (*Shouldn't happen?*)].
		object isExpat ifTrue: [^object newspeakObject].
		(*Otherwise basic NS object*)
		halt. ^object (*Shouldn't happen?*)].
	(vmmirror isBilingual: object) ifTrue: [^object].
	(vmmirror isFunction: object) ifTrue: [^ClosureAlien wrapping: object].
	(vmmirror isDartString: object) ifTrue: [^String wrapping: object].
	(*Otherwise basic Dart object*)
	^Alien wrapping: object
)
expatriate: object = (
	(*Bring a Newspeak object to Dart*)
	(vmmirror isNewspeak: object) ifTrue: [
		(*Only send isAlien/isExpat once we know it is Newspeak Object*)
		object isAlien ifTrue: [^object dartObject ].
		object isExpat ifTrue: [halt. ^object (*Shouldn't happen?*)].
		object isString ifTrue: [^object dartString].
		(*Otherwise basic NS object*)
		^Expat wrapping: object].
	(vmmirror isBilingual: object) ifTrue: [^object].
	(*Otherwise basic Dart object*)
	(vmmirror isFunction: object) ifTrue: [^expatriateBlock: object].
	halt. ^object (*Shouldn't happen?*)
)
expatriateBlock: b = (
	(*Bring a Newspeak closure to Dart. Special because the call operator is not (yet) overridable in Dart.*)
	
	b numArgs = 0 ifTrue: [ ^[expatriate: b value] ].
	b numArgs = 1 ifTrue: [ ^[:a1 | expatriate: (b value: (alienate: a1))] ].
	b numArgs = 2 ifTrue: [ ^[:a1 :a2 | expatriate: (b value: (alienate: a1) value: (alienate: a2))] ].
	
	halt.
)) : ()