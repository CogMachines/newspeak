Newspeak3
'NewspeakObjectFormat'
class BloatedHistory withShift: s usingAssert: a = NewspeakObject (
"

   Copyright 2008 Cadence Design Systems, Inc.
   
   Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
"|
	private assert = a.

	shift = s.
	bucketSize = 1 << shift - 3.
	nothing = Object new.
	array = Array new: 4096 * (bucketSize + 3) withAll: nothing.
|assert true: [shift > 1])
('as yet unclassified'
at: key = (
	^at: key ifAbsent: [halt]
)
at: key ifAbsent: absentAction = (
	| bucketStart overflow |
	bucketStart:: bucketStartFor: key.
	bucketStart to: bucketStart + bucketSize by: 2 do:
		[ :i | (array at: i) == key ifTrue: [^array at: i + 1]].
	overflow:: overflowAtBucket: bucketStart.
	overflow == nothing ifFalse:
		[1 to: overflow size by: 2 do:
			[ :i | | k |
			k:: overflow at: i.
			k == key ifTrue: [^overflow at: i + 1].
			k == nothing ifTrue: [absentAction value]]].
	^absentAction value
)
at: key put: value = (
	| bucketStart overflow |
	bucketStart:: bucketStartFor: key.
	bucketStart to: bucketStart + bucketSize by: 2 do:
		[ :i | (array at: i) == nothing ifTrue:
			[array at: i put: key.
			^array at: i + 1 put: value]].
	overflow:: overflowAtBucket: bucketStart.
	overflow == nothing ifTrue:
		[overflow:: Array new: 2 withAll: nothing.
		overflowAtBucket: bucketStart put: overflow].
	1 to: overflow size - 1 by: 2 do:
		[ :i | (overflow at: i) == nothing ifTrue:
			[overflow at: i put: key.
			^overflow at: i + 1 put: value]].
	overflow:: overflow, (Array new: overflow size withAll: nothing).
	overflowAtBucket: bucketStart put: overflow.
	(overflow size >> 1) + 1 to: overflow size - 1 by: 2 do:
		[ :i | (overflow at: i) == nothing ifTrue:
			[overflow at: i put: key.
			^overflow at: i + 1 put: value]].	
	halt "should not happen"
)
bucketEndFor: key = (
	^(((key identityHash bitAnd: 4095) + 1) << shift) - 2
)
bucketStartFor: key = (
	^((key identityHash bitAnd: 4095) << shift) + 1
)
includesKey: key  = (
	at: key ifAbsent: [^false].
	^true
)
overflowAtBucket: bucketStart = (
	^array at: bucketStart + bucketSize + 1
)
overflowAtBucket: bucketStart put: value  = (
	^array at: bucketStart + bucketSize + 1 put: value
))