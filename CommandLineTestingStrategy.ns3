Newspeak3
'Newspeak'
class CommandLineTestingStrategy platform: platform appPackager: appPkgr path: cmdPath options: options = (
(* A compiler testing strategy that compiles classes to be tested to a Dart/JS source file and then runs the Dart VM/node.js on the file.

Derived from InImageNSCompilerTestingStrategy

Copyright 2011 Vassili Bykov
Copyright 2012 Google Inc.
Copyright 2013 Ryan Macnak

Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0 *)|
	FileDirectory = platform blackMarket FileDirectory.
	NewShell = platform blackMarket ExternalProcess NewShell.
	newShell = NewShell usingPlatform: platform.
	CommandError = newShell CommandError.
	cmd = newShell perform: cmdPath.
	options = options.
	namespace = appPkgr FlatBlackMarket usingSmalltalk: platform blackMarket Smalltalk.
	private appPackager = appPkgr.
|assert: [platform blackMarket FileDirectory default fileExists: cmdPath]
	message: 'Cannot find ', cmdPath)
('accessing'
test: sampleClassSource <String> with: testClassSource <String> ifFailure: failureBlock <[:String]> ifError: errorBlock <[:String]> = (
	
	| 
	testSource = sourceOfModuleWithSample: sampleClassSource test: testClassSource.
	fn = 'test', testSource hash printString.
	stm
	result
	|
	
	appPackager outDirectory: FileDirectory root / 'tmp'.
	appPackager outDirectory assureExistence.
	[stm:: appPackager outDirectory forceNewFileNamed: fn.
	stm lineEndConvention: #lf.
	stm nextPutAll: (String streamContents: [:bufferStream |
	appPackager compileSource: testSource usingNamespace: namespace to: bufferStream])]
		ensure: [ stm ifNotNil: [ stm flush; close ] ].
	cmd launcher refresh locateProgram.
	
	result:: cmd with: options, {(appPackager outDirectory / fn) fullName}.
	
	(result includesSubString: 'Success') ifTrue: [^self].
	(result includesSubString: 'Failure') ifTrue: [^failureBlock value: result].
	^errorBlock value: result
)'as yet unclassified'
assertionFailedClassSource ^<String> = (
	^'class AssertionFailed description: d = Error description: d () () : ( 
		''cat'' signal: message = ( ^(self description: message) signal ) )'
)
assertionMethodsSource ^<String> = (
	^'''assertions''
	assert: aBlock = (
		aBlock value ifFalse: [AssertionFailed signal: ''Assertion failed'']
	)
	assert: aBlock description: descriptionText = (
		aBlock value ifFalse: [AssertionFailed signal: ''Assertion failed: '', descriptionText]
	)
	assert: aBlock descriptionBlock: descriptionBlock = (
		aBlock value ifFalse: [AssertionFailed signal: descriptionBlock value]
	)
	assert: aBlock signals: errorClass = (
		assert: aBlock signals: errorClass description: ''Exception expected but not signaled''
	)
	assert: aBlock signals: errorClass description: descriptionText = (
		aBlock on: errorClass do: [:ex | ^self].
		AssertionFailed signal: descriptionText
	)'
)
runMethodSource ^<String> = (
	^'''running''
	run = (
	(*[*)(SampleTest test: Sample) test. print: ''Success''(*]
		on: Error do: [:ex |
			(ex class = AssertionFailed)
				ifTrue: [print: ''Failure: '', ex description]
				ifFalse: [print: ''Error: '', ex description]]*)
	)'
)
sourceOfModuleWithSample: sampleClassSource <String> test: testerClassSource <String> ^<String> = (
	| source |
	source:: (String new: 400) writeStream.
	source
		nextPutAll: 'Newspeak3'; cr;
		nextPutAll: '''SomeCategory'''; cr;
		nextPutAll: 'class Test packageUsing: ns = ( |
	 		| ) ('; cr;
		nextPutAll: assertionFailedClassSource; cr;
		nextPutAll: sampleClassSource; cr;
		nextPutAll: testerClassSource; cr;
		nextPutAll: assertionMethodsSource; cr;
		nextPutAll: runMethodSource; cr;
		nextPutAll: 'main: p args: argv = (self run) '; cr;
		nextPutAll: '):( ''cat'' main = (self new run) )'.
	^source contents
)) : ()